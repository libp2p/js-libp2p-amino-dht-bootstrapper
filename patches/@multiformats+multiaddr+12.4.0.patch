diff --git a/node_modules/@multiformats/multiaddr/dist/index.min.js b/node_modules/@multiformats/multiaddr/dist/index.min.js
index c29d2f4..4d87090 100644
--- a/node_modules/@multiformats/multiaddr/dist/index.min.js
+++ b/node_modules/@multiformats/multiaddr/dist/index.min.js
@@ -1,3 +1,4 @@
 (function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.MultiformatsMultiaddr = factory()}(typeof self !== 'undefined' ? self : this, function () {
-"use strict";var MultiformatsMultiaddr=(()=>{var ve=Object.defineProperty;var Qt=Object.getOwnPropertyDescriptor;var Ht=Object.getOwnPropertyNames;var Kt=Object.prototype.hasOwnProperty;var b=(r,e)=>{for(var t in e)ve(r,t,{get:e[t],enumerable:!0})},Zt=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Ht(e))!Kt.call(r,o)&&o!==t&&ve(r,o,{get:()=>e[o],enumerable:!(n=Qt(e,o))||n.enumerable});return r};var Yt=r=>Zt(ve({},"__esModule",{value:!0}),r);var Bn={};b(Bn,{MultiaddrFilter:()=>ye,fromNodeAddress:()=>Dn,fromStringTuples:()=>Mn,fromTuples:()=>Wt,isMultiaddr:()=>be,isName:()=>$n,multiaddr:()=>q,protocols:()=>p,resolvers:()=>at});function G(r=0){return new Uint8Array(r)}var _t=Math.pow(2,7),er=Math.pow(2,14),tr=Math.pow(2,21),Ae=Math.pow(2,28),Ee=Math.pow(2,35),Ie=Math.pow(2,42),Se=Math.pow(2,49),d=128,h=127;function U(r){if(r<_t)return 1;if(r<er)return 2;if(r<tr)return 3;if(r<Ae)return 4;if(r<Ee)return 5;if(r<Ie)return 6;if(r<Se)return 7;if(Number.MAX_SAFE_INTEGER!=null&&r>Number.MAX_SAFE_INTEGER)throw new RangeError("Could not encode varint");return 8}function rr(r,e,t=0){switch(U(r)){case 8:e[t++]=r&255|d,r/=128;case 7:e[t++]=r&255|d,r/=128;case 6:e[t++]=r&255|d,r/=128;case 5:e[t++]=r&255|d,r/=128;case 4:e[t++]=r&255|d,r>>>=7;case 3:e[t++]=r&255|d,r>>>=7;case 2:e[t++]=r&255|d,r>>>=7;case 1:{e[t++]=r&255,r>>>=7;break}default:throw new Error("unreachable")}return e}function nr(r,e,t=0){switch(U(r)){case 8:e.set(t++,r&255|d),r/=128;case 7:e.set(t++,r&255|d),r/=128;case 6:e.set(t++,r&255|d),r/=128;case 5:e.set(t++,r&255|d),r/=128;case 4:e.set(t++,r&255|d),r>>>=7;case 3:e.set(t++,r&255|d),r>>>=7;case 2:e.set(t++,r&255|d),r>>>=7;case 1:{e.set(t++,r&255),r>>>=7;break}default:throw new Error("unreachable")}return e}function or(r,e){let t=r[e],n=0;if(n+=t&h,t<d||(t=r[e+1],n+=(t&h)<<7,t<d)||(t=r[e+2],n+=(t&h)<<14,t<d)||(t=r[e+3],n+=(t&h)<<21,t<d)||(t=r[e+4],n+=(t&h)*Ae,t<d)||(t=r[e+5],n+=(t&h)*Ee,t<d)||(t=r[e+6],n+=(t&h)*Ie,t<d)||(t=r[e+7],n+=(t&h)*Se,t<d))return n;throw new RangeError("Could not decode varint")}function ir(r,e){let t=r.get(e),n=0;if(n+=t&h,t<d||(t=r.get(e+1),n+=(t&h)<<7,t<d)||(t=r.get(e+2),n+=(t&h)<<14,t<d)||(t=r.get(e+3),n+=(t&h)<<21,t<d)||(t=r.get(e+4),n+=(t&h)*Ae,t<d)||(t=r.get(e+5),n+=(t&h)*Ee,t<d)||(t=r.get(e+6),n+=(t&h)*Ie,t<d)||(t=r.get(e+7),n+=(t&h)*Se,t<d))return n;throw new RangeError("Could not decode varint")}function J(r,e,t=0){return e==null&&(e=G(U(r))),e instanceof Uint8Array?rr(r,e,t):nr(r,e,t)}function L(r,e=0){return r instanceof Uint8Array?or(r,e):ir(r,e)}function F(r,e){e==null&&(e=r.reduce((o,i)=>o+i.length,0));let t=G(e),n=0;for(let o of r)t.set(o,n),n+=o.length;return t}var Fe={};b(Fe,{base10:()=>ur});var Xn=new Uint8Array(0);function dt(r,e){if(r===e)return!0;if(r.byteLength!==e.byteLength)return!1;for(let t=0;t<r.byteLength;t++)if(r[t]!==e[t])return!1;return!0}function N(r){if(r instanceof Uint8Array&&r.constructor.name==="Uint8Array")return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Unknown type, must be binary type")}function pt(r){return new TextEncoder().encode(r)}function ut(r){return new TextDecoder().decode(r)}function sr(r,e){if(r.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),n=0;n<t.length;n++)t[n]=255;for(var o=0;o<r.length;o++){var i=r.charAt(o),s=i.charCodeAt(0);if(t[s]!==255)throw new TypeError(i+" is ambiguous");t[s]=o}var a=r.length,u=r.charAt(0),g=Math.log(a)/Math.log(256),l=Math.log(256)/Math.log(a);function A(c){if(c instanceof Uint8Array||(ArrayBuffer.isView(c)?c=new Uint8Array(c.buffer,c.byteOffset,c.byteLength):Array.isArray(c)&&(c=Uint8Array.from(c))),!(c instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(c.length===0)return"";for(var w=0,B=0,E=0,S=c.length;E!==S&&c[E]===0;)E++,w++;for(var C=(S-E)*l+1>>>0,v=new Uint8Array(C);E!==S;){for(var P=c[E],D=0,I=C-1;(P!==0||D<B)&&I!==-1;I--,D++)P+=256*v[I]>>>0,v[I]=P%a>>>0,P=P/a>>>0;if(P!==0)throw new Error("Non-zero carry");B=D,E++}for(var T=C-B;T!==C&&v[T]===0;)T++;for(var ce=u.repeat(w);T<C;++T)ce+=r.charAt(v[T]);return ce}function k(c){if(typeof c!="string")throw new TypeError("Expected String");if(c.length===0)return new Uint8Array;var w=0;if(c[w]!==" "){for(var B=0,E=0;c[w]===u;)B++,w++;for(var S=(c.length-w)*g+1>>>0,C=new Uint8Array(S);c[w];){var v=t[c.charCodeAt(w)];if(v===255)return;for(var P=0,D=S-1;(v!==0||P<E)&&D!==-1;D--,P++)v+=a*C[D]>>>0,C[D]=v%256>>>0,v=v/256>>>0;if(v!==0)throw new Error("Non-zero carry");E=P,w++}if(c[w]!==" "){for(var I=S-E;I!==S&&C[I]===0;)I++;for(var T=new Uint8Array(B+(S-I)),ce=B;I!==S;)T[ce++]=C[I++];return T}}}function y(c){var w=k(c);if(w)return w;throw new Error(`Non-${e} character`)}return{encode:A,decodeUnsafe:k,decode:y}}var ar=sr,cr=ar,lt=cr;var Ce=class{name;prefix;baseEncode;constructor(e,t,n){this.name=e,this.prefix=t,this.baseEncode=n}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}},Pe=class{name;prefix;baseDecode;prefixCodePoint;constructor(e,t,n){this.name=e,this.prefix=t;let o=t.codePointAt(0);if(o===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=o,this.baseDecode=n}decode(e){if(typeof e=="string"){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(e){return ht(this,e)}},Ue=class{decoders;constructor(e){this.decoders=e}or(e){return ht(this,e)}decode(e){let t=e[0],n=this.decoders[t];if(n!=null)return n.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}};function ht(r,e){return new Ue({...r.decoders??{[r.prefix]:r},...e.decoders??{[e.prefix]:e}})}var Te=class{name;prefix;baseEncode;baseDecode;encoder;decoder;constructor(e,t,n,o){this.name=e,this.prefix=t,this.baseEncode=n,this.baseDecode=o,this.encoder=new Ce(e,t,n),this.decoder=new Pe(e,t,o)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}};function X({name:r,prefix:e,encode:t,decode:n}){return new Te(r,e,t,n)}function M({name:r,prefix:e,alphabet:t}){let{encode:n,decode:o}=lt(t,r);return X({prefix:e,name:r,encode:n,decode:i=>N(o(i))})}function dr(r,e,t,n){let o={};for(let l=0;l<e.length;++l)o[e[l]]=l;let i=r.length;for(;r[i-1]==="=";)--i;let s=new Uint8Array(i*t/8|0),a=0,u=0,g=0;for(let l=0;l<i;++l){let A=o[r[l]];if(A===void 0)throw new SyntaxError(`Non-${n} character`);u=u<<t|A,a+=t,a>=8&&(a-=8,s[g++]=255&u>>a)}if(a>=t||255&u<<8-a)throw new SyntaxError("Unexpected end of data");return s}function pr(r,e,t){let n=e[e.length-1]==="=",o=(1<<t)-1,i="",s=0,a=0;for(let u=0;u<r.length;++u)for(a=a<<8|r[u],s+=8;s>t;)s-=t,i+=e[o&a>>s];if(s!==0&&(i+=e[o&a<<t-s]),n)for(;i.length*t&7;)i+="=";return i}function f({name:r,prefix:e,bitsPerChar:t,alphabet:n}){return X({prefix:e,name:r,encode(o){return pr(o,n,t)},decode(o){return dr(o,n,t,r)}})}var ur=M({prefix:"9",name:"base10",alphabet:"0123456789"});var Ne={};b(Ne,{base16:()=>fr,base16upper:()=>lr});var fr=f({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),lr=f({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var ze={};b(ze,{base2:()=>hr});var hr=f({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var ke={};b(ke,{base256emoji:()=>br});var mt=Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"),mr=mt.reduce((r,e,t)=>(r[t]=e,r),[]),gr=mt.reduce((r,e,t)=>{let n=e.codePointAt(0);if(n==null)throw new Error(`Invalid character: ${e}`);return r[n]=t,r},[]);function wr(r){return r.reduce((e,t)=>(e+=mr[t],e),"")}function xr(r){let e=[];for(let t of r){let n=t.codePointAt(0);if(n==null)throw new Error(`Invalid character: ${t}`);let o=gr[n];if(o==null)throw new Error(`Non-base256emoji character: ${t}`);e.push(o)}return new Uint8Array(e)}var br=X({prefix:"\u{1F680}",name:"base256emoji",encode:wr,decode:xr});var De={};b(De,{base32:()=>z,base32hex:()=>Er,base32hexpad:()=>Sr,base32hexpadupper:()=>Cr,base32hexupper:()=>Ir,base32pad:()=>vr,base32padupper:()=>Ar,base32upper:()=>yr,base32z:()=>Pr});var z=f({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),yr=f({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),vr=f({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),Ar=f({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),Er=f({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),Ir=f({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),Sr=f({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),Cr=f({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),Pr=f({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var Me={};b(Me,{base36:()=>ee,base36upper:()=>Ur});var ee=M({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),Ur=M({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var $e={};b($e,{base58btc:()=>x,base58flickr:()=>Tr});var x=M({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),Tr=M({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var Be={};b(Be,{base64:()=>Fr,base64pad:()=>Nr,base64url:()=>zr,base64urlpad:()=>kr});var Fr=f({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),Nr=f({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),zr=f({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),kr=f({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});var Le={};b(Le,{base8:()=>Dr});var Dr=f({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var Ve={};b(Ve,{identity:()=>Mr});var Mr=X({prefix:"\0",name:"identity",encode:r=>ut(r),decode:r=>pt(r)});var co=new TextEncoder,po=new TextDecoder;var je={};b(je,{identity:()=>on});var Lr=xt,gt=128,Vr=127,Or=~Vr,jr=Math.pow(2,31);function xt(r,e,t){e=e||[],t=t||0;for(var n=t;r>=jr;)e[t++]=r&255|gt,r/=128;for(;r&Or;)e[t++]=r&255|gt,r>>>=7;return e[t]=r|0,xt.bytes=t-n+1,e}var Rr=Oe,qr=128,wt=127;function Oe(r,n){var t=0,n=n||0,o=0,i=n,s,a=r.length;do{if(i>=a)throw Oe.bytes=0,new RangeError("Could not decode varint");s=r[i++],t+=o<28?(s&wt)<<o:(s&wt)*Math.pow(2,o),o+=7}while(s>=qr);return Oe.bytes=i-n,t}var Gr=Math.pow(2,7),Jr=Math.pow(2,14),Xr=Math.pow(2,21),Wr=Math.pow(2,28),Qr=Math.pow(2,35),Hr=Math.pow(2,42),Kr=Math.pow(2,49),Zr=Math.pow(2,56),Yr=Math.pow(2,63),_r=function(r){return r<Gr?1:r<Jr?2:r<Xr?3:r<Wr?4:r<Qr?5:r<Hr?6:r<Kr?7:r<Zr?8:r<Yr?9:10},en={encode:Lr,decode:Rr,encodingLength:_r},tn=en,te=tn;function re(r,e=0){return[te.decode(r,e),te.decode.bytes]}function W(r,e,t=0){return te.encode(r,e,t),e}function Q(r){return te.encodingLength(r)}function V(r,e){let t=e.byteLength,n=Q(r),o=n+Q(t),i=new Uint8Array(o+t);return W(r,i,0),W(t,i,n),i.set(e,o),new H(r,t,e,i)}function pe(r){let e=N(r),[t,n]=re(e),[o,i]=re(e.subarray(n)),s=e.subarray(n+i);if(s.byteLength!==o)throw new Error("Incorrect length");return new H(t,o,s,e)}function bt(r,e){if(r===e)return!0;{let t=e;return r.code===t.code&&r.size===t.size&&t.bytes instanceof Uint8Array&&dt(r.bytes,t.bytes)}}var H=class{code;size;digest;bytes;constructor(e,t,n,o){this.code=e,this.size=t,this.digest=n,this.bytes=o}};var yt=0,rn="identity",vt=N;function nn(r){return V(yt,vt(r))}var on={code:yt,name:rn,encode:vt,digest:nn};var Ge={};b(Ge,{sha256:()=>sn,sha512:()=>an});function qe({name:r,code:e,encode:t}){return new Re(r,e,t)}var Re=class{name;code;encode;constructor(e,t,n){this.name=e,this.code=t,this.encode=n}digest(e){if(e instanceof Uint8Array){let t=this.encode(e);return t instanceof Uint8Array?V(this.code,t):t.then(n=>V(this.code,n))}else throw Error("Unknown type, must be binary type")}};function Et(r){return async e=>new Uint8Array(await crypto.subtle.digest(r,e))}var sn=qe({name:"sha2-256",code:18,encode:Et("SHA-256")}),an=qe({name:"sha2-512",code:19,encode:Et("SHA-512")});function It(r,e){let{bytes:t,version:n}=r;switch(n){case 0:return dn(t,Je(r),e??x.encoder);default:return pn(t,Je(r),e??z.encoder)}}var St=new WeakMap;function Je(r){let e=St.get(r);if(e==null){let t=new Map;return St.set(r,t),t}return e}var $=class r{code;version;multihash;bytes;"/";constructor(e,t,n,o){this.code=t,this.version=e,this.multihash=n,this.bytes=o,this["/"]=o}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{let{code:e,multihash:t}=this;if(e!==ne)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==un)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return r.createV0(t)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{let{code:e,digest:t}=this.multihash,n=V(e,t);return r.createV1(this.code,n)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(e){return r.equals(this,e)}static equals(e,t){let n=t;return n!=null&&e.code===n.code&&e.version===n.version&&bt(e.multihash,n.multihash)}toString(e){return It(this,e)}toJSON(){return{"/":It(this)}}link(){return this}[Symbol.toStringTag]="CID";[Symbol.for("nodejs.util.inspect.custom")](){return`CID(${this.toString()})`}static asCID(e){if(e==null)return null;let t=e;if(t instanceof r)return t;if(t["/"]!=null&&t["/"]===t.bytes||t.asCID===t){let{version:n,code:o,multihash:i,bytes:s}=t;return new r(n,o,i,s??Ct(n,o,i.bytes))}else if(t[fn]===!0){let{version:n,multihash:o,code:i}=t,s=pe(o);return r.create(n,i,s)}else return null}static create(e,t,n){if(typeof t!="number")throw new Error("String codecs are no longer supported");if(!(n.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(e){case 0:{if(t!==ne)throw new Error(`Version 0 CID must use dag-pb (code: ${ne}) block encoding`);return new r(e,t,n,n.bytes)}case 1:{let o=Ct(e,t,n.bytes);return new r(e,t,n,o)}default:throw new Error("Invalid version")}}static createV0(e){return r.create(0,ne,e)}static createV1(e,t){return r.create(1,e,t)}static decode(e){let[t,n]=r.decodeFirst(e);if(n.length!==0)throw new Error("Incorrect length");return t}static decodeFirst(e){let t=r.inspectBytes(e),n=t.size-t.multihashSize,o=N(e.subarray(n,n+t.multihashSize));if(o.byteLength!==t.multihashSize)throw new Error("Incorrect length");let i=o.subarray(t.multihashSize-t.digestSize),s=new H(t.multihashCode,t.digestSize,i,o);return[t.version===0?r.createV0(s):r.createV1(t.codec,s),e.subarray(t.size)]}static inspectBytes(e){let t=0,n=()=>{let[A,k]=re(e.subarray(t));return t+=k,A},o=n(),i=ne;if(o===18?(o=0,t=0):i=n(),o!==0&&o!==1)throw new RangeError(`Invalid CID version ${o}`);let s=t,a=n(),u=n(),g=t+u,l=g-s;return{version:o,codec:i,multihashCode:a,digestSize:u,multihashSize:l,size:g}}static parse(e,t){let[n,o]=cn(e,t),i=r.decode(o);if(i.version===0&&e[0]!=="Q")throw Error("Version 0 CID string must not include multibase prefix");return Je(i).set(n,e),i}};function cn(r,e){switch(r[0]){case"Q":{let t=e??x;return[x.prefix,t.decode(`${x.prefix}${r}`)]}case x.prefix:{let t=e??x;return[x.prefix,t.decode(r)]}case z.prefix:{let t=e??z;return[z.prefix,t.decode(r)]}case ee.prefix:{let t=e??ee;return[ee.prefix,t.decode(r)]}default:{if(e==null)throw Error("To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided");return[r[0],e.decode(r)]}}}function dn(r,e,t){let{prefix:n}=t;if(n!==x.prefix)throw Error(`Cannot string encode V0 in ${t.name} encoding`);let o=e.get(n);if(o==null){let i=t.encode(r).slice(1);return e.set(n,i),i}else return o}function pn(r,e,t){let{prefix:n}=t,o=e.get(n);if(o==null){let i=t.encode(r);return e.set(n,i),i}else return o}var ne=112,un=18;function Ct(r,e,t){let n=Q(r),o=n+Q(e),i=new Uint8Array(o+t.byteLength);return W(r,i,0),W(e,i,n),i.set(t,o),i}var fn=Symbol.for("@ipld/js-cid/CID");var oe={...Ve,...ze,...Le,...Fe,...Ne,...De,...Me,...$e,...Be,...ke},zo={...Ge,...je};function Ut(r,e,t,n){return{name:r,prefix:e,encoder:{name:r,prefix:e,encode:t},decoder:{decode:n}}}var Pt=Ut("utf8","u",r=>"u"+new TextDecoder("utf8").decode(r),r=>new TextEncoder().encode(r.substring(1))),Xe=Ut("ascii","a",r=>{let e="a";for(let t=0;t<r.length;t++)e+=String.fromCharCode(r[t]);return e},r=>{r=r.substring(1);let e=G(r.length);for(let t=0;t<r.length;t++)e[t]=r.charCodeAt(t);return e}),ln={utf8:Pt,"utf-8":Pt,hex:oe.base16,latin1:Xe,ascii:Xe,binary:Xe,...oe},ue=ln;function m(r,e="utf8"){let t=ue[e];if(t==null)throw new Error(`Unsupported encoding "${e}"`);return t.encoder.encode(r).substring(1)}var fe=class{index=0;input="";new(e){return this.index=0,this.input=e,this}readAtomically(e){let t=this.index,n=e();return n===void 0&&(this.index=t),n}parseWith(e){let t=e();if(this.index===this.input.length)return t}peekChar(){if(!(this.index>=this.input.length))return this.input[this.index]}readChar(){if(!(this.index>=this.input.length))return this.input[this.index++]}readGivenChar(e){return this.readAtomically(()=>{let t=this.readChar();if(t===e)return t})}readSeparator(e,t,n){return this.readAtomically(()=>{if(!(t>0&&this.readGivenChar(e)===void 0))return n()})}readNumber(e,t,n,o){return this.readAtomically(()=>{let i=0,s=0,a=this.peekChar();if(a===void 0)return;let u=a==="0",g=2**(8*o)-1;for(;;){let l=this.readAtomically(()=>{let A=this.readChar();if(A===void 0)return;let k=Number.parseInt(A,e);if(!Number.isNaN(k))return k});if(l===void 0)break;if(i*=e,i+=l,i>g||(s+=1,t!==void 0&&s>t))return}if(s!==0)return!n&&u&&s>1?void 0:i})}readIPv4Addr(){return this.readAtomically(()=>{let e=new Uint8Array(4);for(let t=0;t<e.length;t++){let n=this.readSeparator(".",t,()=>this.readNumber(10,3,!1,1));if(n===void 0)return;e[t]=n}return e})}readIPv6Addr(){let e=t=>{for(let n=0;n<t.length/2;n++){let o=n*2;if(n<t.length-3){let s=this.readSeparator(":",n,()=>this.readIPv4Addr());if(s!==void 0)return t[o]=s[0],t[o+1]=s[1],t[o+2]=s[2],t[o+3]=s[3],[o+4,!0]}let i=this.readSeparator(":",n,()=>this.readNumber(16,4,!0,2));if(i===void 0)return[o,!1];t[o]=i>>8,t[o+1]=i&255}return[t.length,!1]};return this.readAtomically(()=>{let t=new Uint8Array(16),[n,o]=e(t);if(n===16)return t;if(o||this.readGivenChar(":")===void 0||this.readGivenChar(":")===void 0)return;let i=new Uint8Array(14),s=16-(n+2),[a]=e(i.subarray(0,s));return t.set(i.subarray(0,a),16-a),t})}readIPAddr(){return this.readIPv4Addr()??this.readIPv6Addr()}};var Tt=45,hn=15,Z=new fe;function le(r){if(!(r.length>hn))return Z.new(r).parseWith(()=>Z.readIPv4Addr())}function he(r){if(r.includes("%")&&(r=r.split("%")[0]),!(r.length>Tt))return Z.new(r).parseWith(()=>Z.readIPv6Addr())}function O(r,e=!1){if(r.includes("%")&&(r=r.split("%")[0]),r.length>Tt)return;let t=Z.new(r).parseWith(()=>Z.readIPAddr());if(t)return e&&t.length===4?Uint8Array.from([0,0,0,0,0,0,0,0,0,0,255,255,t[0],t[1],t[2],t[3]]):t}function Ft(r,e,t){let n=0;for(let o of r)if(!(n<e)){if(n>t)break;if(o!==255)return!1;n++}return!0}function Nt(r,e,t,n){let o=0;for(let i of r)if(!(o<t)){if(o>n)break;if(i!==e[o])return!1;o++}return!0}function We(r){switch(r.length){case j:return r.join(".");case R:{let e=[];for(let t=0;t<r.length;t++)t%2===0&&e.push(r[t].toString(16).padStart(2,"0")+r[t+1].toString(16).padStart(2,"0"));return e.join(":")}default:throw new Error("Invalid ip length")}}function zt(r){let e=0;for(let[t,n]of r.entries()){if(n===255){e+=8;continue}for(;n&128;)e++,n=n<<1;if(n&128)return-1;for(let o=t+1;o<r.length;o++)if(r[o]!=0)return-1;break}return e}function kt(r){let e="0x";for(let t of r)e+=(t>>4).toString(16)+(t&15).toString(16);return e}var j=4,R=16,Xo=parseInt("0xFFFF",16),mn=new Uint8Array([0,0,0,0,0,0,0,0,0,0,255,255]);function ie(r,e){e.length===R&&r.length===j&&Ft(e,0,11)&&(e=e.slice(12)),e.length===j&&r.length===R&&Nt(r,mn,0,11)&&(r=r.slice(12));let t=r.length;if(t!=e.length)throw new Error("Failed to mask ip");let n=new Uint8Array(t);for(let o=0;o<t;o++)n[o]=r[o]&e[o];return n}function Dt(r,e){if(typeof e=="string"&&(e=O(e)),e==null)throw new Error("Invalid ip");if(e.length!==r.network.length)return!1;for(let t=0;t<e.length;t++)if((r.network[t]&r.mask[t])!==(e[t]&r.mask[t]))return!1;return!0}function Qe(r){let[e,t]=r.split("/");if(!e||!t)throw new Error("Failed to parse given CIDR: "+r);let n=j,o=le(e);if(o==null&&(n=R,o=he(e),o==null))throw new Error("Failed to parse given CIDR: "+r);let i=parseInt(t,10);if(Number.isNaN(i)||String(i).length!==t.length||i<0||i>n*8)throw new Error("Failed to parse given CIDR: "+r);let s=He(i,8*n);return{network:ie(o,s),mask:s}}function He(r,e){if(e!==8*j&&e!==8*R)throw new Error("Invalid CIDR mask");if(r<0||r>e)throw new Error("Invalid CIDR mask");let t=e/8,n=new Uint8Array(t);for(let o=0;o<t;o++){if(r>=8){n[o]=255,r-=8;continue}n[o]=255-(255>>r),r=0}return n}var Y=class{constructor(e,t){if(t==null)({network:this.network,mask:this.mask}=Qe(e));else{let n=O(e);if(n==null)throw new Error("Failed to parse network");t=String(t);let o=parseInt(t,10);if(Number.isNaN(o)||String(o).length!==t.length||o<0||o>n.length*8){let i=O(t);if(i==null)throw new Error("Failed to parse mask");this.mask=i}else this.mask=He(o,8*n.length);this.network=ie(n,this.mask)}}contains(e){return Dt({network:this.network,mask:this.mask},e)}toString(){let e=zt(this.mask),t=e!==-1?String(e):kt(this.mask);return We(this.network)+"/"+t}};function me(r,e="utf8"){let t=ue[e];if(t==null)throw new Error(`Unsupported encoding "${e}"`);return t.decoder.decode(`${t.prefix}${r}`)}function Mt(r){return!!le(r)}function $t(r){return!!he(r)}function ge(r){return!!O(r)}var Bt=Mt,gn=$t,Ke=function(r){let e=0;if(r=r.toString().trim(),Bt(r)){let t=new Uint8Array(e+4);return r.split(/\./g).forEach(n=>{t[e++]=parseInt(n,10)&255}),t}if(gn(r)){let t=r.split(":",8),n;for(n=0;n<t.length;n++){let i=Bt(t[n]),s;i&&(s=Ke(t[n]),t[n]=m(s.slice(0,2),"base16")),s!=null&&++n<8&&t.splice(n,0,m(s.slice(2,4),"base16"))}if(t[0]==="")for(;t.length<8;)t.unshift("0");else if(t[t.length-1]==="")for(;t.length<8;)t.push("0");else if(t.length<8){for(n=0;n<t.length&&t[n]!=="";n++);let i=[n,1];for(n=9-t.length;n>0;n--)i.push("0");t.splice.apply(t,i)}let o=new Uint8Array(e+16);for(n=0;n<t.length;n++){let i=parseInt(t[n],16);o[e++]=i>>8&255,o[e++]=i&255}return o}throw new Error("invalid ip address")},Lt=function(r,e=0,t){e=~~e,t=t??r.length-e;let n=new DataView(r.buffer);if(t===4){let o=[];for(let i=0;i<t;i++)o.push(r[e+i]);return o.join(".")}if(t===16){let o=[];for(let i=0;i<t;i+=2)o.push(n.getUint16(e+i).toString(16));return o.join(":").replace(/(^|:)0(:0)*:0(:|$)/,"$1::$3").replace(/:{3,4}/,"::")}return""};var _={},Ze={},xn=[[4,32,"ip4"],[6,16,"tcp"],[33,16,"dccp"],[41,128,"ip6"],[42,-1,"ip6zone"],[43,8,"ipcidr"],[53,-1,"dns",!0],[54,-1,"dns4",!0],[55,-1,"dns6",!0],[56,-1,"dnsaddr",!0],[132,16,"sctp"],[273,16,"udp"],[275,0,"p2p-webrtc-star"],[276,0,"p2p-webrtc-direct"],[277,0,"p2p-stardust"],[280,0,"webrtc-direct"],[281,0,"webrtc"],[290,0,"p2p-circuit"],[301,0,"udt"],[302,0,"utp"],[400,-1,"unix",!1,!0],[421,-1,"ipfs"],[421,-1,"p2p"],[443,0,"https"],[444,96,"onion"],[445,296,"onion3"],[446,-1,"garlic64"],[448,0,"tls"],[449,-1,"sni"],[460,0,"quic"],[461,0,"quic-v1"],[465,0,"webtransport"],[466,-1,"certhash"],[477,0,"ws"],[478,0,"wss"],[479,0,"p2p-websocket-star"],[480,0,"http"],[481,-1,"http-path"],[777,-1,"memory"]];xn.forEach(r=>{let e=bn(...r);Ze[e.code]=e,_[e.name]=e});function bn(r,e,t,n,o){return{code:r,size:e,name:t,resolvable:!!n,path:!!o}}function p(r){if(typeof r=="number"){if(Ze[r]!=null)return Ze[r];throw new Error(`no protocol with code: ${r}`)}else if(typeof r=="string"){if(_[r]!=null)return _[r];throw new Error(`no protocol with name: ${r}`)}throw new Error(`invalid protocol id type: ${typeof r}`)}var yn=p("ip4"),vn=p("ip6"),An=p("ipcidr");function tt(r,e){switch(p(r).code){case 4:case 41:return In(e);case 42:return et(e);case 43:return m(e,"base10");case 6:case 273:case 33:case 132:return Rt(e).toString();case 53:case 54:case 55:case 56:case 400:case 449:case 777:return et(e);case 421:return Un(e);case 444:return Ot(e);case 445:return Ot(e);case 466:return Pn(e);case 481:return globalThis.encodeURIComponent(et(e));default:return m(e,"base16")}}function we(r,e){switch(p(r).code){case 4:return Vt(e);case 41:return Vt(e);case 42:return _e(e);case 43:return me(e,"base10");case 6:case 273:case 33:case 132:return rt(parseInt(e,10));case 53:case 54:case 55:case 56:case 400:case 449:case 777:return _e(e);case 421:return Sn(e);case 444:return Tn(e);case 445:return Fn(e);case 466:return Cn(e);case 481:return _e(globalThis.decodeURIComponent(e));default:return me(e,"base16")}}function jt(r){let e,t;if(r.stringTuples().forEach(([n,o])=>{(n===yn.code||n===vn.code)&&(t=o),n===An.code&&(e=o)}),e==null||t==null)throw new Error("Invalid multiaddr");return new Y(t,e)}var Ye=Object.values(oe).map(r=>r.decoder),En=function(){let r=Ye[0].or(Ye[1]);return Ye.slice(2).forEach(e=>r=r.or(e)),r}();function Vt(r){if(!ge(r))throw new Error("invalid ip address");return Ke(r)}function In(r){let e=Lt(r,0,r.length);if(e==null)throw new Error("ipBuff is required");if(!ge(e))throw new Error("invalid ip address");return e}function rt(r){let e=new ArrayBuffer(2);return new DataView(e).setUint16(0,r),new Uint8Array(e)}function Rt(r){return new DataView(r.buffer).getUint16(r.byteOffset)}function _e(r){let e=me(r),t=Uint8Array.from(J(e.length));return F([t,e],t.length+e.length)}function et(r){let e=L(r);if(r=r.slice(U(e)),r.length!==e)throw new Error("inconsistent lengths");return m(r)}function Sn(r){let e;r[0]==="Q"||r[0]==="1"?e=pe(x.decode(`z${r}`)).bytes:e=$.parse(r).multihash.bytes;let t=Uint8Array.from(J(e.length));return F([t,e],t.length+e.length)}function Cn(r){let e=En.decode(r),t=Uint8Array.from(J(e.length));return F([t,e],t.length+e.length)}function Pn(r){let e=L(r),t=r.slice(U(e));if(t.length!==e)throw new Error("inconsistent lengths");return"u"+m(t,"base64url")}function Un(r){let e=L(r),t=r.slice(U(e));if(t.length!==e)throw new Error("inconsistent lengths");return m(t,"base58btc")}function Tn(r){let e=r.split(":");if(e.length!==2)throw new Error(`failed to parse onion addr: ["'${e.join('", "')}'"]' does not contain a port number`);if(e[0].length!==16)throw new Error(`failed to parse onion addr: ${e[0]} not a Tor onion address.`);let t=z.decode("b"+e[0]),n=parseInt(e[1],10);if(n<1||n>65536)throw new Error("Port number is not in range(1, 65536)");let o=rt(n);return F([t,o],t.length+o.length)}function Fn(r){let e=r.split(":");if(e.length!==2)throw new Error(`failed to parse onion addr: ["'${e.join('", "')}'"]' does not contain a port number`);if(e[0].length!==56)throw new Error(`failed to parse onion addr: ${e[0]} not a Tor onion3 address.`);let t=z.decode(`b${e[0]}`),n=parseInt(e[1],10);if(n<1||n>65536)throw new Error("Port number is not in range(1, 65536)");let o=rt(n);return F([t,o],t.length+o.length)}function Ot(r){let e=r.slice(0,r.length-2),t=r.slice(r.length-2),n=m(e,"base32"),o=Rt(t);return`${n}:${o}`}function qt(r){r=nt(r);let e=[],t=[],n=null,o=r.split("/").slice(1);if(o.length===1&&o[0]==="")return{bytes:new Uint8Array,string:"/",tuples:[],stringTuples:[],path:null};for(let i=0;i<o.length;i++){let s=o[i],a=p(s);if(a.size===0){e.push([a.code]),t.push([a.code]);continue}if(i++,i>=o.length)throw new xe("invalid address: "+r);if(a.path===!0){n=nt(o.slice(i).join("/")),e.push([a.code,we(a.code,n)]),t.push([a.code,n]);break}let u=we(a.code,o[i]);e.push([a.code,u]),t.push([a.code,tt(a.code,u)])}return{string:Jt(t),bytes:se(e),tuples:e,stringTuples:t,path:n}}function ot(r){let e=[],t=[],n=null,o=0;for(;o<r.length;){let i=L(r,o),s=U(i),a=p(i),u=Nn(a,r.slice(o+s));if(u===0){e.push([i]),t.push([i]),o+=s;continue}let g=r.slice(o+s,o+s+u);if(o+=u+s,o>r.length)throw new xe("Invalid address Uint8Array: "+m(r,"base16"));e.push([i,g]);let l=tt(i,g);if(t.push([i,l]),a.path===!0){n=l;break}}return{bytes:Uint8Array.from(r),string:Jt(t),tuples:e,stringTuples:t,path:n}}function Gt(r){let e=[];return r.forEach(([t,n])=>{let o=[t];n!=null&&(o[1]=we(t,n)),e.push(o)}),e}function Jt(r){let e=[];return r.map(t=>{let n=p(t[0]);return e.push(n.name),t.length>1&&t[1]!=null&&e.push(t[1]),null}),nt(e.join("/"))}function se(r){return F(r.map(e=>{let t=p(e[0]),n=Uint8Array.from(J(t.code));return e.length>1&&e[1]!=null&&(n=F([n,e[1]])),n}))}function Nn(r,e){if(r.size>0)return r.size/8;if(r.size===0)return 0;{let t=L(e instanceof Uint8Array?e:Uint8Array.from(e));return t+U(t)}}function nt(r){return"/"+r.trim().split("/").filter(e=>e).join("/")}var xe=class extends Error{static name="ParseError";name="ParseError";constructor(e){super(`Error parsing address: ${e}`)}};function Xt(r,e){if(r===e)return!0;if(r.byteLength!==e.byteLength)return!1;for(let t=0;t<r.byteLength;t++)if(r[t]!==e[t])return!1;return!0}var zn=Symbol.for("nodejs.util.inspect.custom"),st=Symbol.for("@multiformats/js-multiaddr/multiaddr"),kn=[p("dns").code,p("dns4").code,p("dns6").code,p("dnsaddr").code],it=class extends Error{constructor(e="No available resolver"){super(e),this.name="NoAvailableResolverError"}},ae=class r{bytes;#t;#e;#r;#n;[st]=!0;constructor(e){e==null&&(e="");let t;if(e instanceof Uint8Array)t=ot(e);else if(typeof e=="string"){if(e.length>0&&e.charAt(0)!=="/")throw new Error(`multiaddr "${e}" must start with a "/"`);t=qt(e)}else if(be(e))t=ot(e.bytes);else throw new Error("addr must be a string, Buffer, or another Multiaddr");this.bytes=t.bytes,this.#t=t.string,this.#e=t.tuples,this.#r=t.stringTuples,this.#n=t.path}toString(){return this.#t}toJSON(){return this.toString()}toOptions(){let e,t,n,o,i="",s=p("tcp"),a=p("udp"),u=p("ip4"),g=p("ip6"),l=p("dns6"),A=p("ip6zone");for(let[y,c]of this.stringTuples())y===A.code&&(i=`%${c??""}`),kn.includes(y)&&(t=s.name==="tcp"?"tcp":"udp",o=443,n=`${c??""}${i}`,e=y===l.code?6:4),(y===s.code||y===a.code)&&(t=p(y).name==="tcp"?"tcp":"udp",o=parseInt(c??"")),(y===u.code||y===g.code)&&(t=p(y).name==="tcp"?"tcp":"udp",n=`${c??""}${i}`,e=y===g.code?6:4);if(e==null||t==null||n==null||o==null)throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}".');return{family:e,host:n,transport:t,port:o}}protos(){return this.#e.map(([e])=>Object.assign({},p(e)))}protoCodes(){return this.#e.map(([e])=>e)}protoNames(){return this.#e.map(([e])=>p(e).name)}tuples(){return this.#e.map(([e,t])=>t==null?[e]:[e,t])}stringTuples(){return this.#r.map(([e,t])=>t==null?[e]:[e,t])}encapsulate(e){return e=new r(e),new r(this.toString()+e.toString())}decapsulate(e){let t=e.toString(),n=this.toString(),o=n.lastIndexOf(t);if(o<0)throw new Error(`Address ${this.toString()} does not contain subaddress: ${e.toString()}`);return new r(n.slice(0,o))}decapsulateCode(e){let t=this.tuples();for(let n=t.length-1;n>=0;n--)if(t[n][0]===e)return new r(se(t.slice(0,n)));return this}getPeerId(){try{let e=[];this.stringTuples().forEach(([n,o])=>{n===_.p2p.code&&e.push([n,o]),n===_["p2p-circuit"].code&&(e=[])});let t=e.pop();if(t?.[1]!=null){let n=t[1];return n[0]==="Q"||n[0]==="1"?m(x.decode(`z${n}`),"base58btc"):m($.parse(n).multihash.bytes,"base58btc")}return null}catch{return null}}getPath(){return this.#n}equals(e){return Xt(this.bytes,e.bytes)}async resolve(e){let t=this.protos().find(i=>i.resolvable);if(t==null)return[this];let n=at.get(t.name);if(n==null)throw new it(`no available resolver for ${t.name}`);return(await n(this,e)).map(i=>q(i))}nodeAddress(){let e=this.toOptions();if(e.transport!=="tcp"&&e.transport!=="udp")throw new Error(`multiaddr must have a valid format - no protocol with name: "${e.transport}". Must have a valid transport protocol: "{tcp, udp}"`);return{family:e.family,address:e.host,port:e.port}}isThinWaistAddress(e){let t=(e??this).protos();return!(t.length!==2||t[0].code!==4&&t[0].code!==41||t[1].code!==6&&t[1].code!==273)}[zn](){return`Multiaddr(${this.#t})`}};var ye=class{multiaddr;netmask;constructor(e){this.multiaddr=q(e),this.netmask=jt(this.multiaddr)}contains(e){if(e==null)return!1;let t=q(e),n;for(let[o,i]of t.stringTuples())if(o===4||o===41){n=i;break}return n===void 0?!1:this.netmask.contains(n)}};var at=new Map;function Dn(r,e){if(r==null)throw new Error("requires node address object");if(e==null)throw new Error("requires transport protocol");let t,n=r.address;switch(r.family){case 4:t="ip4";break;case 6:if(t="ip6",n.includes("%")){let o=n.split("%");if(o.length!==2)throw Error("Multiple ip6 zones in multiaddr");n=o[0],t=`/ip6zone/${o[1]}/ip6`}break;default:throw Error("Invalid addr family, should be 4 or 6.")}return new ae("/"+[t,n,e,r.port].join("/"))}function Wt(r){return q(se(r))}function Mn(r){return Wt(Gt(r))}function $n(r){return be(r)?r.protos().some(e=>e.resolvable):!1}function be(r){return!!r?.[st]}function q(r){return new ae(r)}return Yt(Bn);})();
+"use strict";var MultiformatsMultiaddr=(()=>{var ve=Object.defineProperty;var Qt=Object.getOwnPropertyDescriptor;var Ht=Object.getOwnPropertyNames;var Kt=Object.prototype.hasOwnProperty;var b=(r,e)=>{for(var t in e)ve(r,t,{get:e[t],enumerable:!0})},Zt=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Ht(e))!Kt.call(r,o)&&o!==t&&ve(r,o,{get:()=>e[o],enumerable:!(n=Qt(e,o))||n.enumerable});return r};var Yt=r=>Zt(ve({},"__esModule",{value:!0}),r);var Ln={};b(Ln,{MultiaddrFilter:()=>ye,fromNodeAddress:()=>Dn,fromStringTuples:()=>$n,fromTuples:()=>Wt,isMultiaddr:()=>be,isName:()=>Bn,multiaddr:()=>q,protocols:()=>p,resolvers:()=>at});function G(r=0){return new Uint8Array(r)}var _t=Math.pow(2,7),er=Math.pow(2,14),tr=Math.pow(2,21),Ae=Math.pow(2,28),Ee=Math.pow(2,35),Ie=Math.pow(2,42),Se=Math.pow(2,49),u=128,h=127;function C(r){if(r<_t)return 1;if(r<er)return 2;if(r<tr)return 3;if(r<Ae)return 4;if(r<Ee)return 5;if(r<Ie)return 6;if(r<Se)return 7;if(Number.MAX_SAFE_INTEGER!=null&&r>Number.MAX_SAFE_INTEGER)throw new RangeError("Could not encode varint");return 8}function rr(r,e,t=0){switch(C(r)){case 8:e[t++]=r&255|u,r/=128;case 7:e[t++]=r&255|u,r/=128;case 6:e[t++]=r&255|u,r/=128;case 5:e[t++]=r&255|u,r/=128;case 4:e[t++]=r&255|u,r>>>=7;case 3:e[t++]=r&255|u,r>>>=7;case 2:e[t++]=r&255|u,r>>>=7;case 1:{e[t++]=r&255,r>>>=7;break}default:throw new Error("unreachable")}return e}function nr(r,e,t=0){switch(C(r)){case 8:e.set(t++,r&255|u),r/=128;case 7:e.set(t++,r&255|u),r/=128;case 6:e.set(t++,r&255|u),r/=128;case 5:e.set(t++,r&255|u),r/=128;case 4:e.set(t++,r&255|u),r>>>=7;case 3:e.set(t++,r&255|u),r>>>=7;case 2:e.set(t++,r&255|u),r>>>=7;case 1:{e.set(t++,r&255),r>>>=7;break}default:throw new Error("unreachable")}return e}function or(r,e){let t=r[e],n=0;if(n+=t&h,t<u||(t=r[e+1],n+=(t&h)<<7,t<u)||(t=r[e+2],n+=(t&h)<<14,t<u)||(t=r[e+3],n+=(t&h)<<21,t<u)||(t=r[e+4],n+=(t&h)*Ae,t<u)||(t=r[e+5],n+=(t&h)*Ee,t<u)||(t=r[e+6],n+=(t&h)*Ie,t<u)||(t=r[e+7],n+=(t&h)*Se,t<u))return n;throw new RangeError("Could not decode varint")}function ir(r,e){let t=r.get(e),n=0;if(n+=t&h,t<u||(t=r.get(e+1),n+=(t&h)<<7,t<u)||(t=r.get(e+2),n+=(t&h)<<14,t<u)||(t=r.get(e+3),n+=(t&h)<<21,t<u)||(t=r.get(e+4),n+=(t&h)*Ae,t<u)||(t=r.get(e+5),n+=(t&h)*Ee,t<u)||(t=r.get(e+6),n+=(t&h)*Ie,t<u)||(t=r.get(e+7),n+=(t&h)*Se,t<u))return n;throw new RangeError("Could not decode varint")}function J(r,e,t=0){return e==null&&(e=G(C(r))),e instanceof Uint8Array?rr(r,e,t):nr(r,e,t)}function L(r,e=0){return r instanceof Uint8Array?or(r,e):ir(r,e)}function U(r,e){e==null&&(e=r.reduce((o,i)=>o+i.length,0));let t=G(e),n=0;for(let o of r)t.set(o,n),n+=o.length;return t}var Fe={};b(Fe,{base10:()=>fr});var Wn=new Uint8Array(0);function ut(r,e){if(r===e)return!0;if(r.byteLength!==e.byteLength)return!1;for(let t=0;t<r.byteLength;t++)if(r[t]!==e[t])return!1;return!0}function F(r){if(r instanceof Uint8Array&&r.constructor.name==="Uint8Array")return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Unknown type, must be binary type")}function pt(r){return new TextEncoder().encode(r)}function dt(r){return new TextDecoder().decode(r)}function sr(r,e){if(r.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),n=0;n<t.length;n++)t[n]=255;for(var o=0;o<r.length;o++){var i=r.charAt(o),s=i.charCodeAt(0);if(t[s]!==255)throw new TypeError(i+" is ambiguous");t[s]=o}var a=r.length,d=r.charAt(0),l=Math.log(a)/Math.log(256),g=Math.log(256)/Math.log(a);function M(c){if(c instanceof Uint8Array||(ArrayBuffer.isView(c)?c=new Uint8Array(c.buffer,c.byteOffset,c.byteLength):Array.isArray(c)&&(c=Uint8Array.from(c))),!(c instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(c.length===0)return"";for(var w=0,B=0,A=0,I=c.length;A!==I&&c[A]===0;)A++,w++;for(var S=(I-A)*g+1>>>0,v=new Uint8Array(S);A!==I;){for(var T=c[A],k=0,E=S-1;(T!==0||k<B)&&E!==-1;E--,k++)T+=256*v[E]>>>0,v[E]=T%a>>>0,T=T/a>>>0;if(T!==0)throw new Error("Non-zero carry");B=k,A++}for(var P=S-B;P!==S&&v[P]===0;)P++;for(var ce=d.repeat(w);P<S;++P)ce+=r.charAt(v[P]);return ce}function N(c){if(typeof c!="string")throw new TypeError("Expected String");if(c.length===0)return new Uint8Array;var w=0;if(c[w]!==" "){for(var B=0,A=0;c[w]===d;)B++,w++;for(var I=(c.length-w)*l+1>>>0,S=new Uint8Array(I);c[w];){var v=t[c.charCodeAt(w)];if(v===255)return;for(var T=0,k=I-1;(v!==0||T<A)&&k!==-1;k--,T++)v+=a*S[k]>>>0,S[k]=v%256>>>0,v=v/256>>>0;if(v!==0)throw new Error("Non-zero carry");A=T,w++}if(c[w]!==" "){for(var E=I-A;E!==I&&S[E]===0;)E++;for(var P=new Uint8Array(B+(I-E)),ce=B;E!==I;)P[ce++]=S[E++];return P}}}function y(c){var w=N(c);if(w)return w;throw new Error(`Non-${e} character`)}return{encode:M,decodeUnsafe:N,decode:y}}var ar=sr,cr=ar,lt=cr;var Te=class{name;prefix;baseEncode;constructor(e,t,n){this.name=e,this.prefix=t,this.baseEncode=n}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}},Ce=class{name;prefix;baseDecode;prefixCodePoint;constructor(e,t,n){this.name=e,this.prefix=t;let o=t.codePointAt(0);if(o===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=o,this.baseDecode=n}decode(e){if(typeof e=="string"){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(e){return ht(this,e)}},Pe=class{decoders;constructor(e){this.decoders=e}or(e){return ht(this,e)}decode(e){let t=e[0],n=this.decoders[t];if(n!=null)return n.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}};function ht(r,e){return new Pe({...r.decoders??{[r.prefix]:r},...e.decoders??{[e.prefix]:e}})}var Ue=class{name;prefix;baseEncode;baseDecode;encoder;decoder;constructor(e,t,n,o){this.name=e,this.prefix=t,this.baseEncode=n,this.baseDecode=o,this.encoder=new Te(e,t,n),this.decoder=new Ce(e,t,o)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}};function X({name:r,prefix:e,encode:t,decode:n}){return new Ue(r,e,t,n)}function D({name:r,prefix:e,alphabet:t}){let{encode:n,decode:o}=lt(t,r);return X({prefix:e,name:r,encode:n,decode:i=>F(o(i))})}function ur(r,e,t,n){let o=r.length;for(;r[o-1]==="=";)--o;let i=new Uint8Array(o*t/8|0),s=0,a=0,d=0;for(let l=0;l<o;++l){let g=e[r[l]];if(g===void 0)throw new SyntaxError(`Non-${n} character`);a=a<<t|g,s+=t,s>=8&&(s-=8,i[d++]=255&a>>s)}if(s>=t||(255&a<<8-s)!==0)throw new SyntaxError("Unexpected end of data");return i}function pr(r,e,t){let n=e[e.length-1]==="=",o=(1<<t)-1,i="",s=0,a=0;for(let d=0;d<r.length;++d)for(a=a<<8|r[d],s+=8;s>t;)s-=t,i+=e[o&a>>s];if(s!==0&&(i+=e[o&a<<t-s]),n)for(;(i.length*t&7)!==0;)i+="=";return i}function dr(r){let e={};for(let t=0;t<r.length;++t)e[r[t]]=t;return e}function f({name:r,prefix:e,bitsPerChar:t,alphabet:n}){let o=dr(n);return X({prefix:e,name:r,encode(i){return pr(i,n,t)},decode(i){return ur(i,o,t,r)}})}var fr=D({prefix:"9",name:"base10",alphabet:"0123456789"});var ze={};b(ze,{base16:()=>lr,base16upper:()=>hr});var lr=f({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),hr=f({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var Me={};b(Me,{base2:()=>mr});var mr=f({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var Ne={};b(Ne,{base256emoji:()=>yr});var mt=Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"),gr=mt.reduce((r,e,t)=>(r[t]=e,r),[]),wr=mt.reduce((r,e,t)=>{let n=e.codePointAt(0);if(n==null)throw new Error(`Invalid character: ${e}`);return r[n]=t,r},[]);function xr(r){return r.reduce((e,t)=>(e+=gr[t],e),"")}function br(r){let e=[];for(let t of r){let n=t.codePointAt(0);if(n==null)throw new Error(`Invalid character: ${t}`);let o=wr[n];if(o==null)throw new Error(`Non-base256emoji character: ${t}`);e.push(o)}return new Uint8Array(e)}var yr=X({prefix:"\u{1F680}",name:"base256emoji",encode:xr,decode:br});var ke={};b(ke,{base32:()=>z,base32hex:()=>Ir,base32hexpad:()=>Tr,base32hexpadupper:()=>Cr,base32hexupper:()=>Sr,base32pad:()=>Ar,base32padupper:()=>Er,base32upper:()=>vr,base32z:()=>Pr});var z=f({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),vr=f({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),Ar=f({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),Er=f({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),Ir=f({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),Sr=f({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),Tr=f({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),Cr=f({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),Pr=f({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var De={};b(De,{base36:()=>te,base36upper:()=>Ur});var te=D({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),Ur=D({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var $e={};b($e,{base58btc:()=>x,base58flickr:()=>Fr});var x=D({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),Fr=D({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var Be={};b(Be,{base64:()=>zr,base64pad:()=>Mr,base64url:()=>Nr,base64urlpad:()=>kr});var zr=f({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),Mr=f({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),Nr=f({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),kr=f({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});var Le={};b(Le,{base8:()=>Dr});var Dr=f({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var Ve={};b(Ve,{identity:()=>$r});var $r=X({prefix:"\0",name:"identity",encode:r=>dt(r),decode:r=>pt(r)});var uo=new TextEncoder,po=new TextDecoder;var je={};b(je,{identity:()=>sn});var Vr=xt,gt=128,Or=127,jr=~Or,Rr=Math.pow(2,31);function xt(r,e,t){e=e||[],t=t||0;for(var n=t;r>=Rr;)e[t++]=r&255|gt,r/=128;for(;r&jr;)e[t++]=r&255|gt,r>>>=7;return e[t]=r|0,xt.bytes=t-n+1,e}var qr=Oe,Gr=128,wt=127;function Oe(r,n){var t=0,n=n||0,o=0,i=n,s,a=r.length;do{if(i>=a)throw Oe.bytes=0,new RangeError("Could not decode varint");s=r[i++],t+=o<28?(s&wt)<<o:(s&wt)*Math.pow(2,o),o+=7}while(s>=Gr);return Oe.bytes=i-n,t}var Jr=Math.pow(2,7),Xr=Math.pow(2,14),Wr=Math.pow(2,21),Qr=Math.pow(2,28),Hr=Math.pow(2,35),Kr=Math.pow(2,42),Zr=Math.pow(2,49),Yr=Math.pow(2,56),_r=Math.pow(2,63),en=function(r){return r<Jr?1:r<Xr?2:r<Wr?3:r<Qr?4:r<Hr?5:r<Kr?6:r<Zr?7:r<Yr?8:r<_r?9:10},tn={encode:Vr,decode:qr,encodingLength:en},rn=tn,re=rn;function ne(r,e=0){return[re.decode(r,e),re.decode.bytes]}function W(r,e,t=0){return re.encode(r,e,t),e}function Q(r){return re.encodingLength(r)}function V(r,e){let t=e.byteLength,n=Q(r),o=n+Q(t),i=new Uint8Array(o+t);return W(r,i,0),W(t,i,n),i.set(e,o),new H(r,t,e,i)}function pe(r){let e=F(r),[t,n]=ne(e),[o,i]=ne(e.subarray(n)),s=e.subarray(n+i);if(s.byteLength!==o)throw new Error("Incorrect length");return new H(t,o,s,e)}function bt(r,e){if(r===e)return!0;{let t=e;return r.code===t.code&&r.size===t.size&&t.bytes instanceof Uint8Array&&ut(r.bytes,t.bytes)}}var H=class{code;size;digest;bytes;constructor(e,t,n,o){this.code=e,this.size=t,this.digest=n,this.bytes=o}};var yt=0,nn="identity",vt=F;function on(r){return V(yt,vt(r))}var sn={code:yt,name:nn,encode:vt,digest:on};var Ge={};b(Ge,{sha256:()=>an,sha512:()=>cn});function qe({name:r,code:e,encode:t}){return new Re(r,e,t)}var Re=class{name;code;encode;constructor(e,t,n){this.name=e,this.code=t,this.encode=n}digest(e){if(e instanceof Uint8Array){let t=this.encode(e);return t instanceof Uint8Array?V(this.code,t):t.then(n=>V(this.code,n))}else throw Error("Unknown type, must be binary type")}};function Et(r){return async e=>new Uint8Array(await crypto.subtle.digest(r,e))}var an=qe({name:"sha2-256",code:18,encode:Et("SHA-256")}),cn=qe({name:"sha2-512",code:19,encode:Et("SHA-512")});function It(r,e){let{bytes:t,version:n}=r;switch(n){case 0:return pn(t,Je(r),e??x.encoder);default:return dn(t,Je(r),e??z.encoder)}}var St=new WeakMap;function Je(r){let e=St.get(r);if(e==null){let t=new Map;return St.set(r,t),t}return e}var $=class r{code;version;multihash;bytes;"/";constructor(e,t,n,o){this.code=t,this.version=e,this.multihash=n,this.bytes=o,this["/"]=o}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{let{code:e,multihash:t}=this;if(e!==oe)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==fn)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return r.createV0(t)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{let{code:e,digest:t}=this.multihash,n=V(e,t);return r.createV1(this.code,n)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(e){return r.equals(this,e)}static equals(e,t){let n=t;return n!=null&&e.code===n.code&&e.version===n.version&&bt(e.multihash,n.multihash)}toString(e){return It(this,e)}toJSON(){return{"/":It(this)}}link(){return this}[Symbol.toStringTag]="CID";[Symbol.for("nodejs.util.inspect.custom")](){return`CID(${this.toString()})`}static asCID(e){if(e==null)return null;let t=e;if(t instanceof r)return t;if(t["/"]!=null&&t["/"]===t.bytes||t.asCID===t){let{version:n,code:o,multihash:i,bytes:s}=t;return new r(n,o,i,s??Tt(n,o,i.bytes))}else if(t[ln]===!0){let{version:n,multihash:o,code:i}=t,s=pe(o);return r.create(n,i,s)}else return null}static create(e,t,n){if(typeof t!="number")throw new Error("String codecs are no longer supported");if(!(n.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(e){case 0:{if(t!==oe)throw new Error(`Version 0 CID must use dag-pb (code: ${oe}) block encoding`);return new r(e,t,n,n.bytes)}case 1:{let o=Tt(e,t,n.bytes);return new r(e,t,n,o)}default:throw new Error("Invalid version")}}static createV0(e){return r.create(0,oe,e)}static createV1(e,t){return r.create(1,e,t)}static decode(e){let[t,n]=r.decodeFirst(e);if(n.length!==0)throw new Error("Incorrect length");return t}static decodeFirst(e){let t=r.inspectBytes(e),n=t.size-t.multihashSize,o=F(e.subarray(n,n+t.multihashSize));if(o.byteLength!==t.multihashSize)throw new Error("Incorrect length");let i=o.subarray(t.multihashSize-t.digestSize),s=new H(t.multihashCode,t.digestSize,i,o);return[t.version===0?r.createV0(s):r.createV1(t.codec,s),e.subarray(t.size)]}static inspectBytes(e){let t=0,n=()=>{let[M,N]=ne(e.subarray(t));return t+=N,M},o=n(),i=oe;if(o===18?(o=0,t=0):i=n(),o!==0&&o!==1)throw new RangeError(`Invalid CID version ${o}`);let s=t,a=n(),d=n(),l=t+d,g=l-s;return{version:o,codec:i,multihashCode:a,digestSize:d,multihashSize:g,size:l}}static parse(e,t){let[n,o]=un(e,t),i=r.decode(o);if(i.version===0&&e[0]!=="Q")throw Error("Version 0 CID string must not include multibase prefix");return Je(i).set(n,e),i}};function un(r,e){switch(r[0]){case"Q":{let t=e??x;return[x.prefix,t.decode(`${x.prefix}${r}`)]}case x.prefix:{let t=e??x;return[x.prefix,t.decode(r)]}case z.prefix:{let t=e??z;return[z.prefix,t.decode(r)]}case te.prefix:{let t=e??te;return[te.prefix,t.decode(r)]}default:{if(e==null)throw Error("To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided");return[r[0],e.decode(r)]}}}function pn(r,e,t){let{prefix:n}=t;if(n!==x.prefix)throw Error(`Cannot string encode V0 in ${t.name} encoding`);let o=e.get(n);if(o==null){let i=t.encode(r).slice(1);return e.set(n,i),i}else return o}function dn(r,e,t){let{prefix:n}=t,o=e.get(n);if(o==null){let i=t.encode(r);return e.set(n,i),i}else return o}var oe=112,fn=18;function Tt(r,e,t){let n=Q(r),o=n+Q(e),i=new Uint8Array(o+t.byteLength);return W(r,i,0),W(e,i,n),i.set(t,o),i}var ln=Symbol.for("@ipld/js-cid/CID");var ie={...Ve,...Me,...Le,...Fe,...ze,...ke,...De,...$e,...Be,...Ne},No={...Ge,...je};function Pt(r,e,t,n){return{name:r,prefix:e,encoder:{name:r,prefix:e,encode:t},decoder:{decode:n}}}var Ct=Pt("utf8","u",r=>"u"+new TextDecoder("utf8").decode(r),r=>new TextEncoder().encode(r.substring(1))),Xe=Pt("ascii","a",r=>{let e="a";for(let t=0;t<r.length;t++)e+=String.fromCharCode(r[t]);return e},r=>{r=r.substring(1);let e=G(r.length);for(let t=0;t<r.length;t++)e[t]=r.charCodeAt(t);return e}),hn={utf8:Ct,"utf-8":Ct,hex:ie.base16,latin1:Xe,ascii:Xe,binary:Xe,...ie},de=hn;function m(r,e="utf8"){let t=de[e];if(t==null)throw new Error(`Unsupported encoding "${e}"`);return t.encoder.encode(r).substring(1)}var fe=class{index=0;input="";new(e){return this.index=0,this.input=e,this}readAtomically(e){let t=this.index,n=e();return n===void 0&&(this.index=t),n}parseWith(e){let t=e();if(this.index===this.input.length)return t}peekChar(){if(!(this.index>=this.input.length))return this.input[this.index]}readChar(){if(!(this.index>=this.input.length))return this.input[this.index++]}readGivenChar(e){return this.readAtomically(()=>{let t=this.readChar();if(t===e)return t})}readSeparator(e,t,n){return this.readAtomically(()=>{if(!(t>0&&this.readGivenChar(e)===void 0))return n()})}readNumber(e,t,n,o){return this.readAtomically(()=>{let i=0,s=0,a=this.peekChar();if(a===void 0)return;let d=a==="0",l=2**(8*o)-1;for(;;){let g=this.readAtomically(()=>{let M=this.readChar();if(M===void 0)return;let N=Number.parseInt(M,e);if(!Number.isNaN(N))return N});if(g===void 0)break;if(i*=e,i+=g,i>l||(s+=1,t!==void 0&&s>t))return}if(s!==0)return!n&&d&&s>1?void 0:i})}readIPv4Addr(){return this.readAtomically(()=>{let e=new Uint8Array(4);for(let t=0;t<e.length;t++){let n=this.readSeparator(".",t,()=>this.readNumber(10,3,!1,1));if(n===void 0)return;e[t]=n}return e})}readIPv6Addr(){let e=t=>{for(let n=0;n<t.length/2;n++){let o=n*2;if(n<t.length-3){let s=this.readSeparator(":",n,()=>this.readIPv4Addr());if(s!==void 0)return t[o]=s[0],t[o+1]=s[1],t[o+2]=s[2],t[o+3]=s[3],[o+4,!0]}let i=this.readSeparator(":",n,()=>this.readNumber(16,4,!0,2));if(i===void 0)return[o,!1];t[o]=i>>8,t[o+1]=i&255}return[t.length,!1]};return this.readAtomically(()=>{let t=new Uint8Array(16),[n,o]=e(t);if(n===16)return t;if(o||this.readGivenChar(":")===void 0||this.readGivenChar(":")===void 0)return;let i=new Uint8Array(14),s=16-(n+2),[a]=e(i.subarray(0,s));return t.set(i.subarray(0,a),16-a),t})}readIPAddr(){return this.readIPv4Addr()??this.readIPv6Addr()}};var Ut=45,mn=15,Z=new fe;function le(r){if(!(r.length>mn))return Z.new(r).parseWith(()=>Z.readIPv4Addr())}function he(r){if(r.includes("%")&&(r=r.split("%")[0]),!(r.length>Ut))return Z.new(r).parseWith(()=>Z.readIPv6Addr())}function O(r,e=!1){if(r.includes("%")&&(r=r.split("%")[0]),r.length>Ut)return;let t=Z.new(r).parseWith(()=>Z.readIPAddr());if(t)return e&&t.length===4?Uint8Array.from([0,0,0,0,0,0,0,0,0,0,255,255,t[0],t[1],t[2],t[3]]):t}function Ft(r,e,t){let n=0;for(let o of r)if(!(n<e)){if(n>t)break;if(o!==255)return!1;n++}return!0}function zt(r,e,t,n){let o=0;for(let i of r)if(!(o<t)){if(o>n)break;if(i!==e[o])return!1;o++}return!0}function We(r){switch(r.length){case j:return r.join(".");case R:{let e=[];for(let t=0;t<r.length;t++)t%2===0&&e.push(r[t].toString(16).padStart(2,"0")+r[t+1].toString(16).padStart(2,"0"));return e.join(":")}default:throw new Error("Invalid ip length")}}function Mt(r){let e=0;for(let[t,n]of r.entries()){if(n===255){e+=8;continue}for(;(n&128)!=0;)e++,n=n<<1;if((n&128)!=0)return-1;for(let o=t+1;o<r.length;o++)if(r[o]!=0)return-1;break}return e}function Nt(r){let e="0x";for(let t of r)e+=(t>>4).toString(16)+(t&15).toString(16);return e}var j=4,R=16,Wo=parseInt("0xFFFF",16),gn=new Uint8Array([0,0,0,0,0,0,0,0,0,0,255,255]);function se(r,e){e.length===R&&r.length===j&&Ft(e,0,11)&&(e=e.slice(12)),e.length===j&&r.length===R&&zt(r,gn,0,11)&&(r=r.slice(12));let t=r.length;if(t!=e.length)throw new Error("Failed to mask ip");let n=new Uint8Array(t);for(let o=0;o<t;o++)n[o]=r[o]&e[o];return n}function kt(r,e){if(typeof e=="string"&&(e=O(e)),e==null)throw new Error("Invalid ip");if(e.length!==r.network.length)return!1;for(let t=0;t<e.length;t++)if((r.network[t]&r.mask[t])!==(e[t]&r.mask[t]))return!1;return!0}function Qe(r){let[e,t]=r.split("/");if(!e||!t)throw new Error("Failed to parse given CIDR: "+r);let n=j,o=le(e);if(o==null&&(n=R,o=he(e),o==null))throw new Error("Failed to parse given CIDR: "+r);let i=parseInt(t,10);if(Number.isNaN(i)||String(i).length!==t.length||i<0||i>n*8)throw new Error("Failed to parse given CIDR: "+r);let s=He(i,8*n);return{network:se(o,s),mask:s}}function He(r,e){if(e!==8*j&&e!==8*R)throw new Error("Invalid CIDR mask");if(r<0||r>e)throw new Error("Invalid CIDR mask");let t=e/8,n=new Uint8Array(t);for(let o=0;o<t;o++){if(r>=8){n[o]=255,r-=8;continue}n[o]=255-(255>>r),r=0}return n}var Y=class{constructor(e,t){if(t==null)({network:this.network,mask:this.mask}=Qe(e));else{let n=O(e);if(n==null)throw new Error("Failed to parse network");t=String(t);let o=parseInt(t,10);if(Number.isNaN(o)||String(o).length!==t.length||o<0||o>n.length*8){let i=O(t);if(i==null)throw new Error("Failed to parse mask");this.mask=i}else this.mask=He(o,8*n.length);this.network=se(n,this.mask)}}contains(e){return kt({network:this.network,mask:this.mask},e)}toString(){let e=Mt(this.mask),t=e!==-1?String(e):Nt(this.mask);return We(this.network)+"/"+t}};function me(r,e="utf8"){let t=de[e];if(t==null)throw new Error(`Unsupported encoding "${e}"`);return t.decoder.decode(`${t.prefix}${r}`)}function Dt(r){return!!le(r)}function $t(r){return!!he(r)}function ge(r){return!!O(r)}var Bt=Dt,wn=$t,Ke=function(r){let e=0;if(r=r.toString().trim(),Bt(r)){let t=new Uint8Array(e+4);return r.split(/\./g).forEach(n=>{t[e++]=parseInt(n,10)&255}),t}if(wn(r)){let t=r.split(":",8),n;for(n=0;n<t.length;n++){let i=Bt(t[n]),s;i&&(s=Ke(t[n]),t[n]=m(s.subarray(0,2),"base16")),s!=null&&++n<8&&t.splice(n,0,m(s.subarray(2,4),"base16"))}if(t[0]==="")for(;t.length<8;)t.unshift("0");else if(t[t.length-1]==="")for(;t.length<8;)t.push("0");else if(t.length<8){for(n=0;n<t.length&&t[n]!=="";n++);let i=[n,1];for(n=9-t.length;n>0;n--)i.push("0");t.splice.apply(t,i)}let o=new Uint8Array(e+16);for(n=0;n<t.length;n++){let i=parseInt(t[n],16);o[e++]=i>>8&255,o[e++]=i&255}return o}throw new Error("invalid ip address")},Lt=function(r,e=0,t){e=~~e,t=t??r.length-e;let n=new DataView(r.buffer);if(t===4){let o=[];for(let i=0;i<t;i++)o.push(r[e+i]);return o.join(".")}if(t===16){let o=[];for(let i=0;i<t;i+=2)o.push(n.getUint16(e+i).toString(16));return o.join(":").replace(/(^|:)0(:0)*:0(:|$)/,"$1::$3").replace(/:{3,4}/,"::")}return""};var _={},Ze={},bn=[[4,32,"ip4"],[6,16,"tcp"],[33,16,"dccp"],[41,128,"ip6"],[42,-1,"ip6zone"],[43,8,"ipcidr"],[53,-1,"dns",!0],[54,-1,"dns4",!0],[55,-1,"dns6",!0],[56,-1,"dnsaddr",!0],[132,16,"sctp"],[273,16,"udp"],[275,0,"p2p-webrtc-star"],[276,0,"p2p-webrtc-direct"],[277,0,"p2p-stardust"],[280,0,"webrtc-direct"],[281,0,"webrtc"],[290,0,"p2p-circuit"],[301,0,"udt"],[302,0,"utp"],[400,-1,"unix",!1,!0],[421,-1,"ipfs"],[421,-1,"p2p"],[443,0,"https"],[444,96,"onion"],[445,296,"onion3"],[446,-1,"garlic64"],[448,0,"tls"],[449,-1,"sni"],[460,0,"quic"],[461,0,"quic-v1"],[465,0,"webtransport"],[466,-1,"certhash"],[477,0,"ws"],[478,0,"wss"],[479,0,"p2p-websocket-star"],[480,0,"http"],[481,-1,"http-path"],[777,-1,"memory"]];bn.forEach(r=>{let e=yn(...r);Ze[e.code]=e,_[e.name]=e});function yn(r,e,t,n,o){return{code:r,size:e,name:t,resolvable:!!n,path:!!o}}function p(r){if(typeof r=="number"){if(Ze[r]!=null)return Ze[r];throw new Error(`no protocol with code: ${r}`)}else if(typeof r=="string"){if(_[r]!=null)return _[r];throw new Error(`no protocol with name: ${r}`)}throw new Error(`invalid protocol id type: ${typeof r}`)}var vn=p("ip4"),An=p("ip6"),En=p("ipcidr");function tt(r,e){switch(p(r).code){case 4:case 41:return Sn(e);case 42:return et(e);case 43:return m(e,"base10");case 6:case 273:case 33:case 132:return Rt(e).toString();case 53:case 54:case 55:case 56:case 400:case 449:case 777:return et(e);case 421:return Un(e);case 444:return Ot(e);case 445:return Ot(e);case 466:return Pn(e);case 481:return globalThis.encodeURIComponent(et(e));default:return m(e,"base16")}}function we(r,e){switch(p(r).code){case 4:return Vt(e);case 41:return Vt(e);case 42:return _e(e);case 43:return me(e,"base10");case 6:case 273:case 33:case 132:return rt(parseInt(e,10));case 53:case 54:case 55:case 56:case 400:case 449:case 777:return _e(e);case 421:return Tn(e);case 444:return Fn(e);case 445:return zn(e);case 466:return Cn(e);case 481:return _e(globalThis.decodeURIComponent(e));default:return me(e,"base16")}}function jt(r){let e,t;if(r.stringTuples().forEach(([n,o])=>{(n===vn.code||n===An.code)&&(t=o),n===En.code&&(e=o)}),e==null||t==null)throw new Error("Invalid multiaddr");return new Y(t,e)}var Ye=Object.values(ie).map(r=>r.decoder),In=function(){let r=Ye[0].or(Ye[1]);return Ye.slice(2).forEach(e=>r=r.or(e)),r}();function Vt(r){if(!ge(r))throw new Error("invalid ip address");return Ke(r)}function Sn(r){let e=Lt(r,0,r.length);if(e==null)throw new Error("ipBuff is required");if(!ge(e))throw new Error("invalid ip address");return e}function rt(r){let e=new ArrayBuffer(2);return new DataView(e).setUint16(0,r),new Uint8Array(e)}function Rt(r){return new DataView(r.buffer).getUint16(r.byteOffset)}function _e(r){let e=me(r),t=Uint8Array.from(J(e.length));return U([t,e],t.length+e.length)}function et(r){let e=L(r);if(r=r.subarray(C(e)),r.length!==e)throw new Error("inconsistent lengths");return m(r)}function Tn(r){let e;r[0]==="Q"||r[0]==="1"?e=pe(x.decode(`z${r}`)).bytes:e=$.parse(r).multihash.bytes;let t=Uint8Array.from(J(e.length));return U([t,e],t.length+e.length)}function Cn(r){let e=In.decode(r),t=Uint8Array.from(J(e.length));return U([t,e],t.length+e.length)}function Pn(r){let e=L(r),t=r.subarray(C(e));if(t.length!==e)throw new Error("inconsistent lengths");return"u"+m(t,"base64url")}function Un(r){let e=L(r),t=r.subarray(C(e));if(t.length!==e)throw new Error("inconsistent lengths");return m(t,"base58btc")}function Fn(r){let e=r.split(":");if(e.length!==2)throw new Error(`failed to parse onion addr: ["'${e.join('", "')}'"]' does not contain a port number`);if(e[0].length!==16)throw new Error(`failed to parse onion addr: ${e[0]} not a Tor onion address.`);let t=z.decode("b"+e[0]),n=parseInt(e[1],10);if(n<1||n>65536)throw new Error("Port number is not in range(1, 65536)");let o=rt(n);return U([t,o],t.length+o.length)}function zn(r){let e=r.split(":");if(e.length!==2)throw new Error(`failed to parse onion addr: ["'${e.join('", "')}'"]' does not contain a port number`);if(e[0].length!==56)throw new Error(`failed to parse onion addr: ${e[0]} not a Tor onion3 address.`);let t=z.decode(`b${e[0]}`),n=parseInt(e[1],10);if(n<1||n>65536)throw new Error("Port number is not in range(1, 65536)");let o=rt(n);return U([t,o],t.length+o.length)}function Ot(r){let e=r.subarray(0,r.length-2),t=r.subarray(r.length-2),n=m(e,"base32"),o=Rt(t);return`${n}:${o}`}function nt(r){let e=[],t=[],n=null,o=r.split("/").slice(1);if(o.length===1&&o[0]==="")return{bytes:new Uint8Array,string:"/",tuples:[],stringTuples:[],path:null};for(let i=0;i<o.length;i++){let s=o[i],a=p(s);if(a.size===0){e.push([a.code]),t.push([a.code]);continue}if(i++,i>=o.length)throw new xe("invalid address: "+r);if(a.path===!0){n=Jt(o.slice(i).join("/")),e.push([a.code,we(a.code,n)]),t.push([a.code,n]);break}let d=we(a.code,o[i]);e.push([a.code,d]),t.push([a.code,tt(a.code,d)])}return{string:Gt(t),bytes:ee(e),tuples:e,stringTuples:t,path:n}}function ot(r){let e=[],t=[],n=null,o=0;for(;o<r.length;){let i=L(r,o),s=C(i),a=p(i),d=Mn(a,r.subarray(o+s));if(d===0){e.push([i]),t.push([i]),o+=s;continue}let l=r.slice(o+s,o+s+d);if(o+=d+s,o>r.length)throw new xe("Invalid address Uint8Array: "+m(r,"base16"));e.push([i,l]);let g=tt(i,l);if(t.push([i,g]),a.path===!0){n=g;break}}return{bytes:Uint8Array.from(r),string:Gt(t),tuples:e,stringTuples:t,path:n}}function qt(r){let e=[];return r.forEach(([t,n])=>{let o=[t];n!=null&&(o[1]=we(t,n)),e.push(o)}),e}function Gt(r){let e=[];return r.map(t=>{let n=p(t[0]);return e.push(n.name),t.length>1&&t[1]!=null&&e.push(t[1]),null}),Jt(e.join("/"))}function ee(r){return U(r.map(e=>{let t=p(e[0]),n=Uint8Array.from(J(t.code));return e.length>1&&e[1]!=null&&(n=U([n,e[1]])),n}))}function Mn(r,e){if(r.size>0)return r.size/8;if(r.size===0)return 0;{let t=L(e instanceof Uint8Array?e:Uint8Array.from(e));return t+C(t)}}function Jt(r){return"/"+r.trim().split("/").filter(e=>e).join("/")}var xe=class extends Error{static name="ParseError";name="ParseError";constructor(e){super(`Error parsing address: ${e}`)}};function Xt(r,e){if(r===e)return!0;if(r.byteLength!==e.byteLength)return!1;for(let t=0;t<r.byteLength;t++)if(r[t]!==e[t])return!1;return!0}var Nn=Symbol.for("nodejs.util.inspect.custom"),st=Symbol.for("@multiformats/js-multiaddr/multiaddr"),kn=[p("dns").code,p("dns4").code,p("dns6").code,p("dnsaddr").code],it=class extends Error{constructor(e="No available resolver"){super(e),this.name="NoAvailableResolverError"}},ae=class r{#t;#e;#r;#n;#o;[st]=!0;constructor(e){if((e==null||e==="")&&(e="/"),e instanceof Uint8Array)this.#t=e;else if(typeof e=="string"){if(e.charAt(0)!=="/")throw new Error(`multiaddr "${e}" must start with a "/"`);this.#e=e}else if(be(e))this.#t=e.bytes,this.#e=e.toString(),this.#r=e.tuples(),this.#n=e.stringTuples(),this.#o=e.getPath();else throw new Error("addr must be a string, Buffer, or another Multiaddr")}get bytes(){if(this.#t==null){if(this.#e==null)throw new Error("Multiaddr must be constructed from string, bytes or another Multiaddr");let e=nt(this.#e);this.#t=e.bytes,this.#r=e.tuples,this.#n=e.stringTuples,this.#o=e.path}return this.#t}toString(){if(this.#e==null){if(this.#t==null)throw new Error("Multiaddr must be constructed from string, bytes or another Multiaddr");let e=ot(this.#t);this.#e=e.string,this.#r=e.tuples,this.#n=e.stringTuples,this.#o=e.path}return this.#e===""?"/":this.#e}#s(){let e;if(this.#e!=null)e=nt(this.#e);else if(this.#t!=null)e=ot(this.#t);else throw new Error("Multiaddr must be constructed from string, bytes or another Multiaddr");this.#e=e.string,this.#t=e.bytes,this.#r=e.tuples,this.#n=e.stringTuples,this.#o=e.path}#i(){return this.#r==null&&this.#s(),this.#r??[]}#a(){return this.#n==null&&this.#s(),this.#n??[]}toJSON(){return this.toString()}toOptions(){let e,t,n,o,i="",s=p("tcp"),a=p("udp"),d=p("ip4"),l=p("ip6"),g=p("dns6"),M=p("ip6zone");for(let[y,c]of this.stringTuples())y===M.code&&(i=`%${c??""}`),kn.includes(y)&&(t=s.name==="tcp"?"tcp":"udp",o=443,n=`${c??""}${i}`,e=y===g.code?6:4),(y===s.code||y===a.code)&&(t=p(y).name==="tcp"?"tcp":"udp",o=parseInt(c??"")),(y===d.code||y===l.code)&&(t=p(y).name==="tcp"?"tcp":"udp",n=`${c??""}${i}`,e=y===l.code?6:4);if(e==null||t==null||n==null||o==null)throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}".');return{family:e,host:n,transport:t,port:o}}protos(){return this.#i().map(([e])=>Object.assign({},p(e)))}protoCodes(){return this.#i().map(([e])=>e)}protoNames(){return this.#i().map(([e])=>p(e).name)}tuples(){return this.#i().map(([e,t])=>t==null?[e]:[e,t])}stringTuples(){return this.#a().map(([e,t])=>t==null?[e]:[e,t])}encapsulate(e){return e=new r(e),new r(ee([...this.tuples(),...e.tuples()]))}decapsulate(e){let t=new r(e).toString(),n=this.toString(),o=n.lastIndexOf(t);if(o<0||t==="/"&&n!=="/")throw new Error(`Address ${this.toString()} does not contain subaddress: ${e.toString()}`);return new r(n.slice(0,o))}decapsulateCode(e){let t=this.tuples();for(let n=t.length-1;n>=0;n--)if(t[n][0]===e)return new r(ee(t.slice(0,n)));return this}getPeerId(){try{let e=[];this.stringTuples().forEach(([n,o])=>{n===_.p2p.code&&e.push([n,o]),n===_["p2p-circuit"].code&&(e=[])});let t=e.pop();if(t?.[1]!=null){let n=t[1];return n[0]==="Q"||n[0]==="1"?m(x.decode(`z${n}`),"base58btc"):m($.parse(n).multihash.bytes,"base58btc")}return null}catch{return null}}getPath(){return this.#o===void 0&&this.#s(),this.#o??null}equals(e){return Xt(this.bytes,e.bytes)}async resolve(e){let t=this.protos().find(i=>i.resolvable);if(t==null)return[this];let n=at.get(t.name);if(n==null)throw new it(`no available resolver for ${t.name}`);return(await n(this,e)).map(i=>q(i))}nodeAddress(){let e=this.toOptions();if(e.transport!=="tcp"&&e.transport!=="udp")throw new Error(`multiaddr must have a valid format - no protocol with name: "${e.transport}". Must have a valid transport protocol: "{tcp, udp}"`);return{family:e.family,address:e.host,port:e.port}}isThinWaistAddress(e){let t=(e??this).protos();return!(t.length!==2||t[0].code!==4&&t[0].code!==41||t[1].code!==6&&t[1].code!==273)}[Nn](){return`Multiaddr(${this.toString()})`}};var ye=class{multiaddr;netmask;constructor(e){this.multiaddr=q(e),this.netmask=jt(this.multiaddr)}contains(e){if(e==null)return!1;let t=q(e),n;for(let[o,i]of t.stringTuples())if(o===4||o===41){n=i;break}return n===void 0?!1:this.netmask.contains(n)}};var at=new Map;function Dn(r,e){if(r==null)throw new Error("requires node address object");if(e==null)throw new Error("requires transport protocol");let t,n=r.address;switch(r.family){case 4:t="ip4";break;case 6:if(t="ip6",n.includes("%")){let o=n.split("%");if(o.length!==2)throw Error("Multiple ip6 zones in multiaddr");n=o[0],t=`ip6zone/${o[1]}/ip6`}break;default:throw Error("Invalid addr family, should be 4 or 6.")}return new ae("/"+[t,n,e,r.port].join("/"))}function Wt(r){return q(ee(r))}function $n(r){return Wt(qt(r))}function Bn(r){return be(r)?r.protos().some(e=>e.resolvable):!1}function be(r){return!!r?.[st]}function q(r){return new ae(r)}return Yt(Ln);})();
 return MultiformatsMultiaddr}));
+//# sourceMappingURL=index.min.js.map
diff --git a/node_modules/@multiformats/multiaddr/dist/index.min.js.map b/node_modules/@multiformats/multiaddr/dist/index.min.js.map
new file mode 100644
index 0000000..82506c2
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/index.min.js.map
@@ -0,0 +1,7 @@
+{
+  "version": 3,
+  "sources": ["../src/index.ts", "../node_modules/uint8arrays/src/alloc.ts", "../node_modules/uint8-varint/src/index.ts", "../node_modules/uint8arrays/src/concat.ts", "../node_modules/multiformats/src/bases/base10.ts", "../node_modules/multiformats/src/bytes.ts", "../node_modules/multiformats/src/vendor/base-x.js", "../node_modules/multiformats/src/bases/base.ts", "../node_modules/multiformats/src/bases/base16.ts", "../node_modules/multiformats/src/bases/base2.ts", "../node_modules/multiformats/src/bases/base256emoji.ts", "../node_modules/multiformats/src/bases/base32.ts", "../node_modules/multiformats/src/bases/base36.ts", "../node_modules/multiformats/src/bases/base58.ts", "../node_modules/multiformats/src/bases/base64.ts", "../node_modules/multiformats/src/bases/base8.ts", "../node_modules/multiformats/src/bases/identity.ts", "../node_modules/multiformats/src/codecs/json.ts", "../node_modules/multiformats/src/hashes/identity.ts", "../node_modules/multiformats/src/vendor/varint.js", "../node_modules/multiformats/src/varint.ts", "../node_modules/multiformats/src/hashes/digest.ts", "../node_modules/multiformats/src/hashes/sha2-browser.ts", "../node_modules/multiformats/src/hashes/hasher.ts", "../node_modules/multiformats/src/cid.ts", "../node_modules/multiformats/src/basics.ts", "../node_modules/uint8arrays/src/util/bases.ts", "../node_modules/uint8arrays/src/to-string.ts", "../node_modules/@chainsafe/is-ip/src/parser.ts", "../node_modules/@chainsafe/is-ip/src/parse.ts", "../node_modules/@chainsafe/netmask/src/util.ts", "../node_modules/@chainsafe/netmask/src/ip.ts", "../node_modules/@chainsafe/netmask/src/cidr.ts", "../node_modules/@chainsafe/netmask/src/ipnet.ts", "../node_modules/uint8arrays/src/from-string.ts", "../node_modules/@chainsafe/is-ip/src/is-ip.ts", "../src/ip.ts", "../src/protocols-table.ts", "../src/convert.ts", "../src/codec.ts", "../node_modules/uint8arrays/src/equals.ts", "../src/multiaddr.ts", "../src/filter/multiaddr-filter.ts"],
+  "sourcesContent": ["/**\n * @packageDocumentation\n *\n * A standard way to represent addresses that\n *\n * - support any standard network protocol\n * - are self-describing\n * - have a binary packed format\n * - have a nice string representation\n * - encapsulate well\n *\n * @example\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const addr = multiaddr('/ip4/127.0.0.1/udp/1234')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * addr.bytes\n * // <Uint8Array 04 7f 00 00 01 11 04 d2>\n *\n * addr.toString()\n * // '/ip4/127.0.0.1/udp/1234'\n *\n * addr.protos()\n * // [\n * //   {code: 4, name: 'ip4', size: 32},\n * //   {code: 273, name: 'udp', size: 16}\n * // ]\n *\n * // gives you an object that is friendly with what Node.js core modules expect for addresses\n * addr.nodeAddress()\n * // {\n * //   family: 4,\n * //   port: 1234,\n * //   address: \"127.0.0.1\"\n * // }\n *\n * addr.encapsulate('/sctp/5678')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234/sctp/5678)\n * ```\n *\n * ## Resolving DNSADDR addresses\n *\n * [DNSADDR](https://github.com/multiformats/multiaddr/blob/master/protocols/DNSADDR.md) is a spec that allows storing a TXT DNS record that contains a Multiaddr.\n *\n * To resolve DNSADDR addresses, call the `.resolve()` function the multiaddr, optionally passing a `DNS` resolver.\n *\n * DNSADDR addresses can resolve to multiple multiaddrs, since there is no limit to the number of TXT records that can be stored.\n *\n * @example Resolving DNSADDR Multiaddrs\n *\n * ```TypeScript\n * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n *\n * resolvers.set('dnsaddr', dnsaddrResolver)\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n *\n * // resolve with a 5s timeout\n * const resolved = await ma.resolve({\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * console.info(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n *\n * @example Using a custom DNS resolver to resolve DNSADDR Multiaddrs\n *\n * See the docs for [@multiformats/dns](https://www.npmjs.com/package/@multiformats/dns) for a full breakdown of how to specify multiple resolvers or resolvers that can be used for specific TLDs.\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { dns } from '@multiformats/dns'\n * import { dnsJsonOverHttps } from '@multiformats/dns/resolvers'\n *\n * const resolver = dns({\n *   resolvers: {\n *     '.': dnsJsonOverHttps('https://cloudflare-dns.com/dns-query')\n *   }\n * })\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const resolved = await ma.resolve({\n *  dns: resolver\n * })\n *\n * console.info(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n */\n\nimport { stringTuplesToTuples, tuplesToBytes } from './codec.js'\nimport { Multiaddr as MultiaddrClass, symbol } from './multiaddr.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { Resolver } from './resolvers/index.js'\nimport type { DNS } from '@multiformats/dns'\n\n/**\n * Protocols are present in the protocol table\n */\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\n/**\n * A plain JavaScript object representation of a {@link Multiaddr}\n */\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: 'tcp' | 'udp'\n  port: number\n}\n\n/**\n * A NodeAddress is an IPv4/IPv6 address/TCP port combination\n */\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\n/**\n * These types can be parsed into a {@link Multiaddr} object\n */\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\n/**\n * A code/value pair\n */\nexport type Tuple = [number, Uint8Array?]\n\n/**\n * A code/value pair with the value as a string\n */\nexport type StringTuple = [number, string?]\n\n/**\n * Allows aborting long-lived operations\n */\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map<string, Resolver>()\n\nexport type { Resolver }\n\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js'\n\nexport interface ResolveOptions extends AbortOptions {\n  /**\n   * An optional DNS resolver\n   */\n  dns?: DNS\n\n  /**\n   * When resolving DNSADDR Multiaddrs that resolve to other DNSADDR Multiaddrs,\n   * limit how many times we will recursively resolve them.\n   *\n   * @default 32\n   */\n  maxRecursiveDepth?: number\n}\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString(): string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * JSON.stringify(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON(): string\n\n  /**\n   * Returns Multiaddr as a convenient options object to be used with\n   * `createConnection` from `node:net`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions(): MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of\n   * objects, in left-to-right order. Each object contains the protocol code,\n   * protocol name, and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos(): Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes(): number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames(): string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples(): Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples(): StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate(addr: MultiaddrInput): Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate(addr: Multiaddr | string): Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a specific\n   * code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const addr = multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // Multiaddr(/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC)\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode(code: number): Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string)\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   *\n   * @deprecated A multiaddr can contain multiple PeerIds, use stringTuples() to get the one you want\n   */\n  getPeerId(): string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock)\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   *\n   * @deprecated A multiaddr can contain multiple tuples that could be interpreted as paths, use stringTuples() to get the one you want\n   */\n  getPath(): string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals(addr: { bytes: Uint8Array }): boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n   *\n   * resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)\n   * // ]\n   * ```\n   *\n   * @deprecated If you need to act on `dnsaddr` addresses, do it yourself\n   */\n  resolve(options?: ResolveOptions): Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol\n   * information is left out: in Node (and most network systems) the protocol is\n   * unknowable given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress(): NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   * const mh2 = multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // Multiaddr(/ip4/192.168.2.1/tcp/5001)\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001)\n   * const mh4 = multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a)\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress(addr?: Multiaddr): boolean\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip: string | undefined\n  let host = addr.address\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n\n      if (host.includes('%')) {\n        const parts = host.split('%')\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr')\n        }\n\n        host = parts[0]\n        const zone = parts[1]\n        ip = `ip6zone/${zone}/ip6`\n      }\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new MultiaddrClass('/' + [ip, host, transport, addr.port].join('/'))\n}\n\n/**\n * Create a {@link Multiaddr} from an array of {@link Tuple}s\n *\n * @example\n *\n * ```ts\n * import { fromTuples, multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1')\n * const tuples = ma.tuples()\n *\n * const ma2 = fromTuples(tuples)\n *\n * console.info(ma2)\n * // '/ip4/127.0.0.1'\n * ```\n */\nexport function fromTuples (tuples: Tuple[]): Multiaddr {\n  return multiaddr(tuplesToBytes(tuples))\n}\n\n/**\n * Create a {@link Multiaddr} from an array of {@link StringTuple}s\n *\n * @example\n *\n * ```ts\n * import { fromStringTuples, multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1')\n * const tuples = ma.stringTuples()\n *\n * const ma2 = fromStringTuples(tuples)\n *\n * console.info(ma2)\n * // '/ip4/127.0.0.1'\n * ```\n */\nexport function fromStringTuples (tuples: StringTuple[]): Multiaddr {\n  return fromTuples(stringTuplesToTuples(tuples))\n}\n\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new MultiaddrClass(addr)\n}\n\nexport { getProtocol as protocols }\n", "/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  return new Uint8Array(size)\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  return new Uint8Array(size)\n}\n", "/* eslint-disable no-fallthrough */\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst N1 = Math.pow(2, 7)\nconst N2 = Math.pow(2, 14)\nconst N3 = Math.pow(2, 21)\nconst N4 = Math.pow(2, 28)\nconst N5 = Math.pow(2, 35)\nconst N6 = Math.pow(2, 42)\nconst N7 = Math.pow(2, 49)\n\n/** Most significant bit of a byte */\nconst MSB = 0x80\n/** Rest of the bits in a byte */\nconst REST = 0x7f\n\nexport function encodingLength (value: number): number {\n  if (value < N1) {\n    return 1\n  }\n\n  if (value < N2) {\n    return 2\n  }\n\n  if (value < N3) {\n    return 3\n  }\n\n  if (value < N4) {\n    return 4\n  }\n\n  if (value < N5) {\n    return 5\n  }\n\n  if (value < N6) {\n    return 6\n  }\n\n  if (value < N7) {\n    return 7\n  }\n\n  if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n    throw new RangeError('Could not encode varint')\n  }\n\n  return 8\n}\n\nexport function encodeUint8Array (value: number, buf: Uint8Array, offset: number = 0): Uint8Array {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 7: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 6: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 5: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 4: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 3: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 2: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 1: {\n      buf[offset++] = (value & 0xFF)\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function encodeUint8ArrayList (value: number, buf: Uint8ArrayList, offset: number = 0): Uint8ArrayList {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 7: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 6: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 5: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 4: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 3: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 2: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 1: {\n      buf.set(offset++, (value & 0xFF))\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function decodeUint8Array (buf: Uint8Array, offset: number): number {\n  let b = buf[offset]\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 1]\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 2]\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 3]\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 4]\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 5]\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 6]\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 7]\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function decodeUint8ArrayList (buf: Uint8ArrayList, offset: number): number {\n  let b = buf.get(offset)\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 1)\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 2)\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 3)\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 4)\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 5)\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 6)\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 7)\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function encode (value: number): Uint8Array\nexport function encode (value: number, buf: Uint8Array, offset?: number): Uint8Array\nexport function encode (value: number, buf: Uint8ArrayList, offset?: number): Uint8ArrayList\nexport function encode <T extends Uint8Array | Uint8ArrayList = Uint8Array> (value: number, buf?: T, offset: number = 0): T {\n  if (buf == null) {\n    buf = allocUnsafe(encodingLength(value)) as T\n  }\n  if (buf instanceof Uint8Array) {\n    return encodeUint8Array(value, buf, offset) as T\n  } else {\n    return encodeUint8ArrayList(value, buf, offset) as T\n  }\n}\n\nexport function decode (buf: Uint8ArrayList | Uint8Array, offset: number = 0): number {\n  if (buf instanceof Uint8Array) {\n    return decodeUint8Array(buf, offset)\n  } else {\n    return decodeUint8ArrayList(buf, offset)\n  }\n}\n", "import { allocUnsafe } from '#alloc'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat (arrays: Uint8Array[], length?: number): Uint8Array {\n  if (length == null) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = allocUnsafe(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return asUint8Array(output)\n}\n", "import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n", "import { from } from './base.js'\n\nconst alphabet = Array.from('\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42')\nconst alphabetBytesToChars: string[] = (alphabet.reduce<string[]>((p, c, i) => { p[i] = c; return p }, ([])))\nconst alphabetCharsToBytes: number[] = (alphabet.reduce<number[]>((p, c, i) => {\n  const codePoint = c.codePointAt(0)\n  if (codePoint == null) {\n    throw new Error(`Invalid character: ${c}`)\n  }\n  p[codePoint] = i\n  return p\n}, ([])))\n\nfunction encode (data: Uint8Array): string {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\nfunction decode (str: string): Uint8Array {\n  const byts = []\n  for (const char of str) {\n    const codePoint = char.codePointAt(0)\n    if (codePoint == null) {\n      throw new Error(`Invalid character: ${char}`)\n    }\n    const byt = alphabetCharsToBytes[codePoint]\n    if (byt == null) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '\uD83D\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n", "import { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n", "import type { ArrayBufferView, ByteView } from './interface.js'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\nexport function encode <T> (node: T): ByteView<T> {\n  return textEncoder.encode(JSON.stringify(node))\n}\n\nexport function decode <T> (data: ByteView<T> | ArrayBufferView<T>): T {\n  return JSON.parse(textDecoder.decode(data))\n}\n", "import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code: 0x0 = 0x0\nconst name = 'identity'\n\nconst encode: (input: Uint8Array) => Uint8Array = coerce\n\nfunction digest (input: Uint8Array): Digest.Digest<typeof code, number> {\n  return Digest.create(code, encode(input))\n}\n\nexport const identity = { code, name, encode, digest }\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nexport const hashes = { ...sha2, ...identity }\nexport const codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes }\n", "import { bases } from 'multiformats/basics'\nimport type { MultibaseCodec } from 'multiformats'\nimport { allocUnsafe } from '#alloc'\n\nfunction createCodec (name: string, prefix: string, encode: (buf: Uint8Array) => string, decode: (str: string) => Uint8Array): MultibaseCodec<any> {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = allocUnsafe(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\nexport type SupportedEncodings = 'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof typeof bases\n\nconst BASES: Record<SupportedEncodings, MultibaseCodec<any>> = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii,\n  binary: ascii,\n\n  ...bases\n}\n\nexport default BASES\n", "import bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString (array: Uint8Array, encoding: SupportedEncodings = 'utf8'): string {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n// Heavily inspired by https://doc.rust-lang.org/src/std/net/parser.rs.html\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Fn = (...foo: any) => any;\n\nexport class Parser {\n  private index = 0;\n  private input = \"\";\n\n  new(input: string): this {\n    this.index = 0;\n    this.input = input;\n    return this;\n  }\n\n  /** Run a parser, and restore the pre-parse state if it fails. */\n  readAtomically<T extends Fn>(fn: T): ReturnType<T> {\n    const index = this.index;\n    const result = fn();\n    if (result === undefined) {\n      this.index = index;\n    }\n    return result;\n  }\n\n  /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */\n  parseWith<T extends Fn>(fn: T): ReturnType<T> | undefined {\n    const result = fn();\n    if (this.index !== this.input.length) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /** Peek the next character from the input */\n  peekChar(): string | undefined {\n    if (this.index >= this.input.length) {\n      return undefined;\n    }\n    return this.input[this.index];\n  }\n\n  /** Read the next character from the input */\n  readChar(): string | undefined {\n    if (this.index >= this.input.length) {\n      return undefined;\n    }\n    return this.input[this.index++];\n  }\n\n  /** Read the next character from the input if it matches the target. */\n  readGivenChar(target: string): string | undefined {\n    return this.readAtomically(() => {\n      const char = this.readChar();\n      if (char !== target) {\n        return undefined;\n      }\n      return char;\n    });\n  }\n\n  /**\n   * Helper for reading separators in an indexed loop. Reads the separator\n   * character iff index > 0, then runs the parser. When used in a loop,\n   * the separator character will only be read on index > 0 (see\n   * readIPv4Addr for an example)\n   */\n  readSeparator<T extends Fn>(sep: string, index: number, inner: T): ReturnType<T> {\n    return this.readAtomically(() => {\n      if (index > 0) {\n        if (this.readGivenChar(sep) === undefined) {\n          return undefined;\n        }\n      }\n      return inner();\n    });\n  }\n\n  /**\n   * Read a number off the front of the input in the given radix, stopping\n   * at the first non-digit character or eof. Fails if the number has more\n   * digits than max_digits or if there is no number.\n   */\n  readNumber(\n    radix: number,\n    maxDigits: number | undefined,\n    allowZeroPrefix: boolean,\n    maxBytes: number\n  ): number | undefined {\n    return this.readAtomically(() => {\n      let result = 0;\n      let digitCount = 0;\n\n      const leadingChar = this.peekChar();\n      if (leadingChar === undefined) {\n        return undefined;\n      }\n      const hasLeadingZero = leadingChar === \"0\";\n      const maxValue = 2 ** (8 * maxBytes) - 1;\n\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const digit = this.readAtomically(() => {\n          const char = this.readChar();\n          if (char === undefined) {\n            return undefined;\n          }\n          const num = Number.parseInt(char, radix);\n          if (Number.isNaN(num)) {\n            return undefined;\n          }\n          return num;\n        });\n        if (digit === undefined) {\n          break;\n        }\n        result *= radix;\n        result += digit;\n        if (result > maxValue) {\n          return undefined;\n        }\n        digitCount += 1;\n        if (maxDigits !== undefined) {\n          if (digitCount > maxDigits) {\n            return undefined;\n          }\n        }\n      }\n\n      if (digitCount === 0) {\n        return undefined;\n      } else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n        return undefined;\n      } else {\n        return result;\n      }\n    });\n  }\n\n  /** Read an IPv4 address. */\n  readIPv4Addr(): Uint8Array | undefined {\n    return this.readAtomically(() => {\n      const out = new Uint8Array(4);\n\n      for (let i = 0; i < out.length; i++) {\n        const ix = this.readSeparator(\".\", i, () => this.readNumber(10, 3, false, 1));\n        if (ix === undefined) {\n          return undefined;\n        }\n        out[i] = ix;\n      }\n\n      return out;\n    });\n  }\n\n  /** Read an IPv6 Address. */\n  readIPv6Addr(): Uint8Array | undefined {\n    /**\n     * Read a chunk of an IPv6 address into `groups`. Returns the number\n     * of groups read, along with a bool indicating if an embedded\n     * trailing IPv4 address was read. Specifically, read a series of\n     * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n     * trailing embedded IPv4 address.\n     */\n    const readGroups = (groups: Uint8Array): [number, boolean] => {\n      for (let i = 0; i < groups.length / 2; i++) {\n        const ix = i * 2;\n        // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n        if (i < groups.length - 3) {\n          const ipv4 = this.readSeparator(\":\", i, () => this.readIPv4Addr());\n          if (ipv4 !== undefined) {\n            groups[ix] = ipv4[0];\n            groups[ix + 1] = ipv4[1];\n            groups[ix + 2] = ipv4[2];\n            groups[ix + 3] = ipv4[3];\n\n            return [ix + 4, true];\n          }\n        }\n\n        const group = this.readSeparator(\":\", i, () => this.readNumber(16, 4, true, 2));\n        if (group === undefined) {\n          return [ix, false];\n        }\n        groups[ix] = group >> 8;\n        groups[ix + 1] = group & 255;\n      }\n      return [groups.length, false];\n    };\n\n    return this.readAtomically(() => {\n      // Read the front part of the address; either the whole thing, or up to the first ::\n      const head = new Uint8Array(16);\n      const [headSize, headIp4] = readGroups(head);\n\n      if (headSize === 16) {\n        return head;\n      }\n\n      // IPv4 part is not allowed before `::`\n      if (headIp4) {\n        return undefined;\n      }\n\n      // Read `::` if previous code parsed less than 8 groups.\n      // `::` indicates one or more groups of 16 bits of zeros.\n      if (this.readGivenChar(\":\") === undefined) {\n        return undefined;\n      }\n      if (this.readGivenChar(\":\") === undefined) {\n        return undefined;\n      }\n\n      // Read the back part of the address. The :: must contain at least one\n      // set of zeroes, so our max length is 7.\n      const tail = new Uint8Array(14);\n      const limit = 16 - (headSize + 2);\n      const [tailSize] = readGroups(tail.subarray(0, limit));\n\n      // Concat the head and tail of the IP address\n      head.set(tail.subarray(0, tailSize), 16 - tailSize);\n\n      return head;\n    });\n  }\n\n  /** Read an IP Address, either IPv4 or IPv6. */\n  readIPAddr(): Uint8Array | undefined {\n    return this.readIPv4Addr() ?? this.readIPv6Addr();\n  }\n}\n", "import { Parser } from \"./parser.js\";\n\n// See https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address\nconst MAX_IPV6_LENGTH = 45;\nconst MAX_IPV4_LENGTH = 15;\n\nconst parser = new Parser();\n\n/** Parse `input` into IPv4 bytes. */\nexport function parseIPv4(input: string): Uint8Array | undefined {\n  if (input.length > MAX_IPV4_LENGTH) {\n    return undefined;\n  }\n  return parser.new(input).parseWith(() => parser.readIPv4Addr());\n}\n\n/** Parse IPv4 `input` into IPv6 with IPv4-mapped bytes, eg ::ffff:1.2.3.4 */\nexport function parseIPv4Mapped(input: string): Uint8Array | undefined {\n  if (input.length > MAX_IPV4_LENGTH) {\n    return undefined;\n  }\n\n  const ipv4 = parser.new(input).parseWith(() => parser.readIPv4Addr());\n  if (ipv4 === undefined) {\n    return undefined;\n  }\n\n  return Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, ipv4[0], ipv4[1], ipv4[2], ipv4[3]]);\n}\n\n/** Parse `input` into IPv6 bytes. */\nexport function parseIPv6(input: string): Uint8Array | undefined {\n  // strip zone index if it is present\n  if (input.includes(\"%\")) {\n    input = input.split(\"%\")[0];\n  }\n  if (input.length > MAX_IPV6_LENGTH) {\n    return undefined;\n  }\n  return parser.new(input).parseWith(() => parser.readIPv6Addr());\n}\n\n/** Parse `input` into IPv4 or IPv6 bytes. */\nexport function parseIP(input: string, mapIPv4ToIPv6 = false): Uint8Array | undefined {\n  // strip zone index if it is present\n  if (input.includes(\"%\")) {\n    input = input.split(\"%\")[0];\n  }\n\n  if (input.length > MAX_IPV6_LENGTH) {\n    return undefined;\n  }\n\n  const addr = parser.new(input).parseWith(() => parser.readIPAddr());\n  if (!addr) {\n    return undefined;\n  }\n\n  if (mapIPv4ToIPv6 && addr.length === 4) {\n    return Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, addr[0], addr[1], addr[2], addr[3]]);\n  }\n\n  return addr;\n}\n", "import { IPv4Len, IPv6Len } from \"./ip.js\";\n\nexport function allFF(\n  a: number[] | Uint8Array,\n  from: number,\n  to: number\n): boolean {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== 0xff) return false;\n    i++;\n  }\n  return true;\n}\n\nexport function deepEqual(\n  a: Uint8Array | number[],\n  b: Uint8Array,\n  from: number,\n  to: number\n): boolean {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== b[i]) return false;\n    i++;\n  }\n  return true;\n}\n\n/***\n * Returns long ip format\n */\nexport function ipToString(ip: Uint8Array | number[]): string {\n  switch (ip.length) {\n    case IPv4Len: {\n      return ip.join(\".\");\n    }\n    case IPv6Len: {\n      const result = [] as string[];\n      for (let i = 0; i < ip.length; i++) {\n        if (i % 2 === 0) {\n          result.push(\n            ip[i].toString(16).padStart(2, \"0\") +\n              ip[i + 1].toString(16).padStart(2, \"0\")\n          );\n        }\n      }\n      return result.join(\":\");\n    }\n    default: {\n      throw new Error(\"Invalid ip length\");\n    }\n  }\n}\n\n/**\n * If mask is a sequence of 1 bits followed by 0 bits, return number of 1 bits else -1\n */\nexport function simpleMaskLength(mask: Uint8Array): number {\n  let ones = 0;\n  // eslint-disable-next-line prefer-const\n  for (let [index, byte] of mask.entries()) {\n    if (byte === 0xff) {\n      ones += 8;\n      continue;\n    }\n    while ((byte & 0x80) != 0) {\n      ones++;\n      byte = byte << 1;\n    }\n    if ((byte & 0x80) != 0) {\n      return -1;\n    }\n    for (let i = index + 1; i < mask.length; i++) {\n      if (mask[i] != 0) {\n        return -1;\n      }\n    }\n    break;\n  }\n  return ones;\n}\n\nexport function maskToHex(mask: Uint8Array): string {\n  let hex = \"0x\";\n  for (const byte of mask) {\n    hex += (byte >> 4).toString(16) + (byte & 0x0f).toString(16);\n  }\n  return hex;\n}\n", "import { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { allFF, deepEqual } from \"./util.js\";\n\nexport const IPv4Len = 4;\nexport const IPv6Len = 16;\n\nexport const maxIPv6Octet = parseInt(\"0xFFFF\", 16);\nexport const ipv4Prefix = new Uint8Array([\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,\n]);\n\nexport interface IpNetRaw {\n  network: Uint8Array;\n  mask: Uint8Array;\n}\n\nexport function maskIp(ip: Uint8Array, mask: Uint8Array): Uint8Array {\n  if (mask.length === IPv6Len && ip.length === IPv4Len && allFF(mask, 0, 11)) {\n    mask = mask.slice(12);\n  }\n  if (\n    mask.length === IPv4Len &&\n    ip.length === IPv6Len &&\n    deepEqual(ip, ipv4Prefix, 0, 11)\n  ) {\n    ip = ip.slice(12);\n  }\n  const n = ip.length;\n  if (n != mask.length) {\n    throw new Error(\"Failed to mask ip\");\n  }\n  const out = new Uint8Array(n);\n  for (let i = 0; i < n; i++) {\n    out[i] = ip[i] & mask[i];\n  }\n  return out;\n}\n\nexport function containsIp(\n  net: IpNetRaw,\n  ip: Uint8Array | number[] | string\n): boolean {\n  if (typeof ip === \"string\") {\n    ip = parseIP(ip)!;\n  }\n  if (ip == null) throw new Error(\"Invalid ip\");\n  if (ip.length !== net.network.length) {\n    return false;\n  }\n  for (let i = 0; i < ip.length; i++) {\n    if ((net.network[i] & net.mask[i]) !== (ip[i] & net.mask[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function iPv4FromIPv6(ip: Uint8Array): Uint8Array {\n  if (!isIPv4mappedIPv6(ip)) {\n    throw new Error(\"Must have 0xffff prefix\");\n  }\n  return ip.slice(12);\n}\n\nexport function isIPv4mappedIPv6(ip: Uint8Array | number[]): boolean {\n  return deepEqual(ip, ipv4Prefix, 0, 11);\n}\n", "import { parseIPv4, parseIPv6 } from \"@chainsafe/is-ip/parse\";\nimport { IPv4Len, IPv6Len, maskIp } from \"./ip.js\";\n\nexport function parseCidr(s: string): {\n  network: Uint8Array;\n  mask: Uint8Array;\n} {\n  const [address, maskString] = s.split(\"/\");\n  if (!address || !maskString)\n    throw new Error(\"Failed to parse given CIDR: \" + s);\n  let ipLength = IPv4Len;\n  let ip = parseIPv4(address);\n  if (ip == null) {\n    ipLength = IPv6Len;\n    ip = parseIPv6(address);\n    if (ip == null) throw new Error(\"Failed to parse given CIDR: \" + s);\n  }\n  const m = parseInt(maskString, 10);\n  if (\n    Number.isNaN(m) ||\n    String(m).length !== maskString.length ||\n    m < 0 ||\n    m > ipLength * 8\n  ) {\n    throw new Error(\"Failed to parse given CIDR: \" + s);\n  }\n  const mask = cidrMask(m, 8 * ipLength);\n  return {\n    network: maskIp(ip, mask),\n    mask,\n  };\n}\n\nexport function cidrMask(ones: number, bits: number): Uint8Array {\n  if (bits !== 8 * IPv4Len && bits !== 8 * IPv6Len)\n    throw new Error(\"Invalid CIDR mask\");\n  if (ones < 0 || ones > bits) throw new Error(\"Invalid CIDR mask\");\n  const l = bits / 8;\n  const m = new Uint8Array(l);\n  for (let i = 0; i < l; i++) {\n    if (ones >= 8) {\n      m[i] = 0xff;\n      ones -= 8;\n      continue;\n    }\n    m[i] = 255 - (0xff >> ones);\n    ones = 0;\n  }\n  return m;\n}\n", "import { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { cidrMask, parseCidr } from \"./cidr.js\";\nimport { containsIp, maskIp } from \"./ip.js\";\nimport { ipToString, maskToHex, simpleMaskLength } from \"./util.js\";\n\nexport class IpNet {\n  public readonly network: Uint8Array;\n  public readonly mask: Uint8Array;\n\n  /**\n   *\n   * @param ipOrCidr either network ip or full cidr address\n   * @param mask in case ipOrCidr is network this can be either mask in decimal format or as ip address\n   */\n  constructor(ipOrCidr: string, mask?: string | number) {\n    if (mask == null) {\n      ({ network: this.network, mask: this.mask } = parseCidr(ipOrCidr));\n    } else {\n      const ipResult = parseIP(ipOrCidr);\n      if (ipResult == null) {\n        throw new Error(\"Failed to parse network\");\n      }\n      mask = String(mask);\n      const m = parseInt(mask, 10);\n      if (\n        Number.isNaN(m) ||\n        String(m).length !== mask.length ||\n        m < 0 ||\n        m > ipResult.length * 8\n      ) {\n        const maskResult = parseIP(mask);\n        if (maskResult == null) {\n          throw new Error(\"Failed to parse mask\");\n        }\n        this.mask = maskResult;\n      } else {\n        this.mask = cidrMask(m, 8 * ipResult.length);\n      }\n      this.network = maskIp(ipResult, this.mask);\n    }\n  }\n\n  /**\n   * Checks if netmask contains ip address\n   * @param ip\n   * @returns\n   */\n  contains(ip: Uint8Array | number[] | string): boolean {\n    return containsIp({ network: this.network, mask: this.mask }, ip);\n  }\n\n  /**Serializes back to string format */\n  toString(): string {\n    const l = simpleMaskLength(this.mask);\n    const mask = l !== -1 ? String(l) : maskToHex(this.mask);\n    return ipToString(this.network) + \"/\" + mask;\n  }\n}\n", "import bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString (string: string, encoding: SupportedEncodings = 'utf8'): Uint8Array {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n", "import { parseIP, parseIPv4, parseIPv6 } from \"./parse.js\";\n\n/** Check if `input` is IPv4. */\nexport function isIPv4(input: string): boolean {\n  return Boolean(parseIPv4(input));\n}\n\n/** Check if `input` is IPv6. */\nexport function isIPv6(input: string): boolean {\n  return Boolean(parseIPv6(input));\n}\n\n/** Check if `input` is IPv4 or IPv6. */\nexport function isIP(input: string): boolean {\n  return Boolean(parseIP(input));\n}\n\n/**\n * @returns `6` if `input` is IPv6, `4` if `input` is IPv4, or `undefined` if `input` is neither.\n */\nexport function ipVersion(input: string): 4 | 6 | undefined {\n  if (isIPv4(input)) {\n    return 4;\n  } else if (isIPv6(input)) {\n    return 6;\n  } else {\n    return undefined;\n  }\n}\n", "import { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from '@chainsafe/is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  ip = ip.toString().trim()\n\n  if (isV4(ip)) {\n    const bytes = new Uint8Array(offset + 4)\n\n    ip.split(/\\./g).forEach((byte) => {\n      bytes[offset++] = parseInt(byte, 10) & 0xff\n    })\n\n    return bytes\n  }\n\n  if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.subarray(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.subarray(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) { sections.unshift('0') }\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) { sections.push('0') }\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++) { }\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    const bytes = new Uint8Array(offset + 16)\n\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      bytes[offset++] = (word >> 8) & 0xff\n      bytes[offset++] = word & 0xff\n    }\n\n    return bytes\n  }\n\n  throw new Error('invalid ip address')\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number = 0, length?: number): string {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const view = new DataView(buf.buffer)\n\n  if (length === 4) {\n    const result = []\n\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n\n    return result.join('.')\n  }\n\n  if (length === 16) {\n    const result = []\n\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n\n    return result.join(':')\n      .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n      .replace(/:{3,4}/, '::')\n  }\n\n  return ''\n}\n", "import type { Protocol } from './index.js'\n\nconst V = -1\nexport const names: Record<string, Protocol> = {}\nexport const codes: Record<number, Protocol> = {}\n\nexport const table: Array<[number, number, string, boolean?, boolean?]> = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [43, 8, 'ipcidr'],\n  [53, V, 'dns', true],\n  [54, V, 'dns4', true],\n  [55, V, 'dns6', true],\n  [56, V, 'dnsaddr', true],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [280, 0, 'webrtc-direct'],\n  [281, 0, 'webrtc'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, true],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [448, 0, 'tls'],\n  [449, V, 'sni'],\n  [460, 0, 'quic'],\n  [461, 0, 'quic-v1'],\n  [465, 0, 'webtransport'],\n  [466, V, 'certhash'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [481, V, 'http-path'],\n  [777, V, 'memory']\n]\n\n// populate tables\ntable.forEach(row => {\n  const proto = createProtocol(...row)\n  codes[proto.code] = proto\n  names[proto.name] = proto\n})\n\nexport function createProtocol (code: number, size: number, name: string, resolvable?: any, path?: any): Protocol {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol (proto: number | string): Protocol {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto]\n    }\n\n    throw new Error(`no protocol with code: ${proto}`)\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto]\n    }\n\n    throw new Error(`no protocol with name: ${proto}`)\n  }\n\n  throw new Error(`invalid protocol id type: ${typeof proto}`)\n}\n", "import { IpNet } from '@chainsafe/netmask'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { bases } from 'multiformats/basics'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport * as varint from 'uint8-varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as ip from './ip.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { Multiaddr } from './index.js'\n\nconst ip4Protocol = getProtocol('ip4')\nconst ip6Protocol = getProtocol('ip6')\nconst ipcidrProtocol = getProtocol('ipcidr')\n\n/**\n * converts (serializes) addresses\n */\nexport function convert (proto: string, a: string): Uint8Array\nexport function convert (proto: string, a: Uint8Array): string\nexport function convert (proto: string, a: string | Uint8Array): Uint8Array | string {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a)\n  } else {\n    return convertToBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n */\n// eslint-disable-next-line complexity\nexport function convertToString (proto: number | string, buf: Uint8Array): string {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n    case 42: // ipv6zone\n      return bytes2str(buf)\n    case 43: // ipcidr\n      return uint8ArrayToString(buf, 'base10')\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    case 466: // certhash\n      return bytes2mb(buf)\n    case 481: // http-path\n      return globalThis.encodeURIComponent(bytes2str(buf))\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\n// eslint-disable-next-line complexity\nexport function convertToBytes (proto: string | number, str: string): Uint8Array {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n    case 42: // ipv6zone\n      return str2bytes(str)\n    case 43: // ipcidr\n      return uint8ArrayFromString(str, 'base10')\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    case 466: // certhash\n      return mb2bytes(str)\n    case 481: // http-path\n      return str2bytes(globalThis.decodeURIComponent(str))\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\nexport function convertToIpNet (multiaddr: Multiaddr): IpNet {\n  let mask: string | undefined\n  let addr: string | undefined\n  multiaddr.stringTuples().forEach(([code, value]) => {\n    if (code === ip4Protocol.code || code === ip6Protocol.code) {\n      addr = value\n    }\n    if (code === ipcidrProtocol.code) {\n      mask = value\n    }\n  })\n  if (mask == null || addr == null) {\n    throw new Error('Invalid multiaddr')\n  }\n  return new IpNet(addr, mask)\n}\n\nconst decoders = Object.values(bases).map((c) => c.decoder)\nconst anybaseDecoder = (function () {\n  let acc = decoders[0].or(decoders[1])\n  decoders.slice(2).forEach((d) => (acc = acc.or(d)))\n  return acc\n})()\n\nfunction ip2bytes (ipString: string): Uint8Array {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\nfunction bytes2ip (ipBuff: Uint8Array): string {\n  const ipString = ip.toString(ipBuff, 0, ipBuff.length)\n  if (ipString == null) {\n    throw new Error('ipBuff is required')\n  }\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2bytes (port: number): Uint8Array {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\nfunction bytes2port (buf: Uint8Array): number {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\nfunction str2bytes (str: string): Uint8Array {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\nfunction bytes2str (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  buf = buf.subarray(varint.encodingLength(size))\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\nfunction mh2bytes (hash: string): Uint8Array {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\nfunction mb2bytes (mbstr: string): Uint8Array {\n  const mb = anybaseDecoder.decode(mbstr)\n  const size = Uint8Array.from(varint.encode(mb.length))\n  return uint8ArrayConcat([size, mb], size.length + mb.length)\n}\nfunction bytes2mb (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const hash = buf.subarray(varint.encodingLength(size))\n\n  if (hash.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return 'u' + uint8ArrayToString(hash, 'base64url')\n}\n\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const address = buf.subarray(varint.encodingLength(size))\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\nfunction onion2bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 16) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`)\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction onion32bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 56) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`)\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode(`b${addr[0]}`)\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction bytes2onion (buf: Uint8Array): string {\n  const addrBytes = buf.subarray(0, buf.length - 2)\n  const portBytes = buf.subarray(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return `${addr}:${port}`\n}\n", "import * as varint from 'uint8-varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { StringTuple, Tuple, Protocol } from './index.js'\n\nexport interface MultiaddrParts {\n  bytes: Uint8Array\n  string: string\n  tuples: Tuple[]\n  stringTuples: StringTuple[]\n  path: string | null\n}\n\nexport function stringToTuples (str: string): Tuple[] {\n  const tuples: Tuple[] = []\n  const parts = str.split('/').slice(1)\n\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([proto.code])\n\n      continue\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      const path = cleanPath(parts.slice(p).join('/'))\n      tuples.push([proto.code, convertToBytes(proto.code, path)])\n      break\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw new ParseError('invalid address: ' + str)\n    }\n\n    const bytes = convertToBytes(proto.code, parts[p])\n    tuples.push([proto.code, bytes])\n  }\n\n  return tuples\n}\n\nexport function stringToStringTuples(str: string): StringTuple[] {\n  const stringTuples: StringTuple[] = []\n  const parts = str.split('/').slice(1)\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      stringTuples.push([proto.code])\n\n      continue\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      const path = cleanPath(parts.slice(p).join('/'))\n      stringTuples.push([proto.code, path])\n      break\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw new ParseError('invalid address: ' + str)\n    }\n\n    stringTuples.push([proto.code, parts[p]])\n  }\n\n  return stringTuples\n}\n\nexport function stringToMultiaddrParts (str: string): MultiaddrParts {\n  const tuples: Tuple[] = []\n  const stringTuples: StringTuple[] = []\n  let path: string | null = null\n\n  const parts = str.split('/').slice(1)\n\n  if (parts.length === 1 && parts[0] === '') {\n    return {\n      bytes: new Uint8Array(),\n      string: '/',\n      tuples: [],\n      stringTuples: [],\n      path: null\n    }\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([proto.code])\n      stringTuples.push([proto.code])\n\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw new ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = cleanPath(parts.slice(p).join('/'))\n      tuples.push([proto.code, convertToBytes(proto.code, path)])\n      stringTuples.push([proto.code, path])\n      break\n    }\n\n    const bytes = convertToBytes(proto.code, parts[p])\n    tuples.push([proto.code, bytes])\n    stringTuples.push([proto.code, convertToString(proto.code, bytes)])\n  }\n\n  return {\n    string: stringTuplesToString(stringTuples),\n    bytes: tuplesToBytes(tuples),\n    tuples,\n    stringTuples,\n    path\n  }\n}\n\nexport function bytesToMultiaddrParts (bytes: Uint8Array): MultiaddrParts {\n  const tuples: Tuple[] = []\n  const stringTuples: StringTuple[] = []\n  let path: string | null = null\n\n  let i = 0\n  while (i < bytes.length) {\n    const code = varint.decode(bytes, i)\n    const n = varint.encodingLength(code)\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, bytes.subarray(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      stringTuples.push([code])\n      i += n\n\n      continue\n    }\n\n    const addr = bytes.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > bytes.length) { // did not end _exactly_ at buffer.length\n      throw new ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(bytes, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n    const stringAddr = convertToString(code, addr)\n    stringTuples.push([code, stringAddr])\n    if (p.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = stringAddr\n      break\n    }\n  }\n\n  return {\n    bytes: Uint8Array.from(bytes),\n    string: stringTuplesToString(stringTuples),\n    tuples,\n    stringTuples,\n    path\n  }\n}\n\n/**\n * [[num code, str value?]... ] -> Tuple[]\n */\nexport function stringTuplesToTuples (stringTuples: StringTuple[]): Tuple[] {\n  const tuples: Tuple[] = []\n\n  stringTuples.forEach(([code, value]) => {\n    const tuple: Tuple = [code]\n\n    if (value != null) {\n      tuple[1] = convertToBytes(code, value)\n    }\n\n    tuples.push(tuple)\n  })\n\n  return tuples\n}\n\n/**\n * [[num code, str value?]... ] -> string\n */\nfunction stringTuplesToString (tuples: StringTuple[]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = getProtocol(tup[0])\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Tuple[]): Uint8Array {\n  return uint8ArrayConcat(tuples.map((tup) => {\n    const proto = getProtocol(tup[0])\n    let buf: Uint8Array = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  }))\n}\n\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr (p: Protocol, addr: Uint8Array | number[]): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr))\n    return size + varint.encodingLength(size)\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Tuple[] {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.encodingLength(code)\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.subarray(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n\n      continue\n    }\n\n    const addr = buf.subarray(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw new ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\nexport function bytesToStringTuples (buf: Uint8Array): StringTuple[] {\n  return bytesToTuples(buf).map(([key, value]) => {\n    const output: StringTuple = [key]\n\n    if (value != null) {\n      output.push(convertToString(key, value))\n    }\n\n    return output\n  })\n}\n\nexport function cleanPath (str: string): string {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport class ParseError extends Error {\n  static name = 'ParseError'\n  name = 'ParseError'\n\n  constructor (str: string) {\n    super(`Error parsing address: ${str}`)\n  }\n}\n", "/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals (a: Uint8Array, b: Uint8Array): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n", "/* eslint-disable complexity */\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { bytesToMultiaddrParts, bytesToStringTuples, bytesToTuples, stringToMultiaddrParts, stringToStringTuples, stringToTuples, tuplesToBytes } from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport { isMultiaddr, multiaddr, resolvers } from './index.js'\nimport type { MultiaddrParts } from './codec.js'\nimport type { MultiaddrInput, Multiaddr as MultiaddrInterface, MultiaddrObject, Protocol, StringTuple, Tuple, NodeAddress, ResolveOptions } from './index.js'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nclass NoAvailableResolverError extends Error {\n  constructor (message = 'No available resolver') {\n    super(message)\n    this.name = 'NoAvailableResolverError'\n  }\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr implements MultiaddrInterface {\n  #bytes?: Uint8Array\n  #string?: string\n  #tuples?: Tuple[]\n  #stringTuples?: StringTuple[]\n  #path?: string | null\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null || addr === '') {\n      addr = '/'\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.#bytes = addr\n    } else if (typeof addr === 'string') {\n      if (addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n\n      this.#string = addr\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      this.#bytes = addr.bytes\n      this.#string = addr.toString()\n      this.#tuples = addr.tuples()\n      this.#stringTuples = addr.stringTuples()\n      this.#path = addr.getPath()\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  get bytes (): Uint8Array {\n    if (this.#bytes == null) {\n      if (this.#string == null) {\n        throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr')\n      }\n\n      const parts = stringToMultiaddrParts(this.#string)\n      this.#bytes = parts.bytes\n      this.#tuples = parts.tuples\n      this.#stringTuples = parts.stringTuples\n      this.#path = parts.path\n    }\n\n    return this.#bytes\n  }\n\n  toString (): string {\n    if (this.#string == null) {\n      if (this.#bytes == null) {\n        throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr')\n      }\n\n      const parts = bytesToMultiaddrParts(this.#bytes)\n      this.#string = parts.string\n      this.#tuples = parts.tuples\n      this.#stringTuples = parts.stringTuples\n      this.#path = parts.path\n    }\n\n    return this.#string === '' ? '/' : this.#string\n  }\n\n  #populate (): void {\n    let parts\n\n    if (this.#string != null) {\n      parts = stringToMultiaddrParts(this.#string)\n    } else if (this.#bytes != null) {\n      parts = bytesToMultiaddrParts(this.#bytes)\n    } else {\n      throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr')\n    }\n\n    this.#string = parts.string\n    this.#bytes = parts.bytes\n    this.#tuples = parts.tuples\n    this.#stringTuples = parts.stringTuples\n    this.#path = parts.path\n  }\n\n  #getTuples (): Tuple[] {\n    if (this.#tuples == null) {\n      this.#populate()\n    }\n\n    return this.#tuples ?? []\n  }\n\n  #getStringTuples (): StringTuple[] {\n    if (this.#stringTuples == null) {\n      this.#populate()\n    }\n\n    return this.#stringTuples ?? []\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: 'tcp' | 'udp' | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name === 'tcp' ? 'tcp' : 'udp'\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp'\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp'\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.#getTuples().map(([code]) => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    return this.#getTuples().map(([code]) => code)\n  }\n\n  protoNames (): string[] {\n    return this.#getTuples().map(([code]) => getProtocol(code).name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    return this.#getTuples().map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    return this.#getStringTuples().map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new Multiaddr(addr)\n\n    return new Multiaddr(tuplesToBytes([\n      ...this.tuples(),\n      ...addr.tuples()\n    ]))\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = new Multiaddr(addr).toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n\n    if (i < 0 || (addrString === '/' && s !== '/')) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      let tuples: Array<[number, string | undefined]> = []\n\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name])\n        }\n\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = []\n        }\n      })\n\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    if (this.#path === undefined) {\n      this.#populate()\n    }\n\n    return this.#path ?? null\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: ResolveOptions): Promise<MultiaddrInterface[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw new NoAvailableResolverError(`no available resolver for ${resolvableProto.name}`)\n    }\n\n    const result = await resolver(this, options)\n\n    return result.map(str => multiaddr(str))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${this.toString()})`\n  }\n}\n", "import { convertToIpNet } from '../convert.js'\nimport { multiaddr } from '../index.js'\nimport type { Multiaddr, MultiaddrInput } from '../index.js'\nimport type { IpNet } from '@chainsafe/netmask'\n\n/**\n * A utility class to determine if a Multiaddr contains another\n * multiaddr.\n *\n * This can be used with ipcidr ranges to determine if a given\n * multiaddr is in a ipcidr range.\n *\n * @example\n *\n * ```js\n * import { multiaddr, MultiaddrFilter } from '@multiformats/multiaddr'\n *\n * const range = multiaddr('/ip4/192.168.10.10/ipcidr/24')\n * const filter = new MultiaddrFilter(range)\n *\n * const input = multiaddr('/ip4/192.168.10.2/udp/60')\n * console.info(filter.contains(input)) // true\n * ```\n */\nexport class MultiaddrFilter {\n  private readonly multiaddr: Multiaddr\n  private readonly netmask: IpNet\n\n  public constructor (input: MultiaddrInput) {\n    this.multiaddr = multiaddr(input)\n    this.netmask = convertToIpNet(this.multiaddr)\n  }\n\n  public contains (input: MultiaddrInput): boolean {\n    if (input == null) { return false }\n    const m = multiaddr(input)\n    let ip\n    for (const [code, value] of m.stringTuples()) {\n      if (code === 4 || code === 41) {\n        ip = value\n        break\n      }\n    }\n    if (ip === undefined) { return false }\n    return this.netmask.contains(ip)\n  }\n}\n"],
+  "mappings": "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",
+  "names": ["index_exports", "__export", "MultiaddrFilter", "fromNodeAddress", "fromStringTuples", "fromTuples", "isMultiaddr", "isName", "multiaddr", "getProtocol", "resolvers", "allocUnsafe", "size", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "MSB", "REST", "encodingLength", "value", "encodeUint8Array", "buf", "offset", "encodeUint8ArrayList", "decodeUint8Array", "b", "res", "decodeUint8ArrayList", "encode", "allocUnsafe", "decode", "concat", "arrays", "length", "acc", "curr", "output", "allocUnsafe", "offset", "arr", "base10_exports", "__export", "base10", "empty", "equals", "aa", "bb", "ii", "coerce", "o", "fromString", "str", "toString", "b", "base", "ALPHABET", "name", "BASE_MAP", "j", "i", "x", "xc", "BASE", "LEADER", "FACTOR", "iFACTOR", "encode", "source", "zeroes", "length", "pbegin", "pend", "size", "b58", "carry", "it1", "it2", "str", "decodeUnsafe", "psz", "b256", "it3", "it4", "vch", "decode", "string", "buffer", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "prefix", "baseEncode", "bytes", "Decoder", "baseDecode", "prefixCodePoint", "text", "decoder", "or", "ComposedDecoder", "decoders", "input", "left", "right", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "alphabetIdx", "bitsPerChar", "end", "out", "bits", "buffer", "written", "i", "value", "data", "pad", "mask", "createAlphabetIdx", "rfc4648", "base10", "baseX", "base16_exports", "__export", "base16", "base16upper", "base16", "rfc4648", "base16upper", "base2_exports", "__export", "base2", "base2", "rfc4648", "base256emoji_exports", "__export", "base256emoji", "alphabet", "alphabetBytesToChars", "p", "c", "i", "alphabetCharsToBytes", "codePoint", "encode", "data", "decode", "str", "byts", "char", "byt", "base256emoji", "from", "base32_exports", "__export", "base32", "base32hex", "base32hexpad", "base32hexpadupper", "base32hexupper", "base32pad", "base32padupper", "base32upper", "base32z", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36_exports", "__export", "base36", "base36upper", "base36", "baseX", "base36upper", "base58_exports", "__export", "base58btc", "base58flickr", "base58btc", "baseX", "base58flickr", "base64_exports", "__export", "base64", "base64pad", "base64url", "base64urlpad", "base64", "rfc4648", "base64pad", "base64url", "base64urlpad", "base8_exports", "__export", "base8", "base8", "rfc4648", "identity_exports", "__export", "identity", "identity", "from", "buf", "toString", "str", "fromString", "textEncoder", "textDecoder", "identity_exports", "__export", "identity", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "num", "out", "offset", "oldOffset", "decode", "read", "MSB$1", "REST$1", "buf", "res", "shift", "counter", "b", "l", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "data", "offset", "varint_default", "encodeTo", "int", "target", "encodingLength", "create", "code", "digest", "size", "sizeOffset", "encodingLength", "digestOffset", "bytes", "encodeTo", "Digest", "decode", "multihash", "coerce", "equals", "a", "b", "data", "code", "name", "encode", "coerce", "digest", "input", "create", "identity", "sha2_browser_exports", "__export", "sha256", "sha512", "from", "name", "code", "encode", "Hasher", "input", "result", "create", "digest", "sha", "name", "data", "sha256", "from", "sha512", "format", "link", "base", "bytes", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "cid", "CID", "_CID", "version", "code", "multihash", "bytes", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "other", "self", "unknown", "equals", "base", "format", "input", "value", "encodeCID", "cidSymbol", "decode", "remainder", "specs", "prefixSize", "multihashBytes", "coerce", "digestBytes", "Digest", "initialBytes", "offset", "next", "i", "length", "codec", "multihashCode", "digestSize", "size", "multihashSize", "source", "prefix", "parseCIDtoBytes", "decoder", "base58btc", "base32", "base36", "toStringV0", "toStringV1", "codeOffset", "encodingLength", "hashOffset", "encodeTo", "bases", "identity_exports", "base2_exports", "base8_exports", "base10_exports", "base16_exports", "base32_exports", "base36_exports", "base58_exports", "base64_exports", "base256emoji_exports", "hashes", "sha2_browser_exports", "createCodec", "name", "prefix", "encode", "decode", "string", "buf", "str", "ascii", "i", "allocUnsafe", "BASES", "bases", "bases_default", "toString", "array", "encoding", "base", "bases_default", "Parser", "input", "fn", "index", "result", "target", "char", "sep", "inner", "radix", "maxDigits", "allowZeroPrefix", "maxBytes", "digitCount", "leadingChar", "hasLeadingZero", "maxValue", "digit", "num", "out", "i", "ix", "readGroups", "groups", "ipv4", "group", "head", "headSize", "headIp4", "tail", "limit", "tailSize", "MAX_IPV6_LENGTH", "MAX_IPV4_LENGTH", "parser", "Parser", "parseIPv4", "input", "parseIPv6", "input", "MAX_IPV6_LENGTH", "parser", "parseIP", "mapIPv4ToIPv6", "addr", "allFF", "a", "from", "to", "i", "e", "deepEqual", "b", "ipToString", "ip", "IPv4Len", "IPv6Len", "result", "simpleMaskLength", "mask", "ones", "index", "byte", "maskToHex", "hex", "IPv4Len", "IPv6Len", "maxIPv6Octet", "ipv4Prefix", "maskIp", "ip", "mask", "allFF", "deepEqual", "n", "out", "i", "containsIp", "net", "parseIP", "parseCidr", "s", "address", "maskString", "ipLength", "IPv4Len", "ip", "parseIPv4", "IPv6Len", "parseIPv6", "m", "mask", "cidrMask", "maskIp", "ones", "bits", "l", "i", "IpNet", "ipOrCidr", "mask", "parseCidr", "ipResult", "parseIP", "m", "maskResult", "cidrMask", "maskIp", "ip", "containsIp", "l", "simpleMaskLength", "maskToHex", "ipToString", "fromString", "string", "encoding", "base", "bases_default", "isIPv4", "input", "parseIPv4", "isIPv6", "parseIPv6", "isIP", "parseIP", "isV4", "isIPv4", "isV6", "isIPv6", "toBytes", "ip", "offset", "bytes", "byte", "sections", "i", "isv4", "v4Buffer", "toString", "argv", "word", "buf", "length", "view", "result", "names", "codes", "table", "row", "proto", "createProtocol", "code", "size", "name", "resolvable", "path", "getProtocol", "ip4Protocol", "getProtocol", "ip6Protocol", "ipcidrProtocol", "convertToString", "proto", "buf", "getProtocol", "bytes2ip", "bytes2str", "toString", "bytes2port", "bytes2mh", "bytes2onion", "bytes2mb", "convertToBytes", "str", "ip2bytes", "str2bytes", "fromString", "port2bytes", "mh2bytes", "onion2bytes", "onion32bytes", "mb2bytes", "convertToIpNet", "multiaddr", "mask", "addr", "code", "value", "ip4Protocol", "ip6Protocol", "ipcidrProtocol", "IpNet", "decoders", "bases", "c", "anybaseDecoder", "acc", "d", "ipString", "isIP", "toBytes", "ipBuff", "port", "size", "encode", "concat", "decode", "encodingLength", "hash", "mh", "base58btc", "CID", "mbstr", "mb", "address", "base32", "portBuf", "addrBytes", "portBytes", "stringToMultiaddrParts", "str", "tuples", "stringTuples", "path", "parts", "p", "part", "proto", "getProtocol", "ParseError", "cleanPath", "convertToBytes", "bytes", "convertToString", "stringTuplesToString", "tuplesToBytes", "bytesToMultiaddrParts", "i", "code", "decode", "n", "encodingLength", "size", "sizeForAddr", "addr", "toString", "stringAddr", "stringTuplesToTuples", "value", "tuple", "tup", "concat", "buf", "encode", "cleanPath", "str", "a", "ParseError", "equals", "a", "b", "i", "inspect", "symbol", "DNS_CODES", "getProtocol", "NoAvailableResolverError", "message", "Multiaddr", "_Multiaddr", "#bytes", "#string", "#tuples", "#stringTuples", "#path", "addr", "isMultiaddr", "parts", "stringToMultiaddrParts", "bytesToMultiaddrParts", "#populate", "#getTuples", "#getStringTuples", "family", "transport", "host", "port", "zone", "tcp", "udp", "ip4", "ip6", "dns6", "ip6zone", "code", "value", "tuplesToBytes", "addrString", "s", "i", "tuples", "name", "names", "tuple", "peerIdStr", "toString", "base58btc", "CID", "equals", "options", "resolvableProto", "p", "resolver", "resolvers", "str", "multiaddr", "protos", "MultiaddrFilter", "input", "multiaddr", "convertToIpNet", "m", "ip", "code", "value", "resolvers", "fromNodeAddress", "addr", "transport", "ip", "host", "parts", "Multiaddr", "fromTuples", "tuples", "multiaddr", "tuplesToBytes", "fromStringTuples", "stringTuplesToTuples", "isName", "isMultiaddr", "proto", "value", "symbol"]
+}
diff --git a/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts b/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts
index c0a8f75..69c1819 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts
+++ b/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts
@@ -6,6 +6,8 @@ export interface MultiaddrParts {
     stringTuples: StringTuple[];
     path: string | null;
 }
+export declare function stringToTuples(str: string): Tuple[];
+export declare function stringToStringTuples(str: string): StringTuple[];
 export declare function stringToMultiaddrParts(str: string): MultiaddrParts;
 export declare function bytesToMultiaddrParts(bytes: Uint8Array): MultiaddrParts;
 /**
@@ -17,6 +19,7 @@ export declare function stringTuplesToTuples(stringTuples: StringTuple[]): Tuple
  */
 export declare function tuplesToBytes(tuples: Tuple[]): Uint8Array;
 export declare function bytesToTuples(buf: Uint8Array): Tuple[];
+export declare function bytesToStringTuples(buf: Uint8Array): StringTuple[];
 export declare function cleanPath(str: string): string;
 export declare class ParseError extends Error {
     static name: string;
diff --git a/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts.map
index 2c44b7f..6c4b3bb 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/codec.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"codec.d.ts","sourceRoot":"","sources":["../../src/codec.ts"],"names":[],"mappings":"AAKA,OAAO,KAAK,EAAE,WAAW,EAAE,KAAK,EAAY,MAAM,YAAY,CAAA;AAE9D,MAAM,WAAW,cAAc;IAC7B,KAAK,EAAE,UAAU,CAAA;IACjB,MAAM,EAAE,MAAM,CAAA;IACd,MAAM,EAAE,KAAK,EAAE,CAAA;IACf,YAAY,EAAE,WAAW,EAAE,CAAA;IAC3B,IAAI,EAAE,MAAM,GAAG,IAAI,CAAA;CACpB;AAED,wBAAgB,sBAAsB,CAAE,GAAG,EAAE,MAAM,GAAG,cAAc,CAwDnE;AAED,wBAAgB,qBAAqB,CAAE,KAAK,EAAE,UAAU,GAAG,cAAc,CAkDxE;AAED;;GAEG;AACH,wBAAgB,oBAAoB,CAAE,YAAY,EAAE,WAAW,EAAE,GAAG,KAAK,EAAE,CAc1E;AAmBD;;GAEG;AACH,wBAAgB,aAAa,CAAE,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAW1D;AAgBD,wBAAgB,aAAa,CAAE,GAAG,EAAE,UAAU,GAAG,KAAK,EAAE,CA+BvD;AAED,wBAAgB,SAAS,CAAE,GAAG,EAAE,MAAM,GAAG,MAAM,CAE9C;AAED,qBAAa,UAAW,SAAQ,KAAK;IACnC,MAAM,CAAC,IAAI,SAAe;IAC1B,IAAI,SAAe;gBAEN,GAAG,EAAE,MAAM;CAGzB"}
\ No newline at end of file
+{"version":3,"file":"codec.d.ts","sourceRoot":"","sources":["../../src/codec.ts"],"names":[],"mappings":"AAKA,OAAO,KAAK,EAAE,WAAW,EAAE,KAAK,EAAY,MAAM,YAAY,CAAA;AAE9D,MAAM,WAAW,cAAc;IAC7B,KAAK,EAAE,UAAU,CAAA;IACjB,MAAM,EAAE,MAAM,CAAA;IACd,MAAM,EAAE,KAAK,EAAE,CAAA;IACf,YAAY,EAAE,WAAW,EAAE,CAAA;IAC3B,IAAI,EAAE,MAAM,GAAG,IAAI,CAAA;CACpB;AAED,wBAAgB,cAAc,CAAE,GAAG,EAAE,MAAM,GAAG,KAAK,EAAE,CAsCpD;AAED,wBAAgB,oBAAoB,CAAC,GAAG,EAAE,MAAM,GAAG,WAAW,EAAE,CAiC/D;AAED,wBAAgB,sBAAsB,CAAE,GAAG,EAAE,MAAM,GAAG,cAAc,CAwDnE;AAED,wBAAgB,qBAAqB,CAAE,KAAK,EAAE,UAAU,GAAG,cAAc,CAkDxE;AAED;;GAEG;AACH,wBAAgB,oBAAoB,CAAE,YAAY,EAAE,WAAW,EAAE,GAAG,KAAK,EAAE,CAc1E;AAmBD;;GAEG;AACH,wBAAgB,aAAa,CAAE,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAW1D;AAgBD,wBAAgB,aAAa,CAAE,GAAG,EAAE,UAAU,GAAG,KAAK,EAAE,CA+BvD;AAED,wBAAgB,mBAAmB,CAAE,GAAG,EAAE,UAAU,GAAG,WAAW,EAAE,CAUnE;AAED,wBAAgB,SAAS,CAAE,GAAG,EAAE,MAAM,GAAG,MAAM,CAE9C;AAED,qBAAa,UAAW,SAAQ,KAAK;IACnC,MAAM,CAAC,IAAI,SAAe;IAC1B,IAAI,SAAe;gBAEN,GAAG,EAAE,MAAM;CAGzB"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/codec.js b/node_modules/@multiformats/multiaddr/dist/src/codec.js
index 9c86df6..bd59a8e 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/codec.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/codec.js
@@ -3,8 +3,65 @@ import { concat as uint8ArrayConcat } from 'uint8arrays/concat';
 import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
 import { convertToBytes, convertToString } from './convert.js';
 import { getProtocol } from './protocols-table.js';
+export function stringToTuples(str) {
+    const tuples = [];
+    const parts = str.split('/').slice(1);
+    if (parts.length === 1 && parts[0] === '') {
+        return [];
+    }
+    for (let p = 0; p < parts.length; p++) {
+        const part = parts[p];
+        const proto = getProtocol(part);
+        if (proto.size === 0) {
+            tuples.push([proto.code]);
+            continue;
+        }
+        // if it's a path proto, take the rest
+        if (proto.path === true) {
+            // should we need to check each path part to see if it's a proto?
+            // This would allow for other protocols to be added after a unix path,
+            // however it would have issues if the path had a protocol name in the path
+            const path = cleanPath(parts.slice(p).join('/'));
+            tuples.push([proto.code, convertToBytes(proto.code, path)]);
+            break;
+        }
+        p++; // advance addr part
+        if (p >= parts.length) {
+            throw new ParseError('invalid address: ' + str);
+        }
+        const bytes = convertToBytes(proto.code, parts[p]);
+        tuples.push([proto.code, bytes]);
+    }
+    return tuples;
+}
+export function stringToStringTuples(str) {
+    const stringTuples = [];
+    const parts = str.split('/').slice(1);
+    for (let p = 0; p < parts.length; p++) {
+        const part = parts[p];
+        const proto = getProtocol(part);
+        if (proto.size === 0) {
+            stringTuples.push([proto.code]);
+            continue;
+        }
+        // if it's a path proto, take the rest
+        if (proto.path === true) {
+            // should we need to check each path part to see if it's a proto?
+            // This would allow for other protocols to be added after a unix path,
+            // however it would have issues if the path had a protocol name in the path
+            const path = cleanPath(parts.slice(p).join('/'));
+            stringTuples.push([proto.code, path]);
+            break;
+        }
+        p++; // advance addr part
+        if (p >= parts.length) {
+            throw new ParseError('invalid address: ' + str);
+        }
+        stringTuples.push([proto.code, parts[p]]);
+    }
+    return stringTuples;
+}
 export function stringToMultiaddrParts(str) {
-    str = cleanPath(str);
     const tuples = [];
     const stringTuples = [];
     let path = null;
@@ -24,7 +81,6 @@ export function stringToMultiaddrParts(str) {
         if (proto.size === 0) {
             tuples.push([proto.code]);
             stringTuples.push([proto.code]);
-            // eslint-disable-next-line no-continue
             continue;
         }
         p++; // advance addr part
@@ -62,12 +118,11 @@ export function bytesToMultiaddrParts(bytes) {
         const code = varint.decode(bytes, i);
         const n = varint.encodingLength(code);
         const p = getProtocol(code);
-        const size = sizeForAddr(p, bytes.slice(i + n));
+        const size = sizeForAddr(p, bytes.subarray(i + n));
         if (size === 0) {
             tuples.push([code]);
             stringTuples.push([code]);
             i += n;
-            // eslint-disable-next-line no-continue
             continue;
         }
         const addr = bytes.slice(i + n, i + n + size);
@@ -159,14 +214,13 @@ export function bytesToTuples(buf) {
         const code = varint.decode(buf, i);
         const n = varint.encodingLength(code);
         const p = getProtocol(code);
-        const size = sizeForAddr(p, buf.slice(i + n));
+        const size = sizeForAddr(p, buf.subarray(i + n));
         if (size === 0) {
             tuples.push([code]);
             i += n;
-            // eslint-disable-next-line no-continue
             continue;
         }
-        const addr = buf.slice(i + n, i + n + size);
+        const addr = buf.subarray(i + n, i + n + size);
         i += (size + n);
         if (i > buf.length) { // did not end _exactly_ at buffer.length
             throw new ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));
@@ -176,6 +230,15 @@ export function bytesToTuples(buf) {
     }
     return tuples;
 }
+export function bytesToStringTuples(buf) {
+    return bytesToTuples(buf).map(([key, value]) => {
+        const output = [key];
+        if (value != null) {
+            output.push(convertToString(key, value));
+        }
+        return output;
+    });
+}
 export function cleanPath(str) {
     return '/' + str.trim().split('/').filter((a) => a).join('/');
 }
diff --git a/node_modules/@multiformats/multiaddr/dist/src/codec.js.map b/node_modules/@multiformats/multiaddr/dist/src/codec.js.map
index 55bfd53..838ab35 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/codec.js.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/codec.js.map
@@ -1 +1 @@
-{"version":3,"file":"codec.js","sourceRoot":"","sources":["../../src/codec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"codec.js","sourceRoot":"","sources":["../../src/codec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/convert.js b/node_modules/@multiformats/multiaddr/dist/src/convert.js
index 2111b55..608d8d8 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/convert.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/convert.js
@@ -156,7 +156,7 @@ function str2bytes(str) {
 }
 function bytes2str(buf) {
     const size = varint.decode(buf);
-    buf = buf.slice(varint.encodingLength(size));
+    buf = buf.subarray(varint.encodingLength(size));
     if (buf.length !== size) {
         throw new Error('inconsistent lengths');
     }
@@ -181,7 +181,7 @@ function mb2bytes(mbstr) {
 }
 function bytes2mb(buf) {
     const size = varint.decode(buf);
-    const hash = buf.slice(varint.encodingLength(size));
+    const hash = buf.subarray(varint.encodingLength(size));
     if (hash.length !== size) {
         throw new Error('inconsistent lengths');
     }
@@ -192,7 +192,7 @@ function bytes2mb(buf) {
  */
 function bytes2mh(buf) {
     const size = varint.decode(buf);
-    const address = buf.slice(varint.encodingLength(size));
+    const address = buf.subarray(varint.encodingLength(size));
     if (address.length !== size) {
         throw new Error('inconsistent lengths');
     }
@@ -235,8 +235,8 @@ function onion32bytes(str) {
     return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);
 }
 function bytes2onion(buf) {
-    const addrBytes = buf.slice(0, buf.length - 2);
-    const portBytes = buf.slice(buf.length - 2);
+    const addrBytes = buf.subarray(0, buf.length - 2);
+    const portBytes = buf.subarray(buf.length - 2);
     const addr = uint8ArrayToString(addrBytes, 'base32');
     const port = bytes2port(portBytes);
     return `${addr}:${port}`;
diff --git a/node_modules/@multiformats/multiaddr/dist/src/convert.js.map b/node_modules/@multiformats/multiaddr/dist/src/convert.js.map
index d9df598..3eaa20c 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/convert.js.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/convert.js.map
@@ -1 +1 @@
-{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../src/convert.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../src/convert.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts
index 6729873..8ee1c86 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts
+++ b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts
@@ -1,4 +1,4 @@
-import { type MultiaddrInput } from '../index.js';
+import type { MultiaddrInput } from '../index.js';
 /**
  * A utility class to determine if a Multiaddr contains another
  * multiaddr.
diff --git a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts.map b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts.map
index f3d2a94..7ca202c 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"multiaddr-filter.d.ts","sourceRoot":"","sources":["../../../src/filter/multiaddr-filter.ts"],"names":[],"mappings":"AACA,OAAO,EAA6B,KAAK,cAAc,EAAE,MAAM,aAAa,CAAA;AAG5E;;;;;;;;;;;;;;;;;;GAkBG;AACH,qBAAa,eAAe;IAC1B,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAW;IACrC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAO;gBAEX,KAAK,EAAE,cAAc;IAKlC,QAAQ,CAAE,KAAK,EAAE,cAAc,GAAG,OAAO;CAajD"}
\ No newline at end of file
+{"version":3,"file":"multiaddr-filter.d.ts","sourceRoot":"","sources":["../../../src/filter/multiaddr-filter.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAa,cAAc,EAAE,MAAM,aAAa,CAAA;AAG5D;;;;;;;;;;;;;;;;;;GAkBG;AACH,qBAAa,eAAe;IAC1B,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAW;IACrC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAO;gBAEX,KAAK,EAAE,cAAc;IAKlC,QAAQ,CAAE,KAAK,EAAE,cAAc,GAAG,OAAO;CAajD"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js
index 41f0b4c..07fb030 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js
@@ -27,8 +27,9 @@ export class MultiaddrFilter {
         this.netmask = convertToIpNet(this.multiaddr);
     }
     contains(input) {
-        if (input == null)
+        if (input == null) {
             return false;
+        }
         const m = multiaddr(input);
         let ip;
         for (const [code, value] of m.stringTuples()) {
@@ -37,8 +38,9 @@ export class MultiaddrFilter {
                 break;
             }
         }
-        if (ip === undefined)
+        if (ip === undefined) {
             return false;
+        }
         return this.netmask.contains(ip);
     }
 }
diff --git a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js.map b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js.map
index 617e6b4..bcf5e12 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js.map
@@ -1 +1 @@
-{"version":3,"file":"multiaddr-filter.js","sourceRoot":"","sources":["../../../src/filter/multiaddr-filter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAA;AAC9C,OAAO,EAAE,SAAS,EAAuC,MAAM,aAAa,CAAA;AAG5E;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,OAAO,eAAe;IACT,SAAS,CAAW;IACpB,OAAO,CAAO;IAE/B,YAAoB,KAAqB;QACvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;QACjC,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC/C,CAAC;IAEM,QAAQ,CAAE,KAAqB;QACpC,IAAI,KAAK,IAAI,IAAI;YAAE,OAAO,KAAK,CAAA;QAC/B,MAAM,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;QAC1B,IAAI,EAAE,CAAA;QACN,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC;YAC7C,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC;gBAC9B,EAAE,GAAG,KAAK,CAAA;gBACV,MAAK;YACP,CAAC;QACH,CAAC;QACD,IAAI,EAAE,KAAK,SAAS;YAAE,OAAO,KAAK,CAAA;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;IAClC,CAAC;CACF"}
\ No newline at end of file
+{"version":3,"file":"multiaddr-filter.js","sourceRoot":"","sources":["../../../src/filter/multiaddr-filter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAA;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AAIvC;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,OAAO,eAAe;IACT,SAAS,CAAW;IACpB,OAAO,CAAO;IAE/B,YAAoB,KAAqB;QACvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;QACjC,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC/C,CAAC;IAEM,QAAQ,CAAE,KAAqB;QACpC,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;YAAC,OAAO,KAAK,CAAA;QAAC,CAAC;QACnC,MAAM,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;QAC1B,IAAI,EAAE,CAAA;QACN,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC;YAC7C,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC;gBAC9B,EAAE,GAAG,KAAK,CAAA;gBACV,MAAK;YACP,CAAC;QACH,CAAC;QACD,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAAC,OAAO,KAAK,CAAA;QAAC,CAAC;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;IAClC,CAAC;CACF"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/index.d.ts b/node_modules/@multiformats/multiaddr/dist/src/index.d.ts
index 11de59a..46c7fc4 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/index.d.ts
+++ b/node_modules/@multiformats/multiaddr/dist/src/index.d.ts
@@ -186,7 +186,8 @@ export interface Multiaddr {
      */
     toJSON(): string;
     /**
-     * Returns Multiaddr as a convinient options object to be used with net.createConnection
+     * Returns Multiaddr as a convenient options object to be used with
+     * `createConnection` from `node:net`
      *
      * @example
      * ```js
@@ -198,9 +199,9 @@ export interface Multiaddr {
      */
     toOptions(): MultiaddrObject;
     /**
-     * Returns the protocols the Multiaddr is defined with, as an array of objects, in
-     * left-to-right order. Each object contains the protocol code, protocol name,
-     * and the size of its address space in bits.
+     * Returns the protocols the Multiaddr is defined with, as an array of
+     * objects, in left-to-right order. Each object contains the protocol code,
+     * protocol name, and the size of its address space in bits.
      * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
      *
      * @example
@@ -312,8 +313,8 @@ export interface Multiaddr {
      */
     decapsulate(addr: Multiaddr | string): Multiaddr;
     /**
-     * A more reliable version of `decapsulate` if you are targeting a
-     * specific code, such as 421 (the `p2p` protocol code). The last index of the code
+     * A more reliable version of `decapsulate` if you are targeting a specific
+     * code, such as 421 (the `p2p` protocol code). The last index of the code
      * will be removed from the `Multiaddr`, and a new instance will be returned.
      * If the code is not present, the original `Multiaddr` is returned.
      *
@@ -345,6 +346,8 @@ export interface Multiaddr {
      * // should return QmValidBase58string or null if the id is missing or invalid
      * const peerId = mh1.getPeerId()
      * ```
+     *
+     * @deprecated A multiaddr can contain multiple PeerIds, use stringTuples() to get the one you want
      */
     getPeerId(): string | null;
     /**
@@ -360,6 +363,8 @@ export interface Multiaddr {
      * // should return utf8 string or null if the id is missing or invalid
      * const path = mh1.getPath()
      * ```
+     *
+     * @deprecated A multiaddr can contain multiple tuples that could be interpreted as paths, use stringTuples() to get the one you want
      */
     getPath(): string | null;
     /**
@@ -401,12 +406,14 @@ export interface Multiaddr {
      * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)
      * // ]
      * ```
+     *
+     * @deprecated If you need to act on `dnsaddr` addresses, do it yourself
      */
     resolve(options?: ResolveOptions): Promise<Multiaddr[]>;
     /**
-     * Gets a Multiaddrs node-friendly address object. Note that protocol information
-     * is left out: in Node (and most network systems) the protocol is unknowable
-     * given only the address.
+     * Gets a Multiaddrs node-friendly address object. Note that protocol
+     * information is left out: in Node (and most network systems) the protocol is
+     * unknowable given only the address.
      *
      * Has to be a ThinWaist Address, otherwise throws error
      *
diff --git a/node_modules/@multiformats/multiaddr/dist/src/index.d.ts.map b/node_modules/@multiformats/multiaddr/dist/src/index.d.ts.map
index b03438d..41dd7d6 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/index.d.ts.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6FG;AAIH,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAClD,OAAO,KAAK,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AACpD,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAA;AAE5C;;GAEG;AACH,MAAM,WAAW,QAAQ;IACvB,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;IACZ,UAAU,CAAC,EAAE,OAAO,GAAG,SAAS,CAAA;IAChC,IAAI,CAAC,EAAE,OAAO,GAAG,SAAS,CAAA;CAC3B;AAED;;GAEG;AACH,MAAM,WAAW,eAAe;IAC9B,MAAM,EAAE,CAAC,GAAG,CAAC,CAAA;IACb,IAAI,EAAE,MAAM,CAAA;IACZ,SAAS,EAAE,KAAK,GAAG,KAAK,CAAA;IACxB,IAAI,EAAE,MAAM,CAAA;CACb;AAED;;GAEG;AACH,MAAM,WAAW,WAAW;IAC1B,MAAM,EAAE,CAAC,GAAG,CAAC,CAAA;IACb,OAAO,EAAE,MAAM,CAAA;IACf,IAAI,EAAE,MAAM,CAAA;CACb;AAED;;GAEG;AACH,MAAM,MAAM,cAAc,GAAG,MAAM,GAAG,SAAS,GAAG,UAAU,GAAG,IAAI,CAAA;AAEnE;;GAEG;AACH,MAAM,MAAM,KAAK,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAA;AAEzC;;GAEG;AACH,MAAM,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAA;AAE3C;;GAEG;AACH,MAAM,WAAW,YAAY;IAC3B,MAAM,CAAC,EAAE,WAAW,CAAA;CACrB;AAED;;GAEG;AACH,eAAO,MAAM,SAAS,qCAA8B,CAAA;AAEpD,YAAY,EAAE,QAAQ,EAAE,CAAA;AAExB,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAA;AAE9D,MAAM,WAAW,cAAe,SAAQ,YAAY;IAClD;;OAEG;IACH,GAAG,CAAC,EAAE,GAAG,CAAA;IAET;;;;;OAKG;IACH,iBAAiB,CAAC,EAAE,MAAM,CAAA;CAC3B;AAED,MAAM,WAAW,SAAS;IACxB,KAAK,EAAE,UAAU,CAAA;IAEjB;;;;;;;;;;OAUG;IACH,QAAQ,IAAI,MAAM,CAAA;IAElB;;;;;;;;;;OAUG;IACH,MAAM,IAAI,MAAM,CAAA;IAEhB;;;;;;;;;;OAUG;IACH,SAAS,IAAI,eAAe,CAAA;IAE5B;;;;;;;;;;;;;;OAcG;IACH,MAAM,IAAI,QAAQ,EAAE,CAAA;IAEpB;;;;;;;;;;;OAWG;IACH,UAAU,IAAI,MAAM,EAAE,CAAA;IAEtB;;;;;;;;;;;OAWG;IACH,UAAU,IAAI,MAAM,EAAE,CAAA;IAEtB;;;;;;;;;;OAUG;IACH,MAAM,IAAI,KAAK,EAAE,CAAA;IAEjB;;;;;;;;;;;;OAYG;IACH,YAAY,IAAI,WAAW,EAAE,CAAA;IAE7B;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,WAAW,CAAC,IAAI,EAAE,cAAc,GAAG,SAAS,CAAA;IAE5C;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,WAAW,CAAC,IAAI,EAAE,SAAS,GAAG,MAAM,GAAG,SAAS,CAAA;IAEhD;;;;;;;;;;;;;;;;;;;OAmBG;IACH,eAAe,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,CAAA;IAExC;;;;;;;;;;;;;OAaG;IACH,SAAS,IAAI,MAAM,GAAG,IAAI,CAAA;IAE1B;;;;;;;;;;;;;OAaG;IACH,OAAO,IAAI,MAAM,GAAG,IAAI,CAAA;IAExB;;;;;;;;;;;;;;;;;;;OAmBG;IACH,MAAM,CAAC,IAAI,EAAE;QAAE,KAAK,EAAE,UAAU,CAAA;KAAE,GAAG,OAAO,CAAA;IAE5C;;;;;;;;;;;;;;;;OAgBG;IACH,OAAO,CAAC,OAAO,CAAC,EAAE,cAAc,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC,CAAA;IAEvD;;;;;;;;;;;;;;OAcG;IACH,WAAW,IAAI,WAAW,CAAA;IAE1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4BG;IACH,kBAAkB,CAAC,IAAI,CAAC,EAAE,SAAS,GAAG,OAAO,CAAA;CAC9C;AAED;;;;;;;;;;GAUG;AACH,wBAAgB,eAAe,CAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,GAAG,SAAS,CAgChF;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,wBAAgB,UAAU,CAAE,MAAM,EAAE,KAAK,EAAE,GAAG,SAAS,CAEtD;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,wBAAgB,gBAAgB,CAAE,MAAM,EAAE,WAAW,EAAE,GAAG,SAAS,CAElE;AAED;;;;;;;;;;;;;GAaG;AACH,wBAAgB,MAAM,CAAE,IAAI,EAAE,SAAS,GAAG,OAAO,CAOhD;AAED;;;;;;;;;;;;;GAaG;AACH,wBAAgB,WAAW,CAAE,KAAK,EAAE,GAAG,GAAG,KAAK,IAAI,SAAS,CAE3D;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,SAAS,CAAE,IAAI,CAAC,EAAE,cAAc,GAAG,SAAS,CAE3D;AAED,OAAO,EAAE,WAAW,IAAI,SAAS,EAAE,CAAA"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/index.js b/node_modules/@multiformats/multiaddr/dist/src/index.js
index 4a9533c..593a593 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/index.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/index.js
@@ -133,7 +133,7 @@ export function fromNodeAddress(addr, transport) {
                 }
                 host = parts[0];
                 const zone = parts[1];
-                ip = `/ip6zone/${zone}/ip6`;
+                ip = `ip6zone/${zone}/ip6`;
             }
             break;
         default:
diff --git a/node_modules/@multiformats/multiaddr/dist/src/index.js.map b/node_modules/@multiformats/multiaddr/dist/src/index.js.map
index 82aab94..2b16358 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/index.js.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6FG;AAEH,OAAO,EAAE,oBAAoB,EAAE,aAAa,EAAE,MAAM,YAAY,CAAA;AAChE,OAAO,EAAE,SAAS,IAAI,cAAc,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AACpE,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAwDlD;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,GAAG,EAAoB,CAAA;AAIpD,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAA;AAoU9D;;;;;;;;;;GAUG;AACH,MAAM,UAAU,eAAe,CAAE,IAAiB,EAAE,SAAiB;IACnE,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;IACjD,CAAC;IACD,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;IAChD,CAAC;IACD,IAAI,EAAsB,CAAA;IAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAA;IACvB,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;QACpB,KAAK,CAAC;YACJ,EAAE,GAAG,KAAK,CAAA;YACV,MAAK;QACP,KAAK,CAAC;YACJ,EAAE,GAAG,KAAK,CAAA;YAEV,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;gBAE7B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBACvB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAA;gBAChD,CAAC;gBAED,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACf,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACrB,EAAE,GAAG,YAAY,IAAI,MAAM,CAAA;YAC7B,CAAC;YACD,MAAK;QACP;YACE,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAA;IACzD,CAAC;IACD,OAAO,IAAI,cAAc,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AAC7E,CAAC;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,UAAU,CAAE,MAAe;IACzC,OAAO,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAA;AACzC,CAAC;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,gBAAgB,CAAE,MAAqB;IACrD,OAAO,UAAU,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAA;AACjD,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,MAAM,CAAE,IAAe;IACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;QACvB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,6DAA6D;IAC7D,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;AACxD,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,WAAW,CAAE,KAAU;IACrC,OAAO,OAAO,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;AACjC,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,SAAS,CAAE,IAAqB;IAC9C,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,CAAA;AACjC,CAAC;AAED,OAAO,EAAE,WAAW,IAAI,SAAS,EAAE,CAAA"}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6FG;AAEH,OAAO,EAAE,oBAAoB,EAAE,aAAa,EAAE,MAAM,YAAY,CAAA;AAChE,OAAO,EAAE,SAAS,IAAI,cAAc,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AACpE,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAwDlD;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,GAAG,EAAoB,CAAA;AAIpD,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAA;AA2U9D;;;;;;;;;;GAUG;AACH,MAAM,UAAU,eAAe,CAAE,IAAiB,EAAE,SAAiB;IACnE,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;IACjD,CAAC;IACD,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;IAChD,CAAC;IACD,IAAI,EAAsB,CAAA;IAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAA;IACvB,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;QACpB,KAAK,CAAC;YACJ,EAAE,GAAG,KAAK,CAAA;YACV,MAAK;QACP,KAAK,CAAC;YACJ,EAAE,GAAG,KAAK,CAAA;YAEV,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;gBAE7B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBACvB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAA;gBAChD,CAAC;gBAED,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACf,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACrB,EAAE,GAAG,WAAW,IAAI,MAAM,CAAA;YAC5B,CAAC;YACD,MAAK;QACP;YACE,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAA;IACzD,CAAC;IACD,OAAO,IAAI,cAAc,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AAC7E,CAAC;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,UAAU,CAAE,MAAe;IACzC,OAAO,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAA;AACzC,CAAC;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,gBAAgB,CAAE,MAAqB;IACrD,OAAO,UAAU,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAA;AACjD,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,MAAM,CAAE,IAAe;IACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;QACvB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,6DAA6D;IAC7D,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;AACxD,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,WAAW,CAAE,KAAU;IACrC,OAAO,OAAO,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;AACjC,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,SAAS,CAAE,IAAqB;IAC9C,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,CAAA;AACjC,CAAC;AAED,OAAO,EAAE,WAAW,IAAI,SAAS,EAAE,CAAA"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/ip.d.ts.map b/node_modules/@multiformats/multiaddr/dist/src/ip.d.ts.map
index bc6282f..ca0d0c9 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/ip.d.ts.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/ip.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ip.d.ts","sourceRoot":"","sources":["../../src/ip.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AAGjD,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAA;AACvC,eAAO,MAAM,IAAI,eAAS,CAAA;AAC1B,eAAO,MAAM,IAAI,eAAS,CAAA;AAI1B,eAAO,MAAM,OAAO,OAAiB,MAAM,KAAG,UAyD7C,CAAA;AAGD,eAAO,MAAM,QAAQ,QAAkB,UAAU,WAAU,MAAM,WAAe,MAAM,KAAG,MA+BxF,CAAA"}
\ No newline at end of file
+{"version":3,"file":"ip.d.ts","sourceRoot":"","sources":["../../src/ip.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AAGjD,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAA;AACvC,eAAO,MAAM,IAAI,eAAS,CAAA;AAC1B,eAAO,MAAM,IAAI,eAAS,CAAA;AAI1B,eAAO,MAAM,OAAO,GAAa,IAAI,MAAM,KAAG,UAyD7C,CAAA;AAGD,eAAO,MAAM,QAAQ,GAAa,KAAK,UAAU,EAAE,SAAQ,MAAU,EAAE,SAAS,MAAM,KAAG,MA+BxF,CAAA"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/ip.js b/node_modules/@multiformats/multiaddr/dist/src/ip.js
index 25e4ac2..739c23a 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/ip.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/ip.js
@@ -23,23 +23,24 @@ export const toBytes = function (ip) {
             let v4Buffer;
             if (isv4) {
                 v4Buffer = toBytes(sections[i]);
-                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');
+                sections[i] = uint8ArrayToString(v4Buffer.subarray(0, 2), 'base16');
             }
             if (v4Buffer != null && ++i < 8) {
-                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));
+                sections.splice(i, 0, uint8ArrayToString(v4Buffer.subarray(2, 4), 'base16'));
             }
         }
         if (sections[0] === '') {
-            while (sections.length < 8)
+            while (sections.length < 8) {
                 sections.unshift('0');
+            }
         }
         else if (sections[sections.length - 1] === '') {
-            while (sections.length < 8)
+            while (sections.length < 8) {
                 sections.push('0');
+            }
         }
         else if (sections.length < 8) {
-            for (i = 0; i < sections.length && sections[i] !== ''; i++)
-                ;
+            for (i = 0; i < sections.length && sections[i] !== ''; i++) { }
             const argv = [i, 1];
             for (i = 9 - sections.length; i > 0; i--) {
                 argv.push('0');
diff --git a/node_modules/@multiformats/multiaddr/dist/src/ip.js.map b/node_modules/@multiformats/multiaddr/dist/src/ip.js.map
index b738c02..fa00dc9 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/ip.js.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/ip.js.map
@@ -1 +1 @@
-{"version":3,"file":"ip.js","sourceRoot":"","sources":["../../src/ip.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"ip.js","sourceRoot":"","sources":["../../src/ip.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts
index 2374db5..eb03174 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts
+++ b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts
@@ -6,9 +6,9 @@ export declare const symbol: unique symbol;
  */
 export declare class Multiaddr implements MultiaddrInterface {
     #private;
-    bytes: Uint8Array;
     [symbol]: boolean;
     constructor(addr?: MultiaddrInput);
+    get bytes(): Uint8Array;
     toString(): string;
     toJSON(): string;
     toOptions(): MultiaddrObject;
diff --git a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts.map b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts.map
index 7149319..63e46de 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"multiaddr.d.ts","sourceRoot":"","sources":["../../src/multiaddr.ts"],"names":[],"mappings":"AAQA,OAAO,KAAK,EAAE,cAAc,EAAE,SAAS,IAAI,kBAAkB,EAAE,eAAe,EAAE,QAAQ,EAAsB,WAAW,EAAE,cAAc,EAAE,MAAM,YAAY,CAAA;AAE7J,QAAA,MAAM,OAAO,eAA2C,CAAA;AACxD,eAAO,MAAM,MAAM,eAAqD,CAAA;AAgBxE;;GAEG;AACH,qBAAa,SAAU,YAAW,kBAAkB;;IAC3C,KAAK,EAAE,UAAU,CAAA;IAMxB,CAAC,MAAM,CAAC,EAAE,OAAO,CAAO;gBAEX,IAAI,CAAC,EAAE,cAAc;IA2BlC,QAAQ,IAAK,MAAM;IAInB,MAAM,IAAK,MAAM;IAIjB,SAAS,IAAK,eAAe;IAqD7B,MAAM,IAAK,QAAQ,EAAE;IAIrB,UAAU,IAAK,MAAM,EAAE;IAIvB,UAAU,IAAK,MAAM,EAAE;IAIvB,MAAM,IAAK,KAAK,CAAC,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;IAUvC,YAAY,IAAK,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IAUzC,WAAW,CAAE,IAAI,EAAE,cAAc,GAAG,SAAS;IAK7C,WAAW,CAAE,IAAI,EAAE,SAAS,GAAG,MAAM,GAAG,SAAS;IAUjD,eAAe,CAAE,IAAI,EAAE,MAAM,GAAG,SAAS;IAUzC,SAAS,IAAK,MAAM,GAAG,IAAI;IAqC3B,OAAO,IAAK,MAAM,GAAG,IAAI;IAIzB,MAAM,CAAE,IAAI,EAAE;QAAE,KAAK,EAAE,UAAU,CAAA;KAAE,GAAG,OAAO;IAIvC,OAAO,CAAE,OAAO,CAAC,EAAE,cAAc,GAAG,OAAO,CAAC,kBAAkB,EAAE,CAAC;IAkBvE,WAAW,IAAK,WAAW;IAc3B,kBAAkB,CAAE,IAAI,CAAC,EAAE,SAAS,GAAG,OAAO;IAgB9C;;;;;;;;;;;OAWG;IACH,CAAC,OAAO,CAAC,IAAK,MAAM;CAGrB"}
\ No newline at end of file
+{"version":3,"file":"multiaddr.d.ts","sourceRoot":"","sources":["../../src/multiaddr.ts"],"names":[],"mappings":"AASA,OAAO,KAAK,EAAE,cAAc,EAAE,SAAS,IAAI,kBAAkB,EAAE,eAAe,EAAE,QAAQ,EAAsB,WAAW,EAAE,cAAc,EAAE,MAAM,YAAY,CAAA;AAE7J,QAAA,MAAM,OAAO,eAA2C,CAAA;AACxD,eAAO,MAAM,MAAM,eAAqD,CAAA;AAgBxE;;GAEG;AACH,qBAAa,SAAU,YAAW,kBAAkB;;IAOlD,CAAC,MAAM,CAAC,EAAE,OAAO,CAAO;gBAEX,IAAI,CAAC,EAAE,cAAc;IAyBlC,IAAI,KAAK,IAAK,UAAU,CAcvB;IAED,QAAQ,IAAK,MAAM;IAkDnB,MAAM,IAAK,MAAM;IAIjB,SAAS,IAAK,eAAe;IAqD7B,MAAM,IAAK,QAAQ,EAAE;IAIrB,UAAU,IAAK,MAAM,EAAE;IAIvB,UAAU,IAAK,MAAM,EAAE;IAIvB,MAAM,IAAK,KAAK,CAAC,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;IAUvC,YAAY,IAAK,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IAUzC,WAAW,CAAE,IAAI,EAAE,cAAc,GAAG,SAAS;IAS7C,WAAW,CAAE,IAAI,EAAE,SAAS,GAAG,MAAM,GAAG,SAAS;IAYjD,eAAe,CAAE,IAAI,EAAE,MAAM,GAAG,SAAS;IAUzC,SAAS,IAAK,MAAM,GAAG,IAAI;IAqC3B,OAAO,IAAK,MAAM,GAAG,IAAI;IAQzB,MAAM,CAAE,IAAI,EAAE;QAAE,KAAK,EAAE,UAAU,CAAA;KAAE,GAAG,OAAO;IAIvC,OAAO,CAAE,OAAO,CAAC,EAAE,cAAc,GAAG,OAAO,CAAC,kBAAkB,EAAE,CAAC;IAkBvE,WAAW,IAAK,WAAW;IAc3B,kBAAkB,CAAE,IAAI,CAAC,EAAE,SAAS,GAAG,OAAO;IAgB9C;;;;;;;;;;;OAWG;IACH,CAAC,OAAO,CAAC,IAAK,MAAM;CAGrB"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js
index c8c5e49..521669f 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js
@@ -3,7 +3,7 @@ import { base58btc } from 'multiformats/bases/base58';
 import { CID } from 'multiformats/cid';
 import { equals as uint8ArrayEquals } from 'uint8arrays/equals';
 import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
-import { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';
+import { bytesToMultiaddrParts, bytesToStringTuples, bytesToTuples, stringToMultiaddrParts, stringToStringTuples, stringToTuples, tuplesToBytes } from './codec.js';
 import { getProtocol, names } from './protocols-table.js';
 import { isMultiaddr, multiaddr, resolvers } from './index.js';
 const inspect = Symbol.for('nodejs.util.inspect.custom');
@@ -24,7 +24,7 @@ class NoAvailableResolverError extends Error {
  * Creates a {@link Multiaddr} from a {@link MultiaddrInput}
  */
 export class Multiaddr {
-    bytes;
+    #bytes;
     #string;
     #tuples;
     #stringTuples;
@@ -32,33 +32,83 @@ export class Multiaddr {
     [symbol] = true;
     constructor(addr) {
         // default
-        if (addr == null) {
-            addr = '';
+        if (addr == null || addr === '') {
+            addr = '/';
         }
-        let parts;
         if (addr instanceof Uint8Array) {
-            parts = bytesToMultiaddrParts(addr);
+            this.#bytes = addr;
         }
         else if (typeof addr === 'string') {
-            if (addr.length > 0 && addr.charAt(0) !== '/') {
+            if (addr.charAt(0) !== '/') {
                 throw new Error(`multiaddr "${addr}" must start with a "/"`);
             }
-            parts = stringToMultiaddrParts(addr);
+            this.#string = addr;
         }
         else if (isMultiaddr(addr)) { // Multiaddr
-            parts = bytesToMultiaddrParts(addr.bytes);
+            this.#bytes = addr.bytes;
+            this.#string = addr.toString();
+            this.#tuples = addr.tuples();
+            this.#stringTuples = addr.stringTuples();
+            this.#path = addr.getPath();
         }
         else {
             throw new Error('addr must be a string, Buffer, or another Multiaddr');
         }
-        this.bytes = parts.bytes;
+    }
+    get bytes() {
+        if (this.#bytes == null) {
+            if (this.#string == null) {
+                throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr');
+            }
+            const parts = stringToMultiaddrParts(this.#string);
+            this.#bytes = parts.bytes;
+            this.#tuples = parts.tuples;
+            this.#stringTuples = parts.stringTuples;
+            this.#path = parts.path;
+        }
+        return this.#bytes;
+    }
+    toString() {
+        if (this.#string == null) {
+            if (this.#bytes == null) {
+                throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr');
+            }
+            const parts = bytesToMultiaddrParts(this.#bytes);
+            this.#string = parts.string;
+            this.#tuples = parts.tuples;
+            this.#stringTuples = parts.stringTuples;
+            this.#path = parts.path;
+        }
+        return this.#string === '' ? '/' : this.#string;
+    }
+    #populate() {
+        let parts;
+        if (this.#string != null) {
+            parts = stringToMultiaddrParts(this.#string);
+        }
+        else if (this.#bytes != null) {
+            parts = bytesToMultiaddrParts(this.#bytes);
+        }
+        else {
+            throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr');
+        }
         this.#string = parts.string;
+        this.#bytes = parts.bytes;
         this.#tuples = parts.tuples;
         this.#stringTuples = parts.stringTuples;
         this.#path = parts.path;
     }
-    toString() {
-        return this.#string;
+    #getTuples() {
+        if (this.#tuples == null) {
+            this.#populate();
+        }
+        return this.#tuples ?? [];
+    }
+    #getStringTuples() {
+        if (this.#stringTuples == null) {
+            this.#populate();
+        }
+        return this.#stringTuples ?? [];
     }
     toJSON() {
         return this.toString();
@@ -108,16 +158,16 @@ export class Multiaddr {
         return opts;
     }
     protos() {
-        return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)));
+        return this.#getTuples().map(([code]) => Object.assign({}, getProtocol(code)));
     }
     protoCodes() {
-        return this.#tuples.map(([code]) => code);
+        return this.#getTuples().map(([code]) => code);
     }
     protoNames() {
-        return this.#tuples.map(([code]) => getProtocol(code).name);
+        return this.#getTuples().map(([code]) => getProtocol(code).name);
     }
     tuples() {
-        return this.#tuples.map(([code, value]) => {
+        return this.#getTuples().map(([code, value]) => {
             if (value == null) {
                 return [code];
             }
@@ -125,7 +175,7 @@ export class Multiaddr {
         });
     }
     stringTuples() {
-        return this.#stringTuples.map(([code, value]) => {
+        return this.#getStringTuples().map(([code, value]) => {
             if (value == null) {
                 return [code];
             }
@@ -134,13 +184,16 @@ export class Multiaddr {
     }
     encapsulate(addr) {
         addr = new Multiaddr(addr);
-        return new Multiaddr(this.toString() + addr.toString());
+        return new Multiaddr(tuplesToBytes([
+            ...this.tuples(),
+            ...addr.tuples()
+        ]));
     }
     decapsulate(addr) {
-        const addrString = addr.toString();
+        const addrString = new Multiaddr(addr).toString();
         const s = this.toString();
         const i = s.lastIndexOf(addrString);
-        if (i < 0) {
+        if (i < 0 || (addrString === '/' && s !== '/')) {
             throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);
         }
         return new Multiaddr(s.slice(0, i));
@@ -186,7 +239,10 @@ export class Multiaddr {
         }
     }
     getPath() {
-        return this.#path;
+        if (this.#path === undefined) {
+            this.#populate();
+        }
+        return this.#path ?? null;
     }
     equals(addr) {
         return uint8ArrayEquals(this.bytes, addr.bytes);
@@ -241,7 +297,7 @@ export class Multiaddr {
      * ```
      */
     [inspect]() {
-        return `Multiaddr(${this.#string})`;
+        return `Multiaddr(${this.toString()})`;
     }
 }
 //# sourceMappingURL=multiaddr.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js.map b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js.map
index 0c578e3..691d6d0 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js.map
+++ b/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js.map
@@ -1 +1 @@
-{"version":3,"file":"multiaddr.js","sourceRoot":"","sources":["../../src/multiaddr.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"multiaddr.js","sourceRoot":"","sources":["../../src/multiaddr.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/codec.spec.d.ts b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.d.ts
new file mode 100644
index 0000000..633c753
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=codec.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/codec.spec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.d.ts.map
new file mode 100644
index 0000000..9645478
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"codec.spec.d.ts","sourceRoot":"","sources":["../../test/codec.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/codec.spec.js b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.js
new file mode 100644
index 0000000..0d068d7
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.js
@@ -0,0 +1,32 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import * as codec from '../src/codec.js';
+import { convertToBytes } from '../src/convert.js';
+describe('codec', () => {
+    describe('.stringToMultiaddrParts', () => {
+        it('throws on invalid addresses', () => {
+            expect(() => codec.stringToMultiaddrParts('/ip4/0.0.0.0/ip4')).to.throw(/invalid address/);
+        });
+    });
+    describe('.stringToMultiaddrParts', () => {
+        const testCases = [
+            { name: 'handles non array tuples', string: '/ip4/0.0.0.0/utp', stringTuples: [[4, '0.0.0.0'], [302]], tuples: [[4, Uint8Array.from([0, 0, 0, 0])], [302]], path: null },
+            { name: 'handle not null path', string: '/unix/tmp/p2p.sock', stringTuples: [[400, '/tmp/p2p.sock']], tuples: [[400, convertToBytes(400, '/tmp/p2p.sock')]], path: '/tmp/p2p.sock' }
+        ];
+        for (const { name, string, stringTuples, tuples, path } of testCases) {
+            it(name, () => {
+                const parts = codec.stringToMultiaddrParts(string);
+                expect(parts.stringTuples).to.eql(stringTuples);
+                expect(parts.tuples).to.eql(tuples);
+                expect(parts.path).to.eql(path);
+            });
+        }
+    });
+    describe('.bytesToTuples', () => {
+        it('throws on invalid address', () => {
+            expect(() => codec.bytesToTuples(codec.tuplesToBytes([[4, uint8ArrayFromString('192')]]))).to.throw(/Invalid address/);
+        });
+    });
+});
+//# sourceMappingURL=codec.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/codec.spec.js.map b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.js.map
new file mode 100644
index 0000000..c09453c
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/codec.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"codec.spec.js","sourceRoot":"","sources":["../../test/codec.spec.ts"],"names":[],"mappings":"AAAA,sBAAsB;AACtB,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,UAAU,IAAI,oBAAoB,EAAE,MAAM,yBAAyB,CAAA;AAC5E,OAAO,KAAK,KAAK,MAAM,iBAAiB,CAAA;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAA;AAGlD,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,CACJ,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CACvD,CAAC,EAAE,CAAC,KAAK,CACR,iBAAiB,CAClB,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,MAAM,SAAS,GAA+G;YAC5H,EAAE,IAAI,EAAE,0BAA0B,EAAE,MAAM,EAAE,kBAAkB,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE;YACxK,EAAE,IAAI,EAAE,sBAAsB,EAAE,MAAM,EAAE,oBAAoB,EAAE,YAAY,EAAE,CAAC,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE;SACrL,CAAA;QAED,KAAK,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,SAAS,EAAE,CAAC;YACrE,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;gBACZ,MAAM,KAAK,GAAG,KAAK,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAA;gBAClD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;gBAC/C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;gBACnC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACjC,CAAC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CACJ,GAAG,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CACnF,CAAC,EAAE,CAAC,KAAK,CACR,iBAAiB,CAClB,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/convert.spec.d.ts b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.d.ts
new file mode 100644
index 0000000..be67782
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=convert.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/convert.spec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.d.ts.map
new file mode 100644
index 0000000..236fda5
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"convert.spec.d.ts","sourceRoot":"","sources":["../../test/convert.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/convert.spec.js b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.js
new file mode 100644
index 0000000..abc689a
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.js
@@ -0,0 +1,72 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import * as convert from '../src/convert.js';
+import { multiaddr } from '../src/index.js';
+describe('convert', () => {
+    it('handles ip4 buffers', () => {
+        expect(convert.convertToString('ip4', uint8ArrayFromString('c0a80001', 'base16'))).to.eql('192.168.0.1');
+    });
+    it('handles ip6 buffers', () => {
+        expect(convert.convertToString('ip6', uint8ArrayFromString('abcd0000000100020003000400050006', 'base16'))).to.eql('abcd:0:1:2:3:4:5:6');
+    });
+    it('handles ipv6 strings', () => {
+        expect(convert.convertToBytes('ip6', 'ABCD::1:2:3:4:5:6')).to.eql(uint8ArrayFromString('ABCD0000000100020003000400050006', 'base16upper'));
+    });
+    it('handles ip4 strings', () => {
+        expect(convert.convertToBytes('ip4', '192.168.0.1')).to.eql(uint8ArrayFromString('c0a80001', 'base16'));
+    });
+    it('throws on invalid ip4 conversion', () => {
+        expect(() => convert.convertToBytes('ip4', '555.168.0.1')).to.throw(/invalid ip address/);
+    });
+    it('throws on invalid ip6 conversion', () => {
+        expect(() => convert.convertToBytes('ip6', 'FFFF::GGGG')).to.throw(/invalid ip address/);
+    });
+    describe('.toBytes', () => {
+        it('defaults to hex conversion', () => {
+            expect(convert.convertToBytes('ws', 'c0a80001')).to.eql(Uint8Array.from([192, 168, 0, 1]));
+        });
+    });
+    describe('.toString', () => {
+        it('throws on inconsistent ipfs links', () => {
+            const valid = uint8ArrayFromString('03221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a68911c0b', 'base16');
+            expect(() => convert.convertToString('ipfs', valid.slice(0, valid.length - 8))).to.throw(/inconsistent length/);
+        });
+        it('defaults to hex conversion', () => {
+            expect(convert.convertToString('ws', Uint8Array.from([192, 168, 0, 1]))).to.eql('c0a80001');
+        });
+        it('respects byteoffset during conversion', () => {
+            const bytes = convert.convertToBytes('sctp', '1234');
+            const buffer = new Uint8Array(bytes.byteLength + 5);
+            buffer.set(bytes, 5);
+            expect(convert.convertToString('sctp', buffer.subarray(5))).to.equal('1234');
+        });
+    });
+    it('can round-trip certhash, though encoding base may change', () => {
+        const myCertFingerprint = {
+            algorithm: 'sha-256',
+            value: 'f4:32:a0:45:34:62:85:e0:d8:d7:75:36:84:72:8e:b2:aa:9e:71:64:e4:eb:fe:06:51:64:42:64:fe:04:a8:d0'
+        };
+        const mb = 'f' + myCertFingerprint.value.replaceAll(':', '');
+        const bytes = convert.convertToBytes('certhash', mb);
+        const outcome = convert.convertToString(466, bytes);
+        expect(outcome).to.equal('u9DKgRTRiheDY13U2hHKOsqqecWTk6_4GUWRCZP4EqNA');
+        const bytesOut = convert.convertToBytes(466, outcome);
+        expect(bytesOut.toString()).to.equal(bytes.toString());
+    });
+    it('convertToIpNet ip4', function () {
+        const ipnet = convert.convertToIpNet(multiaddr('/ip4/192.0.2.0/ipcidr/24'));
+        expect(ipnet.toString()).equal('192.0.2.0/24');
+    });
+    it('convertToIpNet ip6', function () {
+        const ipnet = convert.convertToIpNet(multiaddr('/ip6/2001:0db8:85a3:0000:0000:8a2e:0370:7334/ipcidr/64'));
+        expect(ipnet.toString()).equal('2001:0db8:85a3:0000:0000:0000:0000:0000/64');
+    });
+    it('convertToIpNet not ipcidr', function () {
+        expect(() => convert.convertToIpNet(multiaddr('/ip6/2001:0db8:85a3:0000:0000:8a2e:0370:7334/tcp/64'))).to.throw();
+    });
+    it('convertToIpNet not ipv6', function () {
+        expect(() => convert.convertToIpNet(multiaddr('/dns6/foo.com/ipcidr/64'))).to.throw();
+    });
+});
+//# sourceMappingURL=convert.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/convert.spec.js.map b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.js.map
new file mode 100644
index 0000000..261bd4f
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/convert.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"convert.spec.js","sourceRoot":"","sources":["../../test/convert.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.d.ts b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.d.ts
new file mode 100644
index 0000000..e82d66f
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=multiaddr-filter.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.d.ts.map
new file mode 100644
index 0000000..0fb47e0
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"multiaddr-filter.spec.d.ts","sourceRoot":"","sources":["../../../test/filter/multiaddr-filter.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.js b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.js
new file mode 100644
index 0000000..ec7f58f
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.js
@@ -0,0 +1,26 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { MultiaddrFilter, multiaddr } from '../../src/index.js';
+describe('MultiaddrFilter', () => {
+    const cases = [
+        ['/ip4/192.168.10.10/ipcidr/24', '/ip4/192.168.10.2/tcp/60', true],
+        [multiaddr('/ip4/192.168.10.10/ipcidr/24'), '/ip4/192.168.10.2/tcp/60', true],
+        [multiaddr('/ip4/192.168.10.10/ipcidr/24').bytes, '/ip4/192.168.10.2/tcp/60', true],
+        ['/ip4/192.168.10.10/ipcidr/24', '/ip4/192.168.10.2/udp/60', true],
+        ['/ip4/192.168.10.10/ipcidr/24', multiaddr('/ip4/192.168.11.2/tcp/60'), false],
+        ['/ip4/192.168.10.10/ipcidr/24', null, false],
+        ['/ip4/192.168.10.10/ipcidr/24', multiaddr('/ip4/192.168.11.2/udp/60').bytes, false],
+        ['/ip4/192.168.10.10/ipcidr/24', '/ip4/192.168.11.2/udp/60', false],
+        ['/ip4/192.168.10.10/ipcidr/24', '/ip6/2001:db8:3333:4444:5555:6666:7777:8888/tcp/60', false],
+        ['/ip6/2001:db8:3333:4444:5555:6666:7777:8888/ipcidr/60', '/ip6/2001:0db8:3333:4440:0000:0000:0000:0000/tcp/60', true],
+        ['/ip6/2001:db8:3333:4444:5555:6666:7777:8888/ipcidr/60', '/ip6/2001:0db8:3333:4450:0000:0000:0000:0000/tcp/60', false],
+        ['/ip6/2001:db8:3333:4444:5555:6666:7777:8888/ipcidr/128', '/ip6/2001:db8:3333:4444:5555:6666:7777:8888/tcp/60', true],
+        ['/ip6/2001:db8:3333:4444:5555:6666:7777:8888/ipcidr/128', '/ip6/2001:db8:3333:4444:5555:6666:7777:8880/tcp/60', false]
+    ];
+    cases.forEach(([cidr, ip, result]) => {
+        it(`multiaddr filter cidr=${cidr} ip=${ip} result=${String(result)}`, function () {
+            expect(new MultiaddrFilter(cidr).contains(ip)).to.be.equal(result);
+        });
+    });
+});
+//# sourceMappingURL=multiaddr-filter.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.js.map b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.js.map
new file mode 100644
index 0000000..f9932fd
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/filter/multiaddr-filter.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"multiaddr-filter.spec.js","sourceRoot":"","sources":["../../../test/filter/multiaddr-filter.spec.ts"],"names":[],"mappings":"AAAA,sBAAsB;AACtB,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAA;AAG/D,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,MAAM,KAAK,GAAqD;QAC9D,CAAC,8BAA8B,EAAE,0BAA0B,EAAE,IAAI,CAAC;QAClE,CAAC,SAAS,CAAC,8BAA8B,CAAC,EAAE,0BAA0B,EAAE,IAAI,CAAC;QAC7E,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC,KAAK,EAAE,0BAA0B,EAAE,IAAI,CAAC;QACnF,CAAC,8BAA8B,EAAE,0BAA0B,EAAE,IAAI,CAAC;QAClE,CAAC,8BAA8B,EAAE,SAAS,CAAC,0BAA0B,CAAC,EAAE,KAAK,CAAC;QAC9E,CAAC,8BAA8B,EAAE,IAAI,EAAE,KAAK,CAAC;QAC7C,CAAC,8BAA8B,EAAE,SAAS,CAAC,0BAA0B,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC;QACpF,CAAC,8BAA8B,EAAE,0BAA0B,EAAE,KAAK,CAAC;QACnE,CAAC,8BAA8B,EAAE,oDAAoD,EAAE,KAAK,CAAC;QAC7F,CAAC,uDAAuD,EAAE,qDAAqD,EAAE,IAAI,CAAC;QACtH,CAAC,uDAAuD,EAAE,qDAAqD,EAAE,KAAK,CAAC;QACvH,CAAC,wDAAwD,EAAE,oDAAoD,EAAE,IAAI,CAAC;QACtH,CAAC,wDAAwD,EAAE,oDAAoD,EAAE,KAAK,CAAC;KACxH,CAAA;IAED,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE;QACnC,EAAE,CAAC,yBAAyB,IAAI,OAAO,EAAE,WAAW,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;YACpE,MAAM,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QACpE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/index.spec.d.ts b/node_modules/@multiformats/multiaddr/dist/test/index.spec.d.ts
new file mode 100644
index 0000000..b37c2d2
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/index.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=index.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/index.spec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/test/index.spec.d.ts.map
new file mode 100644
index 0000000..5c89780
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/index.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.spec.d.ts","sourceRoot":"","sources":["../../test/index.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/index.spec.js b/node_modules/@multiformats/multiaddr/dist/test/index.spec.js
new file mode 100644
index 0000000..79cd29d
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/index.spec.js
@@ -0,0 +1,795 @@
+/* eslint max-nested-callbacks: ["error", 8] */
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import { multiaddr, isMultiaddr, fromNodeAddress, isName, fromTuples, fromStringTuples } from '../src/index.js';
+import { codes } from '../src/protocols-table.js';
+describe('construction', () => {
+    let udpAddr;
+    it('create multiaddr', () => {
+        udpAddr = multiaddr('/ip4/127.0.0.1/udp/1234');
+        expect(isMultiaddr(udpAddr)).to.equal(true);
+    });
+    it('clone multiaddr', () => {
+        const udpAddrClone = multiaddr(udpAddr);
+        expect(udpAddrClone !== udpAddr).to.equal(true);
+    });
+    it('reconstruct with buffer', () => {
+        expect(multiaddr(udpAddr.bytes).bytes === udpAddr.bytes).to.equal(true, 'copied bytes');
+        expect(multiaddr(udpAddr.bytes).bytes).to.deep.equal(udpAddr.bytes);
+    });
+    it('reconstruct with string', () => {
+        expect(multiaddr(udpAddr.toString()).bytes === udpAddr.bytes).to.equal(false);
+        expect(multiaddr(udpAddr.toString()).bytes).to.deep.equal(udpAddr.bytes);
+    });
+    it('reconstruct with object', () => {
+        expect(multiaddr(udpAddr).bytes === udpAddr.bytes).to.equal(true, 'copied bytes');
+        expect(multiaddr(udpAddr).bytes).to.deep.equal(udpAddr.bytes);
+    });
+    it('reconstruct with JSON', () => {
+        expect(multiaddr(JSON.parse(JSON.stringify(udpAddr))).bytes === udpAddr.bytes).to.equal(false);
+        expect(multiaddr(JSON.parse(JSON.stringify(udpAddr))).bytes).to.deep.equal(udpAddr.bytes);
+    });
+    it('empty construct still works', () => {
+        expect(multiaddr('').toString()).to.equal('/');
+    });
+    it('null/undefined construct still works', () => {
+        expect(multiaddr().toString()).to.equal('/');
+        expect(multiaddr(null).toString()).to.equal('/');
+        expect(multiaddr(undefined).toString()).to.equal('/');
+    });
+    it('throws on truthy non string or buffer', () => {
+        const errRegex = /addr must be a string/;
+        // @ts-expect-error incorrect parameters
+        expect(() => multiaddr({})).to.throw(errRegex);
+        // @ts-expect-error incorrect parameters
+        expect(() => multiaddr([])).to.throw(errRegex);
+        // @ts-expect-error incorrect parameters
+        expect(() => multiaddr(138)).to.throw(errRegex);
+        // @ts-expect-error incorrect parameters
+        expect(() => multiaddr(true)).to.throw(errRegex);
+    });
+    it('throws on falsy non string or buffer', () => {
+        const errRegex = /addr must be a string/;
+        // @ts-expect-error incorrect parameters
+        expect(() => multiaddr(NaN)).to.throw(errRegex);
+        // @ts-expect-error incorrect parameters
+        expect(() => multiaddr(false)).to.throw(errRegex);
+        // @ts-expect-error incorrect parameters
+        expect(() => multiaddr(0)).to.throw(errRegex);
+    });
+});
+describe('requiring varint', () => {
+    let uTPAddr;
+    it('create multiaddr', () => {
+        uTPAddr = multiaddr('/ip4/127.0.0.1/udp/1234/utp');
+        expect(isMultiaddr(uTPAddr)).to.equal(true);
+    });
+    it('clone multiaddr', () => {
+        const uTPAddrClone = multiaddr(uTPAddr);
+        expect(uTPAddrClone !== uTPAddr).to.equal(true);
+    });
+    it('reconstruct with buffer', () => {
+        expect(multiaddr(uTPAddr.bytes).bytes === uTPAddr.bytes).to.equal(true, 'copied bytes');
+        expect(multiaddr(uTPAddr.bytes).bytes).to.deep.equal(uTPAddr.bytes);
+    });
+    it('reconstruct with string', () => {
+        expect(multiaddr(uTPAddr.toString()).bytes === uTPAddr.bytes).to.equal(false);
+        expect(multiaddr(uTPAddr.toString()).bytes).to.deep.equal(uTPAddr.bytes);
+    });
+    it('reconstruct with object', () => {
+        expect(multiaddr(uTPAddr).bytes === uTPAddr.bytes).to.equal(true, 'copied bytes');
+        expect(multiaddr(uTPAddr).bytes).to.deep.equal(uTPAddr.bytes);
+    });
+    it('empty construct still works', () => {
+        expect(multiaddr('').toString()).to.equal('/');
+    });
+});
+describe('manipulation', () => {
+    it('basic', () => {
+        const udpAddrStr = '/ip4/127.0.0.1/udp/1234';
+        const udpAddrBuf = uint8ArrayFromString('047f000001910204d2', 'base16');
+        const udpAddr = multiaddr(udpAddrStr);
+        expect(udpAddr.toString()).to.equal(udpAddrStr);
+        expect(udpAddr.bytes).to.deep.equal(udpAddrBuf);
+        expect(udpAddr.protoCodes()).to.deep.equal([4, 273]);
+        expect(udpAddr.protoNames()).to.deep.equal(['ip4', 'udp']);
+        expect(udpAddr.protos()).to.deep.equal([codes[4], codes[273]]);
+        expect(udpAddr.protos()[0] === codes[4]).to.equal(false);
+        const udpAddrbytes2 = udpAddr.encapsulate('/udp/5678');
+        expect(udpAddrbytes2.toString()).to.equal('/ip4/127.0.0.1/udp/1234/udp/5678');
+        expect(udpAddrbytes2.decapsulate('/udp').toString()).to.equal('/ip4/127.0.0.1/udp/1234');
+        expect(udpAddrbytes2.decapsulate('/ip4').toString()).to.equal('/');
+        expect(function () { udpAddr.decapsulate('/').toString(); }).to.throw();
+        expect(multiaddr('/').encapsulate(udpAddr).toString()).to.equal(udpAddr.toString());
+        expect(multiaddr('/').decapsulate('/').toString()).to.equal('/');
+    });
+    it('p2p', () => {
+        const ipfsAddr = multiaddr('/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC');
+        const ip6Addr = multiaddr('/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095');
+        const tcpAddr = multiaddr('/tcp/8000');
+        const webAddr = multiaddr('/ws');
+        expect(multiaddr('/')
+            .encapsulate(ip6Addr)
+            .encapsulate(tcpAddr)
+            .encapsulate(webAddr)
+            .encapsulate(ipfsAddr)
+            .toString()).to.equal([
+            ip6Addr.toString(),
+            tcpAddr.toString(),
+            webAddr.toString(),
+            ipfsAddr.toString()
+        ].join(''));
+        expect(multiaddr('/')
+            .encapsulate(ip6Addr)
+            .encapsulate(tcpAddr)
+            .encapsulate(webAddr)
+            .encapsulate(ipfsAddr)
+            .decapsulate(ipfsAddr)
+            .toString()).to.equal([
+            ip6Addr.toString(),
+            tcpAddr.toString(),
+            webAddr.toString()
+        ].join(''));
+        expect(multiaddr('/')
+            .encapsulate(ip6Addr)
+            .encapsulate(tcpAddr)
+            .encapsulate(ipfsAddr)
+            .encapsulate(webAddr)
+            .decapsulate(webAddr)
+            .toString()).to.equal([
+            ip6Addr.toString(),
+            tcpAddr.toString(),
+            ipfsAddr.toString()
+        ].join(''));
+    });
+});
+describe('variants', () => {
+    it('ip4', () => {
+        const str = '/ip4/127.0.0.1';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 + tcp', () => {
+        const str = '/ip4/127.0.0.1/tcp/5000';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + tcp', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/tcp/5000';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 + udp', () => {
+        const str = '/ip4/127.0.0.1/udp/5000';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + udp', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/udp/5000';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 + p2p', () => {
+        const str = '/ip4/127.0.0.1/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC/tcp/1234';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + p2p', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC/tcp/1234';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + ip6zone', () => {
+        const str = '/ip6zone/x/ip6/fe80::1';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it.skip('ip4 + dccp', () => { });
+    it.skip('ip6 + dccp', () => { });
+    it.skip('ip4 + sctp', () => { });
+    it.skip('ip6 + sctp', () => { });
+    it('ip4 + udp + utp', () => {
+        const str = '/ip4/127.0.0.1/udp/5000/utp';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + udp + utp', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/udp/5000/utp';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.protoNames());
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 + tcp + http', () => {
+        const str = '/ip4/127.0.0.1/tcp/8000/http';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 + tcp + unix', () => {
+        const str = '/ip4/127.0.0.1/tcp/80/unix/a/b/c/d/e/f';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + tcp + http', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/tcp/8000/http';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + tcp + unix', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/tcp/8000/unix/a/b/c/d/e/f';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 + tcp + https', () => {
+        const str = '/ip4/127.0.0.1/tcp/8000/https';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + tcp + https', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/tcp/8000/https';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 + tcp + websockets', () => {
+        const str = '/ip4/127.0.0.1/tcp/8000/ws';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + tcp + websockets', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/tcp/8000/ws';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + tcp + websockets + p2p', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/tcp/8000/ws/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + udp + quic + p2p', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/udp/4001/quic/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + udp + quic-v1 + p2p', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/udp/4001/quic-v1/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 webtransport', () => {
+        const str = '/ip6/2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095/udp/4001/quic-v1/webtransport';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip4 webtransport', () => {
+        const str = '/ip4/1.2.3.4/udp/4001/quic-v1/webtransport';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('webtransport with certhash', () => {
+        const str = '/ip4/1.2.3.4/udp/4001/quic-v1/webtransport/certhash/uEiAkH5a4DPGKUuOBjYw0CgwjvcJCJMD2K_1aluKR_tpevQ/certhash/uEiAfbgiymPP2_nX7Dgir8B4QkksjHp2lVuJZz0F79Be9JA/p2p/12D3KooWBdmLJjhpgJ9KZgLM3f894ff9xyBfPvPjFNn7MKJpyrC2';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('ip6 + ip6zone + udp + quic', () => {
+        const str = '/ip6zone/x/ip6/fe80::1/udp/1234/quic';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('unix', () => {
+        const str = '/unix/a/b/c/d/e';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('p2p', () => {
+        const str = '/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('p2p', () => {
+        const str = '/p2p/bafzbeidt255unskpefjmqb2rc27vjuyxopkxgaylxij6pw35hhys4vnyp4';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal('/p2p/bafzbeidt255unskpefjmqb2rc27vjuyxopkxgaylxij6pw35hhys4vnyp4');
+    });
+    it('tls', () => {
+        const str = '/ip4/127.0.0.1/tcp/9090/tls/ws';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('sni', () => {
+        const str = '/ip4/127.0.0.1/tcp/9090/tls/sni/example.com/ws';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('http-path', () => {
+        const str = '/ip4/127.0.0.1/tcp/9090/tls/http-path/tmp%2Ffoo%2F..%2Fbar';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        const parts = addr.tuples();
+        const lastPart = parts[parts.length - 1];
+        const httpPath = new TextDecoder().decode(lastPart[1]?.subarray(1)); // skip the first byte since it's the length prefix
+        expect(httpPath).to.equal('tmp/foo/../bar');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('onion', () => {
+        const str = '/onion/timaq4ygg2iegci7:1234';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('onion3', () => {
+        const str = '/onion3/vww6ybal4bd7szmgncyruucpgfkqahzddi37ktceo3ah7ngmcopnpyyd:1234';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('p2p-circuit', () => {
+        const str = '/p2p-circuit/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('p2p-circuit p2p', () => {
+        const str = '/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC/p2p-circuit';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('p2p-webrtc-star', () => {
+        const str = '/ip4/127.0.0.1/tcp/9090/ws/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('p2p-webrtc-direct', () => {
+        const str = '/ip4/127.0.0.1/tcp/9090/http/p2p-webrtc-direct';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('p2p-websocket-star', () => {
+        const str = '/ip4/127.0.0.1/tcp/9090/ws/p2p-websocket-star';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+    it('memory + p2p', () => {
+        const str = '/memory/test/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC';
+        const addr = multiaddr(str);
+        expect(addr).to.have.property('bytes');
+        expect(addr.toString()).to.equal(str);
+    });
+});
+describe('helpers', () => {
+    describe('.toOptions', () => {
+        it('returns a well formed options object', () => {
+            expect(multiaddr('/ip4/0.0.0.0/tcp/1234').toOptions())
+                .to.eql({
+                family: 4,
+                host: '0.0.0.0',
+                transport: 'tcp',
+                port: 1234
+            });
+        });
+        it('returns an options object from a DNS addr', () => {
+            expect(multiaddr('/dns4/google.net/tcp/8000').toOptions())
+                .to.eql({
+                family: 4,
+                host: 'google.net',
+                transport: 'tcp',
+                port: 8000
+            });
+        });
+        it('returns an options object from a DNS6 addr', () => {
+            expect(multiaddr('/dns6/google.net/tcp/8000').toOptions())
+                .to.eql({
+                family: 6,
+                host: 'google.net',
+                transport: 'tcp',
+                port: 8000
+            });
+        });
+        it('returns an options object from a DNS addr defaulting to https', () => {
+            expect(multiaddr('/dnsaddr/google.net').toOptions())
+                .to.eql({
+                family: 4,
+                host: 'google.net',
+                transport: 'tcp',
+                port: 443
+            });
+        });
+        it('returns an options object from a DNS addr with a PeerID defaulting to https', () => {
+            expect(multiaddr('/dnsaddr/google.net/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC').toOptions())
+                .to.eql({
+                family: 4,
+                host: 'google.net',
+                transport: 'tcp',
+                port: 443
+            });
+        });
+        it('returns an options object from an address with an ip6 zone', () => {
+            expect(multiaddr('/ip6zone/x/ip6/fe80::1/tcp/1234').toOptions()).to.be.eql({
+                family: 6,
+                host: 'fe80::1%x',
+                transport: 'tcp',
+                port: 1234
+            });
+        });
+    });
+    describe('.protos', () => {
+        it('returns a list of all protocols in the address', () => {
+            expect(multiaddr('/ip4/0.0.0.0/utp').protos())
+                .to.eql([{
+                    code: 4,
+                    name: 'ip4',
+                    path: false,
+                    size: 32,
+                    resolvable: false
+                }, {
+                    code: 302,
+                    name: 'utp',
+                    path: false,
+                    size: 0,
+                    resolvable: false
+                }]);
+        });
+        it('works with p2p', () => {
+            expect(multiaddr('/ip4/0.0.0.0/utp/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC').protos()).to.be.eql([{
+                    code: 4,
+                    name: 'ip4',
+                    path: false,
+                    size: 32,
+                    resolvable: false
+                }, {
+                    code: 302,
+                    name: 'utp',
+                    path: false,
+                    size: 0,
+                    resolvable: false
+                }, {
+                    code: 421,
+                    name: 'p2p',
+                    path: false,
+                    size: -1,
+                    resolvable: false
+                }]);
+        });
+        it('works with unix', () => {
+            expect(multiaddr('/ip4/0.0.0.0/tcp/8000/unix/tmp/p2p.sock').protos()).to.be.eql([{
+                    code: 4,
+                    name: 'ip4',
+                    path: false,
+                    size: 32,
+                    resolvable: false
+                }, {
+                    code: 6,
+                    name: 'tcp',
+                    path: false,
+                    size: 16,
+                    resolvable: false
+                }, {
+                    code: 400,
+                    name: 'unix',
+                    path: true,
+                    size: -1,
+                    resolvable: false
+                }]);
+        });
+        it('works with memory', () => {
+            expect(multiaddr('/memory/test/p2p/QmZR5a9AAXGqQF2ADqoDdGS8zvqv8n3Pag6TDDnTNMcFW6').protos()).to.be.eql([{
+                    code: 777,
+                    name: 'memory',
+                    path: false,
+                    size: -1,
+                    resolvable: false
+                }, {
+                    code: 421,
+                    name: 'p2p',
+                    path: false,
+                    size: -1,
+                    resolvable: false
+                }]);
+        });
+    });
+    describe('.tuples', () => {
+        it('returns the tuples', () => {
+            expect(multiaddr('/ip4/0.0.0.0/utp').tuples())
+                .to.eql([
+                [4, Uint8Array.from([0, 0, 0, 0])],
+                [302]
+            ]);
+        });
+        it('does not allow modifying parts', () => {
+            const ma = multiaddr('/ip4/0.0.0.0/tcp/1234');
+            const tuples = ma.tuples();
+            tuples[0][0] = 41;
+            expect(ma.toOptions()).to.have.property('family', 4);
+        });
+    });
+    describe('.stringTuples', () => {
+        it('returns the string partss', () => {
+            expect(multiaddr('/ip4/0.0.0.0/utp').stringTuples())
+                .to.eql([
+                [4, '0.0.0.0'],
+                [302]
+            ]);
+        });
+        it('does not allow modifying string parts', () => {
+            const ma = multiaddr('/ip4/0.0.0.0/tcp/1234');
+            const tuples = ma.stringTuples();
+            tuples[0][0] = 41;
+            expect(ma.toOptions()).to.have.property('family', 4);
+        });
+    });
+    describe('.decapsulate', () => {
+        it('throws on address with no matching subaddress', () => {
+            expect(() => multiaddr('/ip4/127.0.0.1').decapsulate('/ip4/198.168.0.0')).to.throw(/does not contain subaddress/);
+        });
+    });
+    describe('.decapsulateCode', () => {
+        it('removes the last occurrence of the code from the multiaddr', () => {
+            const relayTCP = multiaddr('/ip4/0.0.0.0/tcp/8080');
+            const relay = relayTCP.encapsulate('/p2p/QmZR5a9AAXGqQF2ADqoDdGS8zvqv8n3Pag6TDDnTNMcFW6/p2p-circuit');
+            const target = multiaddr('/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC');
+            const original = relay.encapsulate(target);
+            expect(original.decapsulateCode(421).toJSON()).to.eql(relay.toJSON());
+            expect(relay.decapsulateCode(421).toJSON()).to.eql(relayTCP.toJSON());
+        });
+        it('ignores missing codes', () => {
+            const tcp = multiaddr('/ip4/0.0.0.0/tcp/8080');
+            expect(tcp.decapsulateCode(421).toJSON()).to.eql(tcp.toJSON());
+        });
+    });
+    describe('.equals', () => {
+        it('returns true for equal addresses', () => {
+            const addr1 = multiaddr('/ip4/192.168.0.1');
+            const addr2 = multiaddr('/ip4/192.168.0.1');
+            expect(addr1.equals(addr2)).to.equal(true);
+        });
+        it('returns false for non equal addresses', () => {
+            const addr1 = multiaddr('/ip4/192.168.1.1');
+            const addr2 = multiaddr('/ip4/192.168.0.1');
+            expect(addr1.equals(addr2)).to.equal(false);
+        });
+    });
+    describe('.nodeAddress', () => {
+        it('throws on an invalid node address', () => {
+            expect(() => multiaddr('/ip4/192.168.0.1/utp').nodeAddress()).to.throw(/multiaddr must have a valid format/);
+        });
+        it('returns a node friendly address', () => {
+            expect(multiaddr('/ip4/192.168.0.1/tcp/1234').nodeAddress()).to.be.eql({
+                address: '192.168.0.1',
+                family: 4,
+                port: 1234
+            });
+        });
+        it('returns a node friendly address with dns', () => {
+            expect(multiaddr('/dns/wss0.bootstrap.libp2p.io/tcp/443').nodeAddress()).to.be.eql({
+                address: 'wss0.bootstrap.libp2p.io',
+                family: 4,
+                port: 443
+            });
+        });
+        it('returns a node friendly address with dns4', () => {
+            expect(multiaddr('/dns4/wss0.bootstrap.libp2p.io/tcp/443').nodeAddress()).to.be.eql({
+                address: 'wss0.bootstrap.libp2p.io',
+                family: 4,
+                port: 443
+            });
+        });
+        it('returns a node friendly address with dns6', () => {
+            expect(multiaddr('/dns6/wss0.bootstrap.libp2p.io/tcp/443').nodeAddress()).to.be.eql({
+                address: 'wss0.bootstrap.libp2p.io',
+                family: 6,
+                port: 443
+            });
+        });
+        it('returns a node friendly address with dnsaddr', () => {
+            expect(multiaddr('/dnsaddr/wss0.bootstrap.libp2p.io/tcp/443').nodeAddress()).to.be.eql({
+                address: 'wss0.bootstrap.libp2p.io',
+                family: 4,
+                port: 443
+            });
+        });
+        it('should transform a p2p dnsaddr without a tcp port into a node address', () => {
+            expect(multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN').nodeAddress()).to.be.eql({
+                address: 'bootstrap.libp2p.io',
+                family: 4,
+                port: 443
+            });
+        });
+        it('transforms an address with an ip6 zone', () => {
+            expect(multiaddr('/ip6zone/x/ip6/fe80::1/tcp/1234').nodeAddress()).to.be.eql({
+                address: 'fe80::1%x',
+                family: 6,
+                port: 1234
+            });
+        });
+        it('throws on an invalid format address when the addr is not prefixed with a /', () => {
+            expect(() => multiaddr('ip4/192.168.0.1/udp').nodeAddress()).to.throw(/must start with a/);
+        });
+    });
+    describe('.fromNodeAddress', () => {
+        it('throws on missing address object', () => {
+            expect(
+            // @ts-expect-error incorrect parameters
+            () => fromNodeAddress()).to.throw(/requires node address/);
+        });
+        it('throws on missing transport', () => {
+            expect(
+            // @ts-expect-error incorrect parameters
+            () => fromNodeAddress({ address: '0.0.0.0' })).to.throw(/requires transport protocol/);
+        });
+        it('parses a node address', () => {
+            expect(fromNodeAddress({
+                address: '192.168.0.1',
+                family: 4,
+                port: 1234
+            }, 'tcp').toString()).to.be.eql('/ip4/192.168.0.1/tcp/1234');
+        });
+        it('parses a node address with an ip6zone', () => {
+            expect(fromNodeAddress({
+                address: 'fe80::1%x',
+                family: 6,
+                port: 1234
+            }, 'tcp').toString()).to.be.eql('/ip6zone/x/ip6/fe80::1/tcp/1234');
+        });
+    });
+    describe('.fromTuples', () => {
+        it('should create a multiaddr from a list of tuples', () => {
+            const ma = multiaddr('/ip4/0.0.0.0');
+            const tuples = ma.tuples();
+            tuples.push([0x06, Uint8Array.from([0, 100])]);
+            const ma2 = fromTuples(tuples);
+            expect(ma2.toString()).to.equal('/ip4/0.0.0.0/tcp/100');
+        });
+    });
+    describe('.fromStringTuples', () => {
+        it('should create a multiaddr from a list of string tuples', () => {
+            const ma = multiaddr('/ip4/0.0.0.0');
+            const tuples = ma.stringTuples();
+            tuples.push([0x06, '100']);
+            const ma2 = fromStringTuples(tuples);
+            expect(ma2.toString()).to.equal('/ip4/0.0.0.0/tcp/100');
+        });
+    });
+    describe('.isThinWaistAddress', () => {
+        const families = ['ip4', 'ip6'];
+        const transports = ['tcp', 'udp'];
+        const addresses = {
+            ip4: '192.168.0.1',
+            ip6: '2001:8a0:7ac5:4201:3ac9:86ff:fe31:7095'
+        };
+        families.forEach((family) => {
+            transports.forEach((transport) => {
+                it(`returns true for /${family}-${transport}`, () => {
+                    expect(multiaddr(`/${family}/${addresses[family]}/${transport}/1234`).isThinWaistAddress()).to.equal(true);
+                });
+            });
+        });
+        it('returns false for two protocols not using {IPv4, IPv6}/{TCP, UDP}', () => {
+            expect(multiaddr('/ip4/192.168.0.1/utp').isThinWaistAddress()).to.equal(false);
+            expect(multiaddr('/sctp/192.168.0.1/tcp/1234').isThinWaistAddress()).to.eql(false);
+            expect(multiaddr('/http/utp').isThinWaistAddress()).to.eql(false);
+        });
+        it('returns false for more than two protocols', () => {
+            expect(multiaddr('/ip4/0.0.0.0/tcp/1234/utp').isThinWaistAddress()).to.equal(false);
+        });
+    });
+    describe('.getPeerId should parse id from multiaddr', () => {
+        it('extracts the peer Id from a multiaddr, p2p', () => {
+            expect(multiaddr('/p2p-circuit/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC').getPeerId()).to.equal('QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC');
+        });
+        it('extracts the correct peer Id from a circuit multiaddr', () => {
+            expect(multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmZR5a9AAXGqQF2ADqoDdGS8zvqv8n3Pag6TDDnTNMcFW6/p2p-circuit/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC').getPeerId()).to.equal('QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC');
+        });
+        it('extracts the peer Id from a multiaddr, p2p and CIDv1 Base32', () => {
+            expect(multiaddr('/p2p-circuit/p2p/bafzbeigweq4zr4x4ky2dvv7nanbkw6egutvrrvzw6g3h2rftp7gidyhtt4').getPeerId()).to.equal('QmckZzdVd72h9QUFuJJpQqhsZqGLwjhh81qSvZ9BhB2FQi');
+        });
+        it('extracts the peer Id from a multiaddr, p2p and CIDv1 Base32, where Id contains non b58 chars', () => {
+            expect(multiaddr('/p2p-circuit/p2p/bafzbeidt255unskpefjmqb2rc27vjuyxopkxgaylxij6pw35hhys4vnyp4').getPeerId()).to.equal('QmW8rAgaaA6sRydK1k6vonShQME47aDxaFidbtMevWs73t');
+        });
+        it('extracts the peer Id from a multiaddr, p2p and base58btc encoded identity multihash', () => {
+            expect(multiaddr('/p2p-circuit/p2p/12D3KooWNvSZnPi3RrhrTwEY4LuuBeB6K6facKUCJcyWG1aoDd2p').getPeerId()).to.equal('12D3KooWNvSZnPi3RrhrTwEY4LuuBeB6K6facKUCJcyWG1aoDd2p');
+        });
+        it('does not extract a peer Id from a circuit relay multiaddr where only the relay peer id is present', () => {
+            expect(multiaddr('/ip4/127.0.0.1/tcp/123/p2p/bafzbeigweq4zr4x4ky2dvv7nanbkw6egutvrrvzw6g3h2rftp7gidyhtt4/p2p-circuit').getPeerId()).to.be.null();
+        });
+    });
+    describe('.getPeerId should return null on missing peer id in multiaddr', () => {
+        it('parses extracts the peer Id from a multiaddr', () => {
+            expect(multiaddr('/ip4/0.0.0.0/tcp/1234/utp').getPeerId()).to.be.null();
+        });
+    });
+    describe('.getPath', () => {
+        it('should return a path for unix', () => {
+            expect(multiaddr('/unix/tmp/p2p.sock').getPath()).to.eql('/tmp/p2p.sock');
+        });
+        it('should return a path for unix when other protos exist', () => {
+            expect(multiaddr('/ip4/0.0.0.0/tcp/1234/unix/tmp/p2p.sock').getPath()).to.eql('/tmp/p2p.sock');
+        });
+        it('should not return a path when no path proto exists', () => {
+            expect(multiaddr('/ip4/0.0.0.0/tcp/1234/p2p-circuit/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC').getPath()).to.eql(null);
+        });
+    });
+    describe('multiaddr.isMultiaddr', () => {
+        it('handles different inputs', () => {
+            expect(isMultiaddr(multiaddr('/'))).to.be.eql(true);
+            expect(isMultiaddr(multiaddr('/ip4/192.0.2.0/ipcidr/24'))).to.be.eql(true);
+            expect(isMultiaddr('/')).to.be.eql(false);
+            expect(isMultiaddr(123)).to.be.eql(false);
+            expect(isMultiaddr(uint8ArrayFromString('/hello'))).to.be.eql(false);
+        });
+    });
+    describe('resolvable multiaddrs', () => {
+        describe('.isName', () => {
+            it('valid name dns', () => {
+                const str = '/dns/ipfs.io';
+                const addr = multiaddr(str);
+                expect(isName(addr)).to.equal(true);
+            });
+            it('valid name dnsaddr', () => {
+                const str = '/dnsaddr/ipfs.io';
+                const addr = multiaddr(str);
+                expect(isName(addr)).to.equal(true);
+            });
+            it('valid name dns4', () => {
+                const str = '/dns4/ipfs.io';
+                const addr = multiaddr(str);
+                expect(isName(addr)).to.equal(true);
+            });
+            it('valid name dns6', () => {
+                const str = '/dns6/ipfs.io';
+                const addr = multiaddr(str);
+                expect(isName(addr)).to.equal(true);
+            });
+            it('invalid name', () => {
+                const str = '/ip4/127.0.0.1';
+                const addr = multiaddr(str);
+                expect(isName(addr)).to.equal(false);
+            });
+        });
+    });
+});
+describe('unknown protocols', () => {
+    it('does not throw an error', () => {
+        const str = '/ip4/127.0.0.1/unknown';
+        expect(() => multiaddr(str)).to.be.ok();
+    });
+});
+//# sourceMappingURL=index.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/index.spec.js.map b/node_modules/@multiformats/multiaddr/dist/test/index.spec.js.map
new file mode 100644
index 0000000..1d68fba
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/index.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../test/index.spec.ts"],"names":[],"mappings":"AAAA,+CAA+C;AAC/C,sBAAsB;AACtB,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,UAAU,IAAI,oBAAoB,EAAE,MAAM,yBAAyB,CAAA;AAC5E,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAA;AAC/G,OAAO,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAA;AAGjD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAAkB,CAAA;IAEtB,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,OAAO,GAAG,SAAS,CAAC,yBAAyB,CAAC,CAAA;QAC9C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAC7C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC,CAAA;QACvC,MAAM,CAAC,YAAY,KAAK,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IACjD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;QACvF,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACrE,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAC7E,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAC1E,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;QACjF,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAC/D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAC9F,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAC3F,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAChD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC5C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAChD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,QAAQ,GAAG,uBAAuB,CAAA;QACxC,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QAC9C,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QAC9C,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QAC/C,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;IAClD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,QAAQ,GAAG,uBAAuB,CAAA;QACxC,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QAC/C,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QACjD,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;IAC/C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,OAAkB,CAAA;IAEtB,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,OAAO,GAAG,SAAS,CAAC,6BAA6B,CAAC,CAAA;QAClD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAC7C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC,CAAA;QACvC,MAAM,CAAC,YAAY,KAAK,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IACjD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;QACvF,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACrE,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAC7E,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAC1E,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;QACjF,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAC/D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAChD,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;QACf,MAAM,UAAU,GAAG,yBAAyB,CAAA;QAC5C,MAAM,UAAU,GAAG,oBAAoB,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAA;QACvE,MAAM,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAA;QAErC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;QAC/C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;QAE/C,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;QACpD,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;QAC1D,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAC9D,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAExD,MAAM,aAAa,GAAG,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACtD,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAA;QAC7E,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAA;QACxF,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAClE,MAAM,CAAC,cAAc,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAA;QACtE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;QACnF,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAClE,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACb,MAAM,QAAQ,GAAG,SAAS,CAAC,qDAAqD,CAAC,CAAA;QACjF,MAAM,OAAO,GAAG,SAAS,CAAC,6CAA6C,CAAC,CAAA;QACxE,MAAM,OAAO,GAAG,SAAS,CAAC,WAAW,CAAC,CAAA;QACtC,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;QAEhC,MAAM,CACJ,SAAS,CAAC,GAAG,CAAC;aACX,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,QAAQ,CAAC;aACrB,QAAQ,EAAE,CACd,CAAC,EAAE,CAAC,KAAK,CAAC;YACT,OAAO,CAAC,QAAQ,EAAE;YAClB,OAAO,CAAC,QAAQ,EAAE;YAClB,OAAO,CAAC,QAAQ,EAAE;YAClB,QAAQ,CAAC,QAAQ,EAAE;SACpB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;QAEX,MAAM,CACJ,SAAS,CAAC,GAAG,CAAC;aACX,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,QAAQ,CAAC;aACrB,WAAW,CAAC,QAAQ,CAAC;aACrB,QAAQ,EAAE,CACd,CAAC,EAAE,CAAC,KAAK,CAAC;YACT,OAAO,CAAC,QAAQ,EAAE;YAClB,OAAO,CAAC,QAAQ,EAAE;YAClB,OAAO,CAAC,QAAQ,EAAE;SACnB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;QAEX,MAAM,CACJ,SAAS,CAAC,GAAG,CAAC;aACX,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,QAAQ,CAAC;aACrB,WAAW,CAAC,OAAO,CAAC;aACpB,WAAW,CAAC,OAAO,CAAC;aACpB,QAAQ,EAAE,CACd,CAAC,EAAE,CAAC,KAAK,CAAC;YACT,OAAO,CAAC,QAAQ,EAAE;YAClB,OAAO,CAAC,QAAQ,EAAE;YAClB,QAAQ,CAAC,QAAQ,EAAE;SACpB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;IACb,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,gBAAgB,CAAA;QAC5B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,6CAA6C,CAAA;QACzD,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,GAAG,GAAG,yBAAyB,CAAA;QACrC,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,GAAG,GAAG,sDAAsD,CAAA;QAClE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,GAAG,GAAG,yBAAyB,CAAA;QACrC,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,GAAG,GAAG,sDAAsD,CAAA;QAClE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,GAAG,GAAG,4EAA4E,CAAA;QACxF,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,GAAG,GAAG,yGAAyG,CAAA;QACrH,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACvB,MAAM,GAAG,GAAG,wBAAwB,CAAA;QACpC,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;IAC/B,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;IAE/B,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;IAC/B,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;IAE/B,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,GAAG,GAAG,6BAA6B,CAAA;QACzC,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,GAAG,GAAG,0DAA0D,CAAA;QACtE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA;QACzB,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,8BAA8B,CAAA;QAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,wCAAwC,CAAA;QACpD,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,2DAA2D,CAAA;QACvE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,uEAAuE,CAAA;QACnF,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,GAAG,GAAG,+BAA+B,CAAA;QAC3C,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,GAAG,GAAG,4DAA4D,CAAA;QACxE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,GAAG,GAAG,4BAA4B,CAAA;QACxC,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,GAAG,GAAG,yDAAyD,CAAA;QACrE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,GAAG,GAAG,4GAA4G,CAAA;QACxH,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,GAAG,GAAG,8GAA8G,CAAA;QAC1H,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,GAAG,GAAG,iHAAiH,CAAA;QAC7H,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,2EAA2E,CAAA;QACvF,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,4CAA4C,CAAA;QACxD,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,GAAG,GAAG,uNAAuN,CAAA;QACnO,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,GAAG,GAAG,sCAAsC,CAAA;QAClD,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;QACd,MAAM,GAAG,GAAG,iBAAiB,CAAA;QAC7B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,qDAAqD,CAAA;QACjE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,kEAAkE,CAAA;QAC9E,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAA;IACtG,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,gCAAgC,CAAA;QAC5C,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,gDAAgD,CAAA;QAC5D,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,GAAG,GAAG,4DAA4D,CAAA;QACxE,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAC3B,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QACxC,MAAM,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,mDAAmD;QACvH,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAA;QAC3C,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;QACf,MAAM,GAAG,GAAG,8BAA8B,CAAA;QAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAChB,MAAM,GAAG,GAAG,uEAAuE,CAAA;QACnF,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACrB,MAAM,GAAG,GAAG,iEAAiE,CAAA;QAC7E,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,GAAG,GAAG,iEAAiE,CAAA;QAC7E,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,GAAG,GAAG,+FAA+F,CAAA;QAC3G,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,GAAG,GAAG,gDAAgD,CAAA;QAC5D,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,GAAG,GAAG,+CAA+C,CAAA;QAC3D,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACtB,MAAM,GAAG,GAAG,iEAAiE,CAAA;QAC7E,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,SAAS,EAAE,CAAC;iBACnD,EAAE,CAAC,GAAG,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,SAAS;gBACf,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,IAAI;aACX,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,SAAS,EAAE,CAAC;iBACvD,EAAE,CAAC,GAAG,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,IAAI;aACX,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,SAAS,EAAE,CAAC;iBACvD,EAAE,CAAC,GAAG,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,IAAI;aACX,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;YACvE,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,SAAS,EAAE,CAAC;iBACjD,EAAE,CAAC,GAAG,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,GAAG;aACV,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;YACrF,MAAM,CAAC,SAAS,CAAC,wEAAwE,CAAC,CAAC,SAAS,EAAE,CAAC;iBACpG,EAAE,CAAC,GAAG,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,GAAG;aACV,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,CACJ,SAAS,CAAC,iCAAiC,CAAC,CAAC,SAAS,EAAE,CACzD,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,WAAW;gBACjB,SAAS,EAAE,KAAK;gBAChB,IAAI,EAAE,IAAI;aACX,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,CAAC;iBAC3C,EAAE,CAAC,GAAG,CAAC,CAAC;oBACP,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,EAAE;oBACR,UAAU,EAAE,KAAK;iBAClB,EAAE;oBACD,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,CAAC;oBACP,UAAU,EAAE,KAAK;iBAClB,CAAC,CAAC,CAAA;QACP,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACxB,MAAM,CACJ,SAAS,CAAC,qEAAqE,CAAC,CAAC,MAAM,EAAE,CAC1F,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,EAAE;oBACR,UAAU,EAAE,KAAK;iBAClB,EAAE;oBACD,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,CAAC;oBACP,UAAU,EAAE,KAAK;iBAClB,EAAE;oBACD,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,CAAC,CAAC;oBACR,UAAU,EAAE,KAAK;iBAClB,CAAC,CAAC,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;YACzB,MAAM,CACJ,SAAS,CAAC,yCAAyC,CAAC,CAAC,MAAM,EAAE,CAC9D,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,EAAE;oBACR,UAAU,EAAE,KAAK;iBAClB,EAAE;oBACD,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,EAAE;oBACR,UAAU,EAAE,KAAK;iBAClB,EAAE;oBACD,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,CAAC,CAAC;oBACR,UAAU,EAAE,KAAK;iBAClB,CAAC,CAAC,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,CACJ,SAAS,CAAC,iEAAiE,CAAC,CAAC,MAAM,EAAE,CACtF,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,CAAC,CAAC;oBACR,UAAU,EAAE,KAAK;iBAClB,EAAE;oBACD,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,CAAC,CAAC;oBACR,UAAU,EAAE,KAAK;iBAClB,CAAC,CAAC,CAAA;QACL,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,CAAC;iBAC3C,EAAE,CAAC,GAAG,CAAC;gBACN,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClC,CAAC,GAAG,CAAC;aACN,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,EAAE,GAAG,SAAS,CAAC,uBAAuB,CAAC,CAAA;YAC7C,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE,CAAA;YAC1B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;YAEjB,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;QACtD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,YAAY,EAAE,CAAC;iBACjD,EAAE,CAAC,GAAG,CAAC;gBACN,CAAC,CAAC,EAAE,SAAS,CAAC;gBACd,CAAC,GAAG,CAAC;aACN,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,EAAE,GAAG,SAAS,CAAC,uBAAuB,CAAC,CAAA;YAC7C,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,EAAE,CAAA;YAChC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;YAEjB,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;QACtD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CACJ,GAAG,EAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAClE,CAAC,EAAE,CAAC,KAAK,CACR,6BAA6B,CAC9B,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,CAAA;YACnD,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,iEAAiE,CAAC,CAAA;YACrG,MAAM,MAAM,GAAG,SAAS,CAAC,qDAAqD,CAAC,CAAA;YAC/E,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;YAC1C,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;YACrE,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAA;QACvE,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,GAAG,GAAG,SAAS,CAAC,uBAAuB,CAAC,CAAA;YAC9C,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAA;QAChE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,KAAK,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAA;YAC3C,MAAM,KAAK,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAA;YAE3C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,KAAK,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAA;YAC3C,MAAM,KAAK,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAA;YAE3C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,CACJ,GAAG,EAAE,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC,WAAW,EAAE,CACtD,CAAC,EAAE,CAAC,KAAK,CACR,oCAAoC,CACrC,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CACJ,SAAS,CAAC,2BAA2B,CAAC,CAAC,WAAW,EAAE,CACrD,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,OAAO,EAAE,aAAa;gBACtB,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,IAAI;aACX,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,CACJ,SAAS,CAAC,uCAAuC,CAAC,CAAC,WAAW,EAAE,CACjE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,OAAO,EAAE,0BAA0B;gBACnC,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,GAAG;aACV,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CACJ,SAAS,CAAC,wCAAwC,CAAC,CAAC,WAAW,EAAE,CAClE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,OAAO,EAAE,0BAA0B;gBACnC,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,GAAG;aACV,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CACJ,SAAS,CAAC,wCAAwC,CAAC,CAAC,WAAW,EAAE,CAClE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,OAAO,EAAE,0BAA0B;gBACnC,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,GAAG;aACV,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,CACJ,SAAS,CAAC,2CAA2C,CAAC,CAAC,WAAW,EAAE,CACrE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,OAAO,EAAE,0BAA0B;gBACnC,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,GAAG;aACV,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;YAC/E,MAAM,CACJ,SAAS,CAAC,iFAAiF,CAAC,CAAC,WAAW,EAAE,CAC3G,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,OAAO,EAAE,qBAAqB;gBAC9B,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,GAAG;aACV,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CACJ,SAAS,CAAC,iCAAiC,CAAC,CAAC,WAAW,EAAE,CAC3D,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC;gBACV,OAAO,EAAE,WAAW;gBACpB,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,IAAI;aACX,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,4EAA4E,EAAE,GAAG,EAAE;YACpF,MAAM,CACJ,GAAG,EAAE,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,WAAW,EAAE,CACrD,CAAC,EAAE,CAAC,KAAK,CACR,mBAAmB,CACpB,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM;YACJ,wCAAwC;YACxC,GAAG,EAAE,CAAC,eAAe,EAAE,CACxB,CAAC,EAAE,CAAC,KAAK,CACR,uBAAuB,CACxB,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM;YACJ,wCAAwC;YACxC,GAAG,EAAE,CAAC,eAAe,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAC9C,CAAC,EAAE,CAAC,KAAK,CACR,6BAA6B,CAC9B,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,CACJ,eAAe,CAAC;gBACd,OAAO,EAAE,aAAa;gBACtB,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,IAAI;aACX,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,CACrB,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CACT,2BAA2B,CAC5B,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,CACJ,eAAe,CAAC;gBACd,OAAO,EAAE,WAAW;gBACpB,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,IAAI;aACX,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,CACrB,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CACT,iCAAiC,CAClC,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,EAAE,GAAG,SAAS,CAAC,cAAc,CAAC,CAAA;YACpC,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE,CAAA;YAC1B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAA;YAC9B,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,EAAE,GAAG,SAAS,CAAC,cAAc,CAAC,CAAA;YACpC,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,EAAE,CAAA;YAChC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;YAE1B,MAAM,GAAG,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAA;YACpC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,QAAQ,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC/B,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QACjC,MAAM,SAAS,GAA2B;YACxC,GAAG,EAAE,aAAa;YAClB,GAAG,EAAE,wCAAwC;SAC9C,CAAA;QACD,QAAQ,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1B,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC/B,EAAE,CAAC,qBAAqB,MAAM,IAAI,SAAS,EAAE,EAAE,GAAG,EAAE;oBAClD,MAAM,CACJ,SAAS,CAAC,IAAI,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,SAAS,OAAO,CAAC,CAAC,kBAAkB,EAAE,CACpF,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;gBAClB,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,mEAAmE,EAAE,GAAG,EAAE;YAC3E,MAAM,CACJ,SAAS,CAAC,sBAAsB,CAAC,CAAC,kBAAkB,EAAE,CACvD,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YAEjB,MAAM,CACJ,SAAS,CAAC,4BAA4B,CAAC,CAAC,kBAAkB,EAAE,CAC7D,CAAC,EAAE,CAAC,GAAG,CACN,KAAK,CACN,CAAA;YAED,MAAM,CACJ,SAAS,CAAC,WAAW,CAAC,CAAC,kBAAkB,EAAE,CAC5C,CAAC,EAAE,CAAC,GAAG,CACN,KAAK,CACN,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CACJ,SAAS,CAAC,2BAA2B,CAAC,CAAC,kBAAkB,EAAE,CAC5D,CAAC,EAAE,CAAC,KAAK,CACR,KAAK,CACN,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACzD,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,CACJ,SAAS,CAAC,iEAAiE,CAAC,CAAC,SAAS,EAAE,CACzF,CAAC,EAAE,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAA;QAC9D,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,CACJ,SAAS,CAAC,yIAAyI,CAAC,CAAC,SAAS,EAAE,CACjK,CAAC,EAAE,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAA;QAC9D,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,MAAM,CACJ,SAAS,CAAC,8EAA8E,CAAC,CAAC,SAAS,EAAE,CACtG,CAAC,EAAE,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAA;QAC9D,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,8FAA8F,EAAE,GAAG,EAAE;YACtG,MAAM,CACJ,SAAS,CAAC,8EAA8E,CAAC,CAAC,SAAS,EAAE,CACtG,CAAC,EAAE,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAA;QAC9D,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,qFAAqF,EAAE,GAAG,EAAE;YAC7F,MAAM,CACJ,SAAS,CAAC,uEAAuE,CAAC,CAAC,SAAS,EAAE,CAC/F,CAAC,EAAE,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAA;QACpE,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,mGAAmG,EAAE,GAAG,EAAE;YAC3G,MAAM,CACJ,SAAS,CAAC,oGAAoG,CAAC,CAAC,SAAS,EAAE,CAC5H,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;QAChB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,+DAA+D,EAAE,GAAG,EAAE;QAC7E,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,CACJ,SAAS,CAAC,2BAA2B,CAAC,CAAC,SAAS,EAAE,CACnD,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;QAChB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,CACJ,SAAS,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAE,CAC1C,CAAC,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,CACJ,SAAS,CAAC,yCAAyC,CAAC,CAAC,OAAO,EAAE,CAC/D,CAAC,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,CACJ,SAAS,CAAC,sFAAsF,CAAC,CAAC,OAAO,EAAE,CAC5G,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAChB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACnD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YAC1E,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YACzC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YAEzC,MAAM,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QACtE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;YACvB,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBACxB,MAAM,GAAG,GAAG,cAAc,CAAA;gBAC1B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;gBAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACrC,CAAC,CAAC,CAAA;YAEF,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;gBAC5B,MAAM,GAAG,GAAG,kBAAkB,CAAA;gBAC9B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;gBAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACrC,CAAC,CAAC,CAAA;YAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;gBACzB,MAAM,GAAG,GAAG,eAAe,CAAA;gBAC3B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;gBAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACrC,CAAC,CAAC,CAAA;YAEF,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;gBACzB,MAAM,GAAG,GAAG,eAAe,CAAA;gBAC3B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;gBAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACrC,CAAC,CAAC,CAAA;YAEF,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;gBACtB,MAAM,GAAG,GAAG,gBAAgB,CAAA;gBAC5B,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;gBAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,GAAG,GAAG,wBAAwB,CAAA;QACpC,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAA;IACzC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/ip.spec.d.ts b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.d.ts
new file mode 100644
index 0000000..bace9da
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=ip.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/ip.spec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.d.ts.map
new file mode 100644
index 0000000..bb53d28
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ip.spec.d.ts","sourceRoot":"","sources":["../../test/ip.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/ip.spec.js b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.js
new file mode 100644
index 0000000..86e9c26
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.js
@@ -0,0 +1,24 @@
+/* eslint max-nested-callbacks: ["error", 8] */
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { toBytes, toString } from '../src/ip.js';
+describe('ip', () => {
+    describe('toBytes', () => {
+        it('should handle extra characters', () => {
+            const address = '127.0.0.1 ';
+            const bytes = toBytes(address);
+            expect(toString(bytes)).to.equal(address.trim());
+        });
+        it('should turn loopback into bytes', () => {
+            const address = '127.0.0.1';
+            const bytes = toBytes(address);
+            expect(toString(bytes)).to.equal(address);
+        });
+        it('should turn private address into bytes', () => {
+            const address = '192.168.1.1';
+            const bytes = toBytes(address);
+            expect(toString(bytes)).to.equal(address);
+        });
+    });
+});
+//# sourceMappingURL=ip.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/ip.spec.js.map b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.js.map
new file mode 100644
index 0000000..8be6b3c
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/ip.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ip.spec.js","sourceRoot":"","sources":["../../test/ip.spec.ts"],"names":[],"mappings":"AAAA,+CAA+C;AAC/C,sBAAsB;AACtB,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAA;AAEhD,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE;IAClB,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,OAAO,GAAG,YAAY,CAAA;YAC5B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;YAE9B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,OAAO,GAAG,WAAW,CAAA;YAC3B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;YAE9B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,OAAO,GAAG,aAAa,CAAA;YAC7B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;YAE9B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.d.ts b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.d.ts
new file mode 100644
index 0000000..ec9f636
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=protocols.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.d.ts.map
new file mode 100644
index 0000000..1aa8d4a
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"protocols.spec.d.ts","sourceRoot":"","sources":["../../test/protocols.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.js b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.js
new file mode 100644
index 0000000..df8ac70
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.js
@@ -0,0 +1,19 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { getProtocol } from '../src/protocols-table.js';
+describe('protocols', () => {
+    describe('throws on non existent protocol', () => {
+        it('number', () => {
+            expect(() => getProtocol(1234)).to.throw(/no protocol with code/);
+        });
+        it('string', () => {
+            expect(() => getProtocol('hello')).to.throw(/no protocol with name/);
+        });
+        it('else', () => {
+            expect(
+            // @ts-expect-error incorrect parameters
+            () => getProtocol({ hi: 34 })).to.throw(/invalid protocol id type/);
+        });
+    });
+});
+//# sourceMappingURL=protocols.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.js.map b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.js.map
new file mode 100644
index 0000000..2e4001e
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/protocols.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"protocols.spec.js","sourceRoot":"","sources":["../../test/protocols.spec.ts"],"names":[],"mappings":"AAAA,sBAAsB;AACtB,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAA;AAEvD,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;YAChB,MAAM,CACJ,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CACxB,CAAC,EAAE,CAAC,KAAK,CACR,uBAAuB,CACxB,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;YAChB,MAAM,CACJ,GAAG,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAC3B,CAAC,EAAE,CAAC,KAAK,CACR,uBAAuB,CACxB,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;YACd,MAAM;YACJ,wCAAwC;YACxC,GAAG,EAAE,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAC9B,CAAC,EAAE,CAAC,KAAK,CACR,0BAA0B,CAC3B,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.d.ts b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.d.ts
new file mode 100644
index 0000000..f8c03e0
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=resolvers.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.d.ts.map b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.d.ts.map
new file mode 100644
index 0000000..a341034
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"resolvers.spec.d.ts","sourceRoot":"","sources":["../../test/resolvers.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.js b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.js
new file mode 100644
index 0000000..8c5808d
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.js
@@ -0,0 +1,173 @@
+import { RecordType } from '@multiformats/dns';
+import { expect } from 'aegir/chai';
+import sinon from 'sinon';
+import { stubInterface } from 'sinon-ts';
+import { multiaddr, resolvers } from '../src/index.js';
+import { dnsaddrResolver } from '../src/resolvers/index.js';
+const stubs = {
+    '_dnsaddr.bootstrap.libp2p.io': [
+        'dnsaddr=/dnsaddr/ams-1.bootstrap.libp2p.io/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',
+        'dnsaddr=/dnsaddr/ams-2.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb'
+    ],
+    '_dnsaddr.ams-1.bootstrap.libp2p.io': [
+        'dnsaddr=/ip4/147.75.83.83/tcp/4001/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',
+        'dnsaddr=/ip4/147.75.83.83/tcp/443/wss/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',
+        'dnsaddr=/ip4/147.75.83.83/udp/4001/quic/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',
+        'dnsaddr=/ip6/2604:1380:2000:7a00::1/tcp/4001/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',
+        'dnsaddr=/ip6/2604:1380:2000:7a00::1/tcp/443/wss/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',
+        'dnsaddr=/ip6/2604:1380:2000:7a00::1/udp/4001/quic/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd'
+    ],
+    '_dnsaddr.ams-2.bootstrap.libp2p.io': [
+        'dnsaddr=/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
+        'dnsaddr=/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
+        'dnsaddr=/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
+        'dnsaddr=/ip6/2604:1380:2000:7a00::1/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
+        'dnsaddr=/ip6/2604:1380:2000:7a00::1/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
+        'dnsaddr=/ip6/2604:1380:2000:7a00::1/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb'
+    ],
+    '_dnsaddr.bad-addrs.libp2p.io': [
+        'dnsaddr=/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',
+        'dnsaddr=/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',
+        'dnsaddr_record_value',
+        'dnsaddr=/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
+        'dnsaddr=/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt'
+    ],
+    '_dnsaddr.am6.bootstrap.libp2p.io': [
+        'dnsaddr=/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb'
+    ],
+    '_dnsaddr.self-referential.io': [
+        'dnsaddr=/dnsaddr/self-referential.io'
+    ],
+    '_dnsaddr.double-quoted-answer.io': [
+        '"dnsaddr=/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb"'
+    ],
+    '_dnsaddr.single-quoted-answer.io': [
+        "'dnsaddr=/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb'"
+    ],
+    '_dnsaddr.mixed-quoted-answer.io': [
+        '"\'""" dnsaddr=/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb"  "'
+    ]
+};
+describe('multiaddr resolve', () => {
+    let dns;
+    beforeEach(() => {
+        dns = stubInterface({
+            query: sinon.stub().callsFake((domain) => {
+                if (stubs[domain] != null) {
+                    return {
+                        Answer: stubs[domain].map(data => ({
+                            name: '_dnsaddr.bootstrap.libp2p.io',
+                            type: RecordType.TXT,
+                            ttl: 100,
+                            data
+                        }))
+                    };
+                }
+                throw new Error(`No result stubbed for ${domain}`);
+            })
+        });
+        resolvers.set('dnsaddr', dnsaddrResolver);
+    });
+    it('should throw if no resolver is available', async () => {
+        const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io');
+        resolvers.clear();
+        // Resolve
+        await expect(ma.resolve()).to.eventually.be.rejected()
+            .and.to.have.property('name', 'NoAvailableResolverError');
+    });
+    describe('dnsaddr', () => {
+        afterEach(() => {
+            sinon.restore();
+        });
+        it('can resolve dnsaddr without no peerId', async () => {
+            const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io');
+            // Resolve
+            const resolvedMas = await ma.resolve({
+                dns
+            });
+            expect(resolvedMas).to.deep.equal([
+                ...stubs['_dnsaddr.ams-1.bootstrap.libp2p.io'].map(addr => multiaddr(addr.split('=').pop())),
+                ...stubs['_dnsaddr.ams-2.bootstrap.libp2p.io'].map(addr => multiaddr(addr.split('=').pop()))
+            ]);
+        });
+        it('can resolve dnsaddr with peerId', async () => {
+            const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb');
+            // Resolve
+            const resolvedMas = await ma.resolve({
+                dns
+            });
+            expect(resolvedMas).to.deep.equal([
+                ...stubs['_dnsaddr.ams-2.bootstrap.libp2p.io'].map(addr => multiaddr(addr.split('=').pop()))
+            ]);
+        });
+        it('can resolve dnsaddr with bad record', async () => {
+            const ma = multiaddr('/dnsaddr/bad-addrs.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb');
+            // Resolve
+            const resolvedMas = await ma.resolve({
+                dns
+            });
+            // Should only have one address with the same peer id and should ignore the bad record
+            expect(resolvedMas).to.have.lengthOf(1);
+            expect(resolvedMas[0].toString()).to.equal(stubs['_dnsaddr.am6.bootstrap.libp2p.io'][0].split('=').pop());
+        });
+        it('can cancel resolving', async () => {
+            const ma = multiaddr('/dnsaddr/bootstrap.libp2p.ii/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nc');
+            const controller = new AbortController();
+            // Resolve
+            const resolvePromise = ma.resolve({
+                signal: controller.signal
+            });
+            controller.abort();
+            await expect(resolvePromise).to.eventually.be.rejected();
+        });
+        it('should abort resolving deeply nested records', async () => {
+            const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io');
+            // Resolve
+            const resolvePromise = ma.resolve({
+                dns,
+                maxRecursiveDepth: 1
+            });
+            await expect(resolvePromise).to.eventually.be.rejected().with.property('name', 'RecursionLimitError');
+        });
+        it('should handle recursive loops', async () => {
+            const ma = multiaddr('/dnsaddr/self-referential.io');
+            // Resolve
+            const resolvePromise = ma.resolve({
+                dns,
+                maxRecursiveDepth: 1
+            });
+            await expect(resolvePromise).to.eventually.be.rejected().with.property('name', 'RecursionLimitError');
+        });
+        it('should handle double quotes', async () => {
+            const ma = multiaddr('/dnsaddr/double-quoted-answer.io');
+            // Resolve
+            const resolvedMas = await ma.resolve({
+                dns
+            });
+            // Should ignore double quotes
+            expect(resolvedMas).to.have.lengthOf(1);
+            expect(resolvedMas[0].toString()).to.equal('/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb');
+        });
+        it('should handle single quotes', async () => {
+            const ma = multiaddr('/dnsaddr/single-quoted-answer.io');
+            // Resolve
+            const resolvedMas = await ma.resolve({
+                dns
+            });
+            // Should ignore double quotes
+            expect(resolvedMas).to.have.lengthOf(1);
+            expect(resolvedMas[0].toString()).to.equal('/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb');
+        });
+        it('should handle mixed quotes', async () => {
+            const ma = multiaddr('/dnsaddr/mixed-quoted-answer.io');
+            // Resolve
+            const resolvedMas = await ma.resolve({
+                dns
+            });
+            // Should ignore double quotes
+            expect(resolvedMas).to.have.lengthOf(1);
+            expect(resolvedMas[0].toString()).to.equal('/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb');
+        });
+    });
+});
+//# sourceMappingURL=resolvers.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.js.map b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.js.map
new file mode 100644
index 0000000..c1e0d19
--- /dev/null
+++ b/node_modules/@multiformats/multiaddr/dist/test/resolvers.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"resolvers.spec.js","sourceRoot":"","sources":["../../test/resolvers.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/dist/typedoc-urls.json b/node_modules/@multiformats/multiaddr/dist/typedoc-urls.json
index 74f259b..cf8ba23 100644
--- a/node_modules/@multiformats/multiaddr/dist/typedoc-urls.json
+++ b/node_modules/@multiformats/multiaddr/dist/typedoc-urls.json
@@ -38,11 +38,11 @@
   ".:isMultiaddr": "https://multiformats.github.io/js-multiaddr/functions/index.isMultiaddr.html",
   "isName": "https://multiformats.github.io/js-multiaddr/functions/index.isName.html",
   ".:isName": "https://multiformats.github.io/js-multiaddr/functions/index.isName.html",
-  "multiaddr": "https://multiformats.github.io/js-multiaddr/functions/index.multiaddr-1.html",
-  ".:multiaddr": "https://multiformats.github.io/js-multiaddr/functions/index.multiaddr-1.html",
+  "multiaddr": "https://multiformats.github.io/js-multiaddr/functions/index.multiaddr.html",
+  ".:multiaddr": "https://multiformats.github.io/js-multiaddr/functions/index.multiaddr.html",
   "protocols": "https://multiformats.github.io/js-multiaddr/functions/index.protocols.html",
   "DNSADDROptions": "https://multiformats.github.io/js-multiaddr/interfaces/resolvers.DNSADDROptions.html",
   "Resolver": "https://multiformats.github.io/js-multiaddr/interfaces/resolvers.Resolver.html",
   "./resolvers:Resolver": "https://multiformats.github.io/js-multiaddr/interfaces/resolvers.Resolver.html",
-  "dnsaddrResolver": "https://multiformats.github.io/js-multiaddr/functions/resolvers.dnsaddrResolver.html"
+  "dnsaddrResolver": "https://multiformats.github.io/js-multiaddr/variables/resolvers.dnsaddrResolver.html"
 }
\ No newline at end of file
diff --git a/node_modules/@multiformats/multiaddr/src/codec.ts b/node_modules/@multiformats/multiaddr/src/codec.ts
index ca4a3c7..1b070d6 100644
--- a/node_modules/@multiformats/multiaddr/src/codec.ts
+++ b/node_modules/@multiformats/multiaddr/src/codec.ts
@@ -13,13 +13,88 @@ export interface MultiaddrParts {
   path: string | null
 }
 
+export function stringToTuples (str: string): Tuple[] {
+  const tuples: Tuple[] = []
+  const parts = str.split('/').slice(1)
+
+  if (parts.length === 1 && parts[0] === '') {
+    return []
+  }
+
+  for (let p = 0; p < parts.length; p++) {
+    const part = parts[p]
+    const proto = getProtocol(part)
+
+    if (proto.size === 0) {
+      tuples.push([proto.code])
+
+      continue
+    }
+
+    // if it's a path proto, take the rest
+    if (proto.path === true) {
+      // should we need to check each path part to see if it's a proto?
+      // This would allow for other protocols to be added after a unix path,
+      // however it would have issues if the path had a protocol name in the path
+      const path = cleanPath(parts.slice(p).join('/'))
+      tuples.push([proto.code, convertToBytes(proto.code, path)])
+      break
+    }
+
+    p++ // advance addr part
+    if (p >= parts.length) {
+      throw new ParseError('invalid address: ' + str)
+    }
+
+    const bytes = convertToBytes(proto.code, parts[p])
+    tuples.push([proto.code, bytes])
+  }
+
+  return tuples
+}
+
+export function stringToStringTuples(str: string): StringTuple[] {
+  const stringTuples: StringTuple[] = []
+  const parts = str.split('/').slice(1)
+
+  for (let p = 0; p < parts.length; p++) {
+    const part = parts[p]
+    const proto = getProtocol(part)
+
+    if (proto.size === 0) {
+      stringTuples.push([proto.code])
+
+      continue
+    }
+
+    // if it's a path proto, take the rest
+    if (proto.path === true) {
+      // should we need to check each path part to see if it's a proto?
+      // This would allow for other protocols to be added after a unix path,
+      // however it would have issues if the path had a protocol name in the path
+      const path = cleanPath(parts.slice(p).join('/'))
+      stringTuples.push([proto.code, path])
+      break
+    }
+
+    p++ // advance addr part
+    if (p >= parts.length) {
+      throw new ParseError('invalid address: ' + str)
+    }
+
+    stringTuples.push([proto.code, parts[p]])
+  }
+
+  return stringTuples
+}
+
 export function stringToMultiaddrParts (str: string): MultiaddrParts {
-  str = cleanPath(str)
   const tuples: Tuple[] = []
   const stringTuples: StringTuple[] = []
   let path: string | null = null
 
   const parts = str.split('/').slice(1)
+
   if (parts.length === 1 && parts[0] === '') {
     return {
       bytes: new Uint8Array(),
@@ -37,7 +112,7 @@ export function stringToMultiaddrParts (str: string): MultiaddrParts {
     if (proto.size === 0) {
       tuples.push([proto.code])
       stringTuples.push([proto.code])
-      // eslint-disable-next-line no-continue
+
       continue
     }
 
@@ -83,13 +158,13 @@ export function bytesToMultiaddrParts (bytes: Uint8Array): MultiaddrParts {
 
     const p = getProtocol(code)
 
-    const size = sizeForAddr(p, bytes.slice(i + n))
+    const size = sizeForAddr(p, bytes.subarray(i + n))
 
     if (size === 0) {
       tuples.push([code])
       stringTuples.push([code])
       i += n
-      // eslint-disable-next-line no-continue
+
       continue
     }
 
@@ -165,7 +240,7 @@ function stringTuplesToString (tuples: StringTuple[]): string {
 export function tuplesToBytes (tuples: Tuple[]): Uint8Array {
   return uint8ArrayConcat(tuples.map((tup) => {
     const proto = getProtocol(tup[0])
-    let buf = Uint8Array.from(varint.encode(proto.code))
+    let buf: Uint8Array = Uint8Array.from(varint.encode(proto.code))
 
     if (tup.length > 1 && tup[1] != null) {
       buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer
@@ -198,16 +273,16 @@ export function bytesToTuples (buf: Uint8Array): Tuple[] {
 
     const p = getProtocol(code)
 
-    const size = sizeForAddr(p, buf.slice(i + n))
+    const size = sizeForAddr(p, buf.subarray(i + n))
 
     if (size === 0) {
       tuples.push([code])
       i += n
-      // eslint-disable-next-line no-continue
+
       continue
     }
 
-    const addr = buf.slice(i + n, i + n + size)
+    const addr = buf.subarray(i + n, i + n + size)
 
     i += (size + n)
 
@@ -222,6 +297,18 @@ export function bytesToTuples (buf: Uint8Array): Tuple[] {
   return tuples
 }
 
+export function bytesToStringTuples (buf: Uint8Array): StringTuple[] {
+  return bytesToTuples(buf).map(([key, value]) => {
+    const output: StringTuple = [key]
+
+    if (value != null) {
+      output.push(convertToString(key, value))
+    }
+
+    return output
+  })
+}
+
 export function cleanPath (str: string): string {
   return '/' + str.trim().split('/').filter((a) => a).join('/')
 }
diff --git a/node_modules/@multiformats/multiaddr/src/convert.ts b/node_modules/@multiformats/multiaddr/src/convert.ts
index cbc5b07..2444b19 100644
--- a/node_modules/@multiformats/multiaddr/src/convert.ts
+++ b/node_modules/@multiformats/multiaddr/src/convert.ts
@@ -180,7 +180,7 @@ function str2bytes (str: string): Uint8Array {
 
 function bytes2str (buf: Uint8Array): string {
   const size = varint.decode(buf)
-  buf = buf.slice(varint.encodingLength(size))
+  buf = buf.subarray(varint.encodingLength(size))
 
   if (buf.length !== size) {
     throw new Error('inconsistent lengths')
@@ -210,7 +210,7 @@ function mb2bytes (mbstr: string): Uint8Array {
 }
 function bytes2mb (buf: Uint8Array): string {
   const size = varint.decode(buf)
-  const hash = buf.slice(varint.encodingLength(size))
+  const hash = buf.subarray(varint.encodingLength(size))
 
   if (hash.length !== size) {
     throw new Error('inconsistent lengths')
@@ -224,7 +224,7 @@ function bytes2mb (buf: Uint8Array): string {
  */
 function bytes2mh (buf: Uint8Array): string {
   const size = varint.decode(buf)
-  const address = buf.slice(varint.encodingLength(size))
+  const address = buf.subarray(varint.encodingLength(size))
 
   if (address.length !== size) {
     throw new Error('inconsistent lengths')
@@ -275,8 +275,8 @@ function onion32bytes (str: string): Uint8Array {
 }
 
 function bytes2onion (buf: Uint8Array): string {
-  const addrBytes = buf.slice(0, buf.length - 2)
-  const portBytes = buf.slice(buf.length - 2)
+  const addrBytes = buf.subarray(0, buf.length - 2)
+  const portBytes = buf.subarray(buf.length - 2)
   const addr = uint8ArrayToString(addrBytes, 'base32')
   const port = bytes2port(portBytes)
   return `${addr}:${port}`
diff --git a/node_modules/@multiformats/multiaddr/src/filter/multiaddr-filter.ts b/node_modules/@multiformats/multiaddr/src/filter/multiaddr-filter.ts
index 64b6057..66977a7 100644
--- a/node_modules/@multiformats/multiaddr/src/filter/multiaddr-filter.ts
+++ b/node_modules/@multiformats/multiaddr/src/filter/multiaddr-filter.ts
@@ -1,5 +1,6 @@
 import { convertToIpNet } from '../convert.js'
-import { multiaddr, type Multiaddr, type MultiaddrInput } from '../index.js'
+import { multiaddr } from '../index.js'
+import type { Multiaddr, MultiaddrInput } from '../index.js'
 import type { IpNet } from '@chainsafe/netmask'
 
 /**
@@ -31,7 +32,7 @@ export class MultiaddrFilter {
   }
 
   public contains (input: MultiaddrInput): boolean {
-    if (input == null) return false
+    if (input == null) { return false }
     const m = multiaddr(input)
     let ip
     for (const [code, value] of m.stringTuples()) {
@@ -40,7 +41,7 @@ export class MultiaddrFilter {
         break
       }
     }
-    if (ip === undefined) return false
+    if (ip === undefined) { return false }
     return this.netmask.contains(ip)
   }
 }
diff --git a/node_modules/@multiformats/multiaddr/src/index.ts b/node_modules/@multiformats/multiaddr/src/index.ts
index f4e5e60..e3835c3 100644
--- a/node_modules/@multiformats/multiaddr/src/index.ts
+++ b/node_modules/@multiformats/multiaddr/src/index.ts
@@ -205,7 +205,8 @@ export interface Multiaddr {
   toJSON(): string
 
   /**
-   * Returns Multiaddr as a convinient options object to be used with net.createConnection
+   * Returns Multiaddr as a convenient options object to be used with
+   * `createConnection` from `node:net`
    *
    * @example
    * ```js
@@ -218,9 +219,9 @@ export interface Multiaddr {
   toOptions(): MultiaddrObject
 
   /**
-   * Returns the protocols the Multiaddr is defined with, as an array of objects, in
-   * left-to-right order. Each object contains the protocol code, protocol name,
-   * and the size of its address space in bits.
+   * Returns the protocols the Multiaddr is defined with, as an array of
+   * objects, in left-to-right order. Each object contains the protocol code,
+   * protocol name, and the size of its address space in bits.
    * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
    *
    * @example
@@ -339,8 +340,8 @@ export interface Multiaddr {
   decapsulate(addr: Multiaddr | string): Multiaddr
 
   /**
-   * A more reliable version of `decapsulate` if you are targeting a
-   * specific code, such as 421 (the `p2p` protocol code). The last index of the code
+   * A more reliable version of `decapsulate` if you are targeting a specific
+   * code, such as 421 (the `p2p` protocol code). The last index of the code
    * will be removed from the `Multiaddr`, and a new instance will be returned.
    * If the code is not present, the original `Multiaddr` is returned.
    *
@@ -373,6 +374,8 @@ export interface Multiaddr {
    * // should return QmValidBase58string or null if the id is missing or invalid
    * const peerId = mh1.getPeerId()
    * ```
+   *
+   * @deprecated A multiaddr can contain multiple PeerIds, use stringTuples() to get the one you want
    */
   getPeerId(): string | null
 
@@ -389,6 +392,8 @@ export interface Multiaddr {
    * // should return utf8 string or null if the id is missing or invalid
    * const path = mh1.getPath()
    * ```
+   *
+   * @deprecated A multiaddr can contain multiple tuples that could be interpreted as paths, use stringTuples() to get the one you want
    */
   getPath(): string | null
 
@@ -430,13 +435,15 @@ export interface Multiaddr {
    * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)
    * // ]
    * ```
+   *
+   * @deprecated If you need to act on `dnsaddr` addresses, do it yourself
    */
   resolve(options?: ResolveOptions): Promise<Multiaddr[]>
 
   /**
-   * Gets a Multiaddrs node-friendly address object. Note that protocol information
-   * is left out: in Node (and most network systems) the protocol is unknowable
-   * given only the address.
+   * Gets a Multiaddrs node-friendly address object. Note that protocol
+   * information is left out: in Node (and most network systems) the protocol is
+   * unknowable given only the address.
    *
    * Has to be a ThinWaist Address, otherwise throws error
    *
@@ -518,7 +525,7 @@ export function fromNodeAddress (addr: NodeAddress, transport: string): Multiadd
 
         host = parts[0]
         const zone = parts[1]
-        ip = `/ip6zone/${zone}/ip6`
+        ip = `ip6zone/${zone}/ip6`
       }
       break
     default:
diff --git a/node_modules/@multiformats/multiaddr/src/ip.ts b/node_modules/@multiformats/multiaddr/src/ip.ts
index 4dc6034..130d123 100644
--- a/node_modules/@multiformats/multiaddr/src/ip.ts
+++ b/node_modules/@multiformats/multiaddr/src/ip.ts
@@ -31,20 +31,20 @@ export const toBytes = function (ip: string): Uint8Array {
 
       if (isv4) {
         v4Buffer = toBytes(sections[i])
-        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')
+        sections[i] = uint8ArrayToString(v4Buffer.subarray(0, 2), 'base16')
       }
 
       if (v4Buffer != null && ++i < 8) {
-        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))
+        sections.splice(i, 0, uint8ArrayToString(v4Buffer.subarray(2, 4), 'base16'))
       }
     }
 
     if (sections[0] === '') {
-      while (sections.length < 8) sections.unshift('0')
+      while (sections.length < 8) { sections.unshift('0') }
     } else if (sections[sections.length - 1] === '') {
-      while (sections.length < 8) sections.push('0')
+      while (sections.length < 8) { sections.push('0') }
     } else if (sections.length < 8) {
-      for (i = 0; i < sections.length && sections[i] !== ''; i++);
+      for (i = 0; i < sections.length && sections[i] !== ''; i++) { }
       const argv: [number, number, ...string[]] = [i, 1]
       for (i = 9 - sections.length; i > 0; i--) {
         argv.push('0')
diff --git a/node_modules/@multiformats/multiaddr/src/multiaddr.ts b/node_modules/@multiformats/multiaddr/src/multiaddr.ts
index ced63b6..a426c4b 100644
--- a/node_modules/@multiformats/multiaddr/src/multiaddr.ts
+++ b/node_modules/@multiformats/multiaddr/src/multiaddr.ts
@@ -3,9 +3,10 @@ import { base58btc } from 'multiformats/bases/base58'
 import { CID } from 'multiformats/cid'
 import { equals as uint8ArrayEquals } from 'uint8arrays/equals'
 import { toString as uint8ArrayToString } from 'uint8arrays/to-string'
-import { bytesToMultiaddrParts, stringToMultiaddrParts, type MultiaddrParts, tuplesToBytes } from './codec.js'
+import { bytesToMultiaddrParts, bytesToStringTuples, bytesToTuples, stringToMultiaddrParts, stringToStringTuples, stringToTuples, tuplesToBytes } from './codec.js'
 import { getProtocol, names } from './protocols-table.js'
 import { isMultiaddr, multiaddr, resolvers } from './index.js'
+import type { MultiaddrParts } from './codec.js'
 import type { MultiaddrInput, Multiaddr as MultiaddrInterface, MultiaddrObject, Protocol, StringTuple, Tuple, NodeAddress, ResolveOptions } from './index.js'
 
 const inspect = Symbol.for('nodejs.util.inspect.custom')
@@ -29,43 +30,103 @@ class NoAvailableResolverError extends Error {
  * Creates a {@link Multiaddr} from a {@link MultiaddrInput}
  */
 export class Multiaddr implements MultiaddrInterface {
-  public bytes: Uint8Array
-  readonly #string: string
-  readonly #tuples: Tuple[]
-  readonly #stringTuples: StringTuple[]
-  readonly #path: string | null
+  #bytes?: Uint8Array
+  #string?: string
+  #tuples?: Tuple[]
+  #stringTuples?: StringTuple[]
+  #path?: string | null
 
   [symbol]: boolean = true
 
   constructor (addr?: MultiaddrInput) {
     // default
-    if (addr == null) {
-      addr = ''
+    if (addr == null || addr === '') {
+      addr = '/'
     }
 
-    let parts: MultiaddrParts
     if (addr instanceof Uint8Array) {
-      parts = bytesToMultiaddrParts(addr)
+      this.#bytes = addr
     } else if (typeof addr === 'string') {
-      if (addr.length > 0 && addr.charAt(0) !== '/') {
+      if (addr.charAt(0) !== '/') {
         throw new Error(`multiaddr "${addr}" must start with a "/"`)
       }
-      parts = stringToMultiaddrParts(addr)
+
+      this.#string = addr
     } else if (isMultiaddr(addr)) { // Multiaddr
-      parts = bytesToMultiaddrParts(addr.bytes)
+      this.#bytes = addr.bytes
+      this.#string = addr.toString()
+      this.#tuples = addr.tuples()
+      this.#stringTuples = addr.stringTuples()
+      this.#path = addr.getPath()
     } else {
       throw new Error('addr must be a string, Buffer, or another Multiaddr')
     }
+  }
+
+  get bytes (): Uint8Array {
+    if (this.#bytes == null) {
+      if (this.#string == null) {
+        throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr')
+      }
+
+      const parts = stringToMultiaddrParts(this.#string)
+      this.#bytes = parts.bytes
+      this.#tuples = parts.tuples
+      this.#stringTuples = parts.stringTuples
+      this.#path = parts.path
+    }
+
+    return this.#bytes
+  }
+
+  toString (): string {
+    if (this.#string == null) {
+      if (this.#bytes == null) {
+        throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr')
+      }
+
+      const parts = bytesToMultiaddrParts(this.#bytes)
+      this.#string = parts.string
+      this.#tuples = parts.tuples
+      this.#stringTuples = parts.stringTuples
+      this.#path = parts.path
+    }
+
+    return this.#string === '' ? '/' : this.#string
+  }
+
+  #populate (): void {
+    let parts
+
+    if (this.#string != null) {
+      parts = stringToMultiaddrParts(this.#string)
+    } else if (this.#bytes != null) {
+      parts = bytesToMultiaddrParts(this.#bytes)
+    } else {
+      throw new Error('Multiaddr must be constructed from string, bytes or another Multiaddr')
+    }
 
-    this.bytes = parts.bytes
     this.#string = parts.string
+    this.#bytes = parts.bytes
     this.#tuples = parts.tuples
     this.#stringTuples = parts.stringTuples
     this.#path = parts.path
   }
 
-  toString (): string {
-    return this.#string
+  #getTuples (): Tuple[] {
+    if (this.#tuples == null) {
+      this.#populate()
+    }
+
+    return this.#tuples ?? []
+  }
+
+  #getStringTuples (): StringTuple[] {
+    if (this.#stringTuples == null) {
+      this.#populate()
+    }
+
+    return this.#stringTuples ?? []
   }
 
   toJSON (): string {
@@ -126,19 +187,19 @@ export class Multiaddr implements MultiaddrInterface {
   }
 
   protos (): Protocol[] {
-    return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)))
+    return this.#getTuples().map(([code]) => Object.assign({}, getProtocol(code)))
   }
 
   protoCodes (): number[] {
-    return this.#tuples.map(([code]) => code)
+    return this.#getTuples().map(([code]) => code)
   }
 
   protoNames (): string[] {
-    return this.#tuples.map(([code]) => getProtocol(code).name)
+    return this.#getTuples().map(([code]) => getProtocol(code).name)
   }
 
   tuples (): Array<[number, Uint8Array?]> {
-    return this.#tuples.map(([code, value]) => {
+    return this.#getTuples().map(([code, value]) => {
       if (value == null) {
         return [code]
       }
@@ -148,7 +209,7 @@ export class Multiaddr implements MultiaddrInterface {
   }
 
   stringTuples (): Array<[number, string?]> {
-    return this.#stringTuples.map(([code, value]) => {
+    return this.#getStringTuples().map(([code, value]) => {
       if (value == null) {
         return [code]
       }
@@ -159,16 +220,22 @@ export class Multiaddr implements MultiaddrInterface {
 
   encapsulate (addr: MultiaddrInput): Multiaddr {
     addr = new Multiaddr(addr)
-    return new Multiaddr(this.toString() + addr.toString())
+
+    return new Multiaddr(tuplesToBytes([
+      ...this.tuples(),
+      ...addr.tuples()
+    ]))
   }
 
   decapsulate (addr: Multiaddr | string): Multiaddr {
-    const addrString = addr.toString()
+    const addrString = new Multiaddr(addr).toString()
     const s = this.toString()
     const i = s.lastIndexOf(addrString)
-    if (i < 0) {
+
+    if (i < 0 || (addrString === '/' && s !== '/')) {
       throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)
     }
+
     return new Multiaddr(s.slice(0, i))
   }
 
@@ -220,7 +287,11 @@ export class Multiaddr implements MultiaddrInterface {
   }
 
   getPath (): string | null {
-    return this.#path
+    if (this.#path === undefined) {
+      this.#populate()
+    }
+
+    return this.#path ?? null
   }
 
   equals (addr: { bytes: Uint8Array }): boolean {
@@ -288,6 +359,6 @@ export class Multiaddr implements MultiaddrInterface {
    * ```
    */
   [inspect] (): string {
-    return `Multiaddr(${this.#string})`
+    return `Multiaddr(${this.toString()})`
   }
 }
